
bin/Debug/chapeka.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00007168  000071fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007168  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002b6  008001a8  008001a8  000072a4  2**0
                  ALLOC
  3 .comment      00000012  00000000  00000000  000072a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000072b8  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 000002c0  00000000  00000000  000072f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000499b  00000000  00000000  000075b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00001795  00000000  00000000  0000bf53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000554d  00000000  00000000  0000d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00001130  00000000  00000000  00012c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000f93  00000000  00000000  00013d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000001bf  00000000  00000000  00014cfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__ctors_end>
       4:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
       8:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
       c:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      10:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      14:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      18:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      1c:	0c 94 2c 2b 	jmp	0x5658	; 0x5658 <__vector_7>
      20:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      24:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      28:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      2c:	0c 94 a3 2d 	jmp	0x5b46	; 0x5b46 <__vector_11>
      30:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      34:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      38:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      3c:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      40:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      44:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      48:	0c 94 f4 2f 	jmp	0x5fe8	; 0x5fe8 <__vector_18>
      4c:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      50:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      54:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <__vector_21>
      58:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      5c:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      60:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>
      64:	0c 94 32 05 	jmp	0xa64	; 0xa64 <__bad_interrupt>

00000068 <__c.58>:
      68:	45 4e 45 52 47 59 20 2b 2b 2b 0d 0a 00              ENERGY +++...

00000075 <__c.57>:
      75:	45 4e 45 52 47 59 20 2b 2b 2b 00                    ENERGY +++.

00000080 <__c.56>:
      80:	45 4e 45 52 47 59 20 46 52 4f 4d 20 55 54 4b 49     ENERGY FROM UTKI
      90:	4e 41 0d 0a 00                                      NA...

00000095 <__c.55>:
      95:	45 4e 45 52 47 59 20 46 52 4f 4d 20 55 54 4b 49     ENERGY FROM UTKI
      a5:	4e 41 00                                            NA.

000000a8 <__c.54>:
      a8:	45 4e 45 52 47 59 20 46 52 4f 4d 20 43 48 41 50     ENERGY FROM CHAP
      b8:	45 4b 41 0d 0a 00                                   EKA...

000000be <__c.53>:
      be:	45 4e 45 52 47 59 20 46 52 4f 4d 20 43 48 41 50     ENERGY FROM CHAP
      ce:	45 4b 41 00                                         EKA.

000000d2 <__c.52>:
      d2:	4e 4f 54 5f 45 4e 45 52 47 59 0d 0a 00              NOT_ENERGY...

000000df <__c.51>:
      df:	45 4e 45 52 47 59 20 2b 2b 2b 0d 0a 00              ENERGY +++...

000000ec <__c.50>:
      ec:	45 4e 45 52 47 59 20 2b 2b 2b 00                    ENERGY +++.

000000f7 <__c.49>:
      f7:	45 4e 45 52 47 59 20 46 52 4f 4d 20 43 48 41 50     ENERGY FROM CHAP
     107:	45 4b 41 0d 0a 00                                   EKA...

0000010d <__c.48>:
     10d:	45 4e 45 52 47 59 20 46 52 4f 4d 20 43 48 41 50     ENERGY FROM CHAP
     11d:	45 4b 41 00                                         EKA.

00000121 <__c.47>:
     121:	45 4e 45 52 47 59 20 46 52 4f 4d 20 55 54 4b 49     ENERGY FROM UTKI
     131:	4e 41 0d 0a 00                                      NA...

00000136 <__c.46>:
     136:	45 4e 45 52 47 59 20 46 52 4f 4d 20 55 54 4b 49     ENERGY FROM UTKI
     146:	4e 41 00                                            NA.

00000149 <__c.45>:
     149:	4e 4f 54 5f 45 4e 45 52 47 59 0d 0a 00              NOT_ENERGY...

00000156 <__c.43>:
     156:	70 6f 77 65 72 20 2b 2b 2b 2e 00                    power +++..

00000161 <__c.38>:
     161:	45 78 74 65 72 6e 61 6c 20 70 6f 77 65 72 20 69     External power i
     171:	73 20 6f 6e 2e 00                                   s on..

00000177 <__c.37>:
     177:	45 78 74 65 72 6e 61 6c 20 70 6f 77 65 72 20 69     External power i
     187:	73 20 6f 6e 2e 00                                   s on..

0000018d <__c.35>:
     18d:	70 6f 77 65 72 20 2d 2d 2d 00                       power ---.

00000197 <__c.31>:
     197:	45 78 74 65 72 6e 61 6c 20 70 6f 77 65 72 20 69     External power i
     1a7:	73 20 6f 66 66 2e 00                                s off..

000001ae <__c.30>:
     1ae:	45 78 74 65 72 6e 61 6c 20 70 6f 77 65 72 20 69     External power i
     1be:	73 20 6f 66 66 2e 00                                s off..

000001c5 <__c.29>:
     1c5:	63 68 65 63 6b 20 62 61 74 74 65 72 79 00           check battery.

000001d3 <__c.28>:
     1d3:	42 61 74 74 65 72 79 20 4c 4f 57 21 21 21 00        Battery LOW!!!.

000001e2 <__c.27>:
     1e2:	6c 6f 77 20 62 61 74 74 65 72 79 00                 low battery.

000001ee <__c.26>:
     1ee:	44 65 70 6f 73 69 74 3d 25 73 20 52 55 42 2c 20     Deposit=%s RUB, 
	...

000001ff <__c.25>:
     1ff:	54 69 6d 65 3d 25 75 64 25 75 68 25 75 6d 25 75     Time=%ud%uh%um%u
     20f:	73 2c 20 00                                         s, .

00000213 <__c.24>:
     213:	54 65 6d 70 65 72 61 74 75 72 65 3d 25 64 43 2c     Temperature=%dC,
     223:	20 00                                                .

00000225 <__c.23>:
     225:	47 53 4d 3d 25 64 25 25 2c 20 00                    GSM=%d%%, .

00000230 <__c.22>:
     230:	42 61 74 74 65 72 79 3d 25 64 25 25 2c 20 00        Battery=%d%%, .

0000023f <__c.21>:
     23f:	72 73 74 5f 6d 63 75 3d 25 6c 75 2e 20 00           rst_mcu=%lu. .

0000024d <__c.20>:
     24d:	65 6e 65 72 67 79 20 66 72 6f 6d 20 43 68 61 70     energy from Chap
     25d:	65 6b 61 2e 00                                      eka..

00000262 <__c.19>:
     262:	65 6e 65 72 67 79 20 66 72 6f 6d 20 55 74 6b 69     energy from Utki
     272:	6e 61 2e 00                                         na..

00000276 <__c.18>:
     276:	57 61 72 6e 69 6e 67 21 20 45 6e 65 72 67 79 20     Warning! Energy 
     286:	66 72 6f 6d 20 43 68 61 70 65 6b 61 2e 00           from Chapeka..

00000294 <__c.17>:
     294:	57 61 72 6e 69 6e 67 21 20 45 6e 65 72 67 79 20     Warning! Energy 
     2a4:	66 72 6f 6d 20 55 74 6b 69 6e 61 2e 00              from Utkina..

000002b1 <__c.16>:
     2b1:	41 6c 61 72 6d 21 20 4e 6f 74 20 65 6e 65 72 67     Alarm! Not energ
     2c1:	79 21 21 21 00                                      y!!!.

000002c6 <__c.15>:
     2c6:	44 65 70 3d 25 73 2c 20 00                          Dep=%s, .

000002cf <__c.14>:
     2cf:	74 69 6d 65 3d 25 75 64 25 75 68 25 75 6d 25 75     time=%ud%uh%um%u
     2df:	73 2c 20 00                                         s, .

000002e3 <__c.13>:
     2e3:	74 65 6d 70 3d 25 64 43 2c 20 00                    temp=%dC, .

000002ee <__c.12>:
     2ee:	72 73 74 5f 6d 63 75 3d 25 6c 75 2c 20 00           rst_mcu=%lu, .

000002fc <__c.11>:
     2fc:	73 3d 25 64 25 25 2c 20 00                          s=%d%%, .

00000305 <__c.10>:
     305:	65 5f 70 6f 77 65 72 3d 25 75 2e 20 00              e_power=%u. .

00000312 <__c.9>:
     312:	62 61 74 74 65 72 79 3d 25 64 25 25 2e 20 00        battery=%d%%. .

00000321 <__c.8>:
     321:	65 6e 65 72 67 79 20 66 72 6f 6d 20 43 68 61 70     energy from Chap
     331:	65 6b 61 2e 00                                      eka..

00000336 <__c.7>:
     336:	65 6e 65 72 67 79 20 66 72 6f 6d 20 55 74 6b 69     energy from Utki
     346:	6e 61 2e 00                                         na..

0000034a <__c.6>:
     34a:	20 57 61 72 6e 69 6e 67 21 20 45 6e 65 72 67 79      Warning! Energy
     35a:	20 66 72 6f 6d 20 43 68 61 70 65 6b 61 2e 00         from Chapeka..

00000369 <__c.5>:
     369:	20 57 61 72 6e 69 6e 67 21 20 45 6e 65 72 67 79      Warning! Energy
     379:	20 66 72 6f 6d 20 55 74 6b 69 6e 61 2e 00            from Utkina..

00000387 <__c.4>:
     387:	20 41 6c 61 72 6d 21 20 4e 6f 74 20 65 6e 65 72      Alarm! Not ener
     397:	67 79 21 21 21 00                                   gy!!!.

0000039d <__c.1>:
     39d:	41 6c 61 72 6d 21 20 54 45 4d 50 45 52 41 54 55     Alarm! TEMPERATU
     3ad:	52 45 21 21 21 00                                   RE!!!.

000003b3 <__c.0>:
     3b3:	41 6c 61 72 6d 21 20 54 45 4d 50 45 52 41 54 55     Alarm! TEMPERATU
     3c3:	52 45 20 3e 20 37 30 00                             RE > 70.

000003cb <__c.0>:
     3cb:	65 65 70 72 6f 6d 5f 72 65 61 64 5f 63 6f 6e 66     eeprom_read_conf
     3db:	69 67 0d 0a 00                                      ig...

000003e0 <__c.51>:
     3e0:	41 54 2b 43 4c 43 43 0d 0a 00                       AT+CLCC...

000003ea <__c.50>:
     3ea:	2b 43 4c 43 43 3a 00                                +CLCC:.

000003f1 <__c.49>:
     3f1:	45 52 52 4f 52 00                                   ERROR.

000003f7 <__c.48>:
     3f7:	2b 44 54 4d 46 3a 00                                +DTMF:.

000003fe <__c.47>:
     3fe:	41 54 2b 43 52 45 43 3d 35 0d 0a 00                 AT+CREC=5...

0000040a <__c.46>:
     40a:	41 54 2b 43 52 45 43 3d 34 2c 22 43 3a 5c 55 73     AT+CREC=4,"C:\Us
     41a:	65 72 5c 00                                         er\.

0000041e <__c.45>:
     41e:	2e 61 6d 72 22 2c 30 2c 31 30 30 2c 00              .amr",0,100,.

0000042b <__c.44>:
     42b:	0d 0a 00                                            ...

0000042e <__c.43>:
     42e:	41 54 44 25 73 3b 0d 0a 00                          ATD%s;...

00000437 <__c.42>:
     437:	43 41 4c 4c 5f 4f 55 54 5f 44 49 41 4c 20 2e 2e     CALL_OUT_DIAL ..
     447:	2e 20 00                                            . .

0000044a <__c.41>:
     44a:	43 61 6c 6c 20 65 6e 64 65 64 00                    Call ended.

00000455 <__c.40>:
     455:	4e 6f 20 61 6e 73 77 65 72 21 00                    No answer!.

00000460 <__c.39>:
     460:	41 54 48 0d 0a 00                                   ATH...

00000466 <__c.38>:
     466:	77 61 69 74 20 73 74 72 20 74 69 6d 65 20 65 6e     wait str time en
     476:	64 00                                               d.

00000478 <__c.37>:
     478:	45 52 52 4f 52 00                                   ERROR.

0000047e <__c.36>:
     47e:	63 6d 64 20 74 69 6d 65 20 65 6e 64 00              cmd time end.

0000048b <__c.35>:
     48b:	45 52 52 4f 52 00                                   ERROR.

00000491 <__c.34>:
     491:	41 54 2b 43 52 45 47 3f 0d 0a 00                    AT+CREG?...

0000049c <__c.33>:
     49c:	2b 43 52 45 47 3a 00                                +CREG:.

000004a3 <__c.30>:
     4a3:	6e 6f 74 20 72 65 67 20 67 73 6d 00                 not reg gsm.

000004af <__c.28>:
     4af:	41 54 2b 43 53 51 0d 00                             AT+CSQ..

000004b7 <__c.27>:
     4b7:	41 54 2b 43 4d 47 53 3d 22 25 73 22 0d 0a 00        AT+CMGS="%s"...

000004c6 <__c.26>:
     4c6:	41 54 2b 43 4d 47 57 3d 22 25 73 22 0d 0a 00        AT+CMGW="%s"...

000004d5 <__c.25>:
     4d5:	41 54 2b 43 4d 47 53 3d 22 25 73 22 0d 0a 00        AT+CMGS="%s"...

000004e4 <__c.24>:
     4e4:	2b 43 4d 54 49 3a 00                                +CMTI:.

000004eb <__c.23>:
     4eb:	2b 43 4c 49 50 3a 00                                +CLIP:.

000004f2 <__c.22>:
     4f2:	2b 44 54 4d 46 3a 00                                +DTMF:.

000004f9 <__c.21>:
     4f9:	41 54 2b 43 4d 47 4c 3d 22 53 54 4f 20 55 4e 53     AT+CMGL="STO UNS
     509:	45 4e 54 22 0d 0a 00                                ENT"...

00000510 <__c.20>:
     510:	41 54 2b 43 4d 53 53 3d 25 64 2c 22 25 73 22 0d     AT+CMSS=%d,"%s".
     520:	0a 00                                               ..

00000522 <__c.19>:
     522:	41 54 2b 43 4d 47 44 3d 25 64 0d 0a 00              AT+CMGD=%d...

0000052f <__c.18>:
     52f:	64 65 6c 5f 73 6d 73 5f 69 6e 64 00                 del_sms_ind.

0000053b <__c.17>:
     53b:	41 54 2b 43 4d 47 4c 3d 22 52 45 43 20 55 4e 52     AT+CMGL="REC UNR
     54b:	45 41 44 22 0d 0a 00                                EAD"...

00000552 <__c.16>:
     552:	41 54 2b 43 4d 47 44 3d 25 64 0d 0a 00              AT+CMGD=%d...

0000055f <__c.15>:
     55f:	41 54 2b 43 4d 47 44 41 3d 22 44 45 4c 20 41 4c     AT+CMGDA="DEL AL
     56f:	4c 22 0d 0a 00                                      L"...

00000574 <__c.14>:
     574:	41 54 41 0d 0a 00                                   ATA...

0000057a <__c.12>:
     57a:	41 54 0d 0a 00                                      AT...

0000057f <__c.11>:
     57f:	41 54 45 30 0d 0a 00                                ATE0...

00000586 <__c.10>:
     586:	41 54 2b 43 4d 47 46 3d 31 0d 0a 00                 AT+CMGF=1...

00000592 <__c.9>:
     592:	41 54 2b 43 4e 4d 49 3d 32 2c 31 2c 30 2c 31 2c     AT+CNMI=2,1,0,1,
     5a2:	30 0d 0a 00                                         0...

000005a6 <__c.8>:
     5a6:	41 54 2b 43 4c 49 50 3d 31 0d 0a 00                 AT+CLIP=1...

000005b2 <__c.7>:
     5b2:	41 54 2b 43 50 4d 53 3d 22 53 4d 22 2c 22 53 4d     AT+CPMS="SM","SM
     5c2:	22 2c 22 53 4d 22 0d 0a 00                          ","SM"...

000005cb <__c.6>:
     5cb:	41 54 2b 44 44 45 54 3d 31 0d 0a 00                 AT+DDET=1...

000005d7 <__c.5>:
     5d7:	41 54 2b 43 55 53 44 3d 31 2c 22 00                 AT+CUSD=1,".

000005e3 <__c.4>:
     5e3:	22 0d 0a 00                                         "...

000005e7 <__c.3>:
     5e7:	44 65 70 6f 73 69 74 20 3c 20 31 30 20 72 75 62     Deposit < 10 rub
	...

000005f8 <__c.2>:
     5f8:	44 65 70 6f 73 69 74 20 3c 20 31 30 20 52 55 42     Deposit < 10 RUB
	...

00000609 <__c.1>:
     609:	73 74 61 72 74 00                                   start.

0000060f <__c.0>:
     60f:	65 6e 64 20 73 65 74 75 70 00                       end setup.

00000619 <help_text>:
     619:	68 65 6c 70 73 65 74 3b 68 65 6c 70 67 65 74 3b     helpset;helpget;
     629:	72 65 70 6f 72 74 3b 61 64 6d 69 6e 70 68 6f 6e     report;adminphon
     639:	65 73 3b 72 65 62 6f 6f 74 3b 72 65 73 65 74 64     es;reboot;resetd
     649:	65 66 61 75 6c 74 3b 00 00 00 00 00 00 00 00 00     efault;.........
	...

000006ba <help_get>:
     6ba:	67 65 74 3a 61 64 6d 69 6e 70 68 6f 6e 65 73 3b     get:adminphones;
     6ca:	61 63 63 65 70 74 5f 63 61 6c 6c 73 3b 61 63 63     accept_calls;acc
     6da:	65 70 74 5f 73 6d 73 3b 72 65 70 6f 72 74 5f 74     ept_sms;report_t
     6ea:	3b 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ;...............
	...

0000075b <help_set>:
     75b:	73 65 74 3a 61 63 63 65 70 74 5f 63 61 6c 6c 73     set:accept_calls
     76b:	3d 3b 61 63 63 65 70 74 5f 73 6d 73 3d 3b 72 65     =;accept_sms=;re
     77b:	70 6f 72 74 5f 74 3d 3b 75 74 6b 69 6e 61 3d 3b     port_t=;utkina=;
     78b:	63 68 61 70 65 6b 61 3d 3b 70 61 75 73 65 5f 72     chapeka=;pause_r
     79b:	65 6c 61 79 3d 3b 00 00 00 00 00 00 00 00 00 00     elay=;..........
	...

000007fc <__c.44>:
     7fc:	70 68 6f 6e 65 20 6f 6b 00                          phone ok.

00000805 <__c.43>:
     805:	6e 6f 74 20 70 68 6f 6e 65 00                       not phone.

0000080f <__c.42>:
     80f:	73 65 74 3a 00                                      set:.

00000814 <__c.41>:
     814:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

00000822 <__c.40>:
     822:	6f 6b 00                                            ok.

00000825 <__c.39>:
     825:	65 72 72 6f 72 00                                   error.

0000082b <__c.38>:
     82b:	67 65 74 3a 00                                      get:.

00000830 <__c.37>:
     830:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

0000083e <__c.36>:
     83e:	73 65 6e 64 5f 73 6d 73 0d 0a 00                    send_sms...

00000849 <__c.35>:
     849:	65 72 72 6f 72 00                                   error.

0000084f <__c.34>:
     84f:	72 65 73 75 6c 74 69 6e 67 20 53 4d 53 20 74 65     resulting SMS te
     85f:	78 74 20 69 73 20 74 6f 6f 20 6c 6f 6e 67 00        xt is too long.

0000086e <__c.33>:
     86e:	72 65 73 65 74 64 65 66 61 75 6c 74 3b 00           resetdefault;.

0000087c <__c.32>:
     87c:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

0000088a <__c.31>:
     88a:	44 65 76 69 63 65 20 72 65 73 65 74 20 64 65 66     Device reset def
     89a:	61 75 6c 74 2c 20 73 65 6e 64 20 61 64 6d 69 6e     ault, send admin
     8aa:	70 68 6f 6e 65 73 3d 4e 55 4d 42 45 52 5f 50 48     phones=NUMBER_PH
     8ba:	4f 4e 45 53 00                                      ONES.

000008bf <__c.30>:
     8bf:	72 65 62 6f 6f 74 3b 00                             reboot;.

000008c7 <__c.29>:
     8c7:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

000008d5 <__c.28>:
     8d5:	52 65 73 65 74 20 63 6f 6d 6d 61 6e 64 20 61 63     Reset command ac
     8e5:	63 65 70 74 65 64 2e 00                             cepted..

000008ed <__c.27>:
     8ed:	68 65 6c 70 3b 00                                   help;.

000008f3 <__c.26>:
     8f3:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

00000901 <__c.25>:
     901:	68 65 6c 70 67 65 74 3b 00                          helpget;.

0000090a <__c.24>:
     90a:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

00000918 <__c.23>:
     918:	68 65 6c 70 73 65 74 3b 00                          helpset;.

00000921 <__c.22>:
     921:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

0000092f <__c.21>:
     92f:	72 65 70 6f 72 74 3b 00                             report;.

00000937 <__c.20>:
     937:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

00000945 <__c.19>:
     945:	61 64 6d 69 6e 70 68 6f 6e 65 73 3d 00              adminphones=.

00000952 <__c.18>:
     952:	6f 6b 00                                            ok.

00000955 <__c.17>:
     955:	73 65 74 20 61 64 6d 69 6e 20 6f 6b 00              set admin ok.

00000962 <__c.16>:
     962:	41 63 63 65 73 73 20 64 65 6e 69 65 64 00           Access denied.

00000970 <__c.15>:
     970:	61 64 6d 69 6e 70 68 6f 6e 65 73 3b 00              adminphones;.

0000097d <__c.14>:
     97d:	61 64 6d 69 6e 70 68 6f 6e 65 73 3d 00              adminphones=.

0000098a <__c.13>:
     98a:	25 73 2c 00                                         %s,.

0000098e <__c.12>:
     98e:	3b 00                                               ;.

00000990 <__c.11>:
     990:	61 63 63 65 70 74 5f 63 61 6c 6c 73 3b 00           accept_calls;.

0000099e <__c.10>:
     99e:	61 63 63 65 70 74 5f 63 61 6c 6c 73 3d 25 64 3b     accept_calls=%d;
	...

000009af <__c.9>:
     9af:	61 63 63 65 70 74 5f 73 6d 73 3b 00                 accept_sms;.

000009bb <__c.8>:
     9bb:	61 63 63 65 70 74 5f 73 6d 73 3d 25 64 3b 00        accept_sms=%d;.

000009ca <__c.7>:
     9ca:	70 61 75 73 65 5f 72 65 6c 61 79 3b 00              pause_relay;.

000009d7 <__c.6>:
     9d7:	70 61 75 73 65 5f 72 65 6c 61 79 3d 25 75 3b 00     pause_relay=%u;.

000009e7 <__c.5>:
     9e7:	61 63 63 65 70 74 5f 63 61 6c 6c 73 3d 00           accept_calls=.

000009f5 <__c.4>:
     9f5:	61 63 63 65 70 74 5f 73 6d 73 3d 00                 accept_sms=.

00000a01 <__c.3>:
     a01:	72 65 70 6f 72 74 5f 74 3d 00                       report_t=.

00000a0b <__c.2>:
     a0b:	63 68 61 70 65 6b 61 3d 00                          chapeka=.

00000a14 <__c.1>:
     a14:	75 74 6b 69 6e 61 3d 00                             utkina=.

00000a1c <__c.0>:
     a1c:	70 61 75 73 65 5f 72 65 6c 61 79 3d 00 00           pause_relay=..

00000a2a <__ctors_end>:
     a2a:	11 24       	eor	r1, r1
     a2c:	1f be       	out	0x3f, r1	; 63
     a2e:	cf ef       	ldi	r28, 0xFF	; 255
     a30:	d8 e0       	ldi	r29, 0x08	; 8
     a32:	de bf       	out	0x3e, r29	; 62
     a34:	cd bf       	out	0x3d, r28	; 61

00000a36 <__do_copy_data>:
     a36:	11 e0       	ldi	r17, 0x01	; 1
     a38:	a0 e0       	ldi	r26, 0x00	; 0
     a3a:	b1 e0       	ldi	r27, 0x01	; 1
     a3c:	e8 e6       	ldi	r30, 0x68	; 104
     a3e:	f1 e7       	ldi	r31, 0x71	; 113
     a40:	02 c0       	rjmp	.+4      	; 0xa46 <__do_copy_data+0x10>
     a42:	05 90       	lpm	r0, Z+
     a44:	0d 92       	st	X+, r0
     a46:	a8 3a       	cpi	r26, 0xA8	; 168
     a48:	b1 07       	cpc	r27, r17
     a4a:	d9 f7       	brne	.-10     	; 0xa42 <__do_copy_data+0xc>

00000a4c <__do_clear_bss>:
     a4c:	24 e0       	ldi	r18, 0x04	; 4
     a4e:	a8 ea       	ldi	r26, 0xA8	; 168
     a50:	b1 e0       	ldi	r27, 0x01	; 1
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <.do_clear_bss_start>

00000a54 <.do_clear_bss_loop>:
     a54:	1d 92       	st	X+, r1

00000a56 <.do_clear_bss_start>:
     a56:	ae 35       	cpi	r26, 0x5E	; 94
     a58:	b2 07       	cpc	r27, r18
     a5a:	e1 f7       	brne	.-8      	; 0xa54 <.do_clear_bss_loop>
     a5c:	0e 94 d2 22 	call	0x45a4	; 0x45a4 <main>
     a60:	0c 94 9a 38 	jmp	0x7134	; 0x7134 <_exit>

00000a64 <__bad_interrupt>:
     a64:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a68 <on_off_relay>:
//****************************************************************************************************


//****************************************************************************************************
void on_off_relay()
{
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	2a 97       	sbiw	r28, 0x0a	; 10
     a72:	0f b6       	in	r0, 0x3f	; 63
     a74:	f8 94       	cli
     a76:	de bf       	out	0x3e, r29	; 62
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	cd bf       	out	0x3d, r28	; 61
    static uint8_t last_state_input = IS_VOLT_ALL;
    static uint8_t temp_state_input = 0;
    static uint8_t last_gsm_cmd = 0;
    static uint32_t time_stamp_s = 0;
    uint8_t state = get_flag_input_voltage();
     a7c:	0e 94 a4 24 	call	0x4948	; 0x4948 <get_flag_input_voltage>
     a80:	89 83       	std	Y+1, r24	; 0x01
    uint8_t gsm_cmd = get_mode_gsm();
     a82:	0e 94 2a 11 	call	0x2254	; 0x2254 <get_mode_gsm>
     a86:	8a 83       	std	Y+2, r24	; 0x02

    if(state != temp_state_input)
     a88:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <temp_state_input.62>
     a8c:	99 81       	ldd	r25, Y+1	; 0x01
     a8e:	98 17       	cp	r25, r24
     a90:	01 f1       	breq	.+64     	; 0xad2 <on_off_relay+0x6a>
    {
        time_stamp_s = get_time_s() + get_pause_relay();// sensitivity
     a92:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
     a96:	6b 83       	std	Y+3, r22	; 0x03
     a98:	7c 83       	std	Y+4, r23	; 0x04
     a9a:	8d 83       	std	Y+5, r24	; 0x05
     a9c:	9e 83       	std	Y+6, r25	; 0x06
     a9e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <get_pause_relay>
     aa2:	88 2f       	mov	r24, r24
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	a0 e0       	ldi	r26, 0x00	; 0
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	2b 81       	ldd	r18, Y+3	; 0x03
     aac:	3c 81       	ldd	r19, Y+4	; 0x04
     aae:	4d 81       	ldd	r20, Y+5	; 0x05
     ab0:	5e 81       	ldd	r21, Y+6	; 0x06
     ab2:	82 0f       	add	r24, r18
     ab4:	93 1f       	adc	r25, r19
     ab6:	a4 1f       	adc	r26, r20
     ab8:	b5 1f       	adc	r27, r21
     aba:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <time_stamp_s.61>
     abe:	90 93 ae 01 	sts	0x01AE, r25	; 0x8001ae <time_stamp_s.61+0x1>
     ac2:	a0 93 af 01 	sts	0x01AF, r26	; 0x8001af <time_stamp_s.61+0x2>
     ac6:	b0 93 b0 01 	sts	0x01B0, r27	; 0x8001b0 <time_stamp_s.61+0x3>
        temp_state_input = state;
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <temp_state_input.62>
        //softuart_puts_p(PSTR("change"));
        return;
     ad0:	1d c1       	rjmp	.+570    	; 0xd0c <on_off_relay+0x2a4>
    }
    else if((get_time_s() < time_stamp_s))
     ad2:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
     ad6:	6f 83       	std	Y+7, r22	; 0x07
     ad8:	78 87       	std	Y+8, r23	; 0x08
     ada:	89 87       	std	Y+9, r24	; 0x09
     adc:	9a 87       	std	Y+10, r25	; 0x0a
     ade:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <time_stamp_s.61>
     ae2:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <time_stamp_s.61+0x1>
     ae6:	a0 91 af 01 	lds	r26, 0x01AF	; 0x8001af <time_stamp_s.61+0x2>
     aea:	b0 91 b0 01 	lds	r27, 0x01B0	; 0x8001b0 <time_stamp_s.61+0x3>
     aee:	2f 81       	ldd	r18, Y+7	; 0x07
     af0:	38 85       	ldd	r19, Y+8	; 0x08
     af2:	49 85       	ldd	r20, Y+9	; 0x09
     af4:	5a 85       	ldd	r21, Y+10	; 0x0a
     af6:	28 17       	cp	r18, r24
     af8:	39 07       	cpc	r19, r25
     afa:	4a 07       	cpc	r20, r26
     afc:	5b 07       	cpc	r21, r27
     afe:	08 f4       	brcc	.+2      	; 0xb02 <on_off_relay+0x9a>
     b00:	02 c1       	rjmp	.+516    	; 0xd06 <on_off_relay+0x29e>
    {
        return;
    }
    else if(last_gsm_cmd == gsm_cmd && state == last_state_input)
     b02:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <last_gsm_cmd.60>
     b06:	9a 81       	ldd	r25, Y+2	; 0x02
     b08:	98 17       	cp	r25, r24
     b0a:	31 f4       	brne	.+12     	; 0xb18 <on_off_relay+0xb0>
     b0c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <last_state_input.59>
     b10:	99 81       	ldd	r25, Y+1	; 0x01
     b12:	98 17       	cp	r25, r24
     b14:	09 f4       	brne	.+2      	; 0xb18 <on_off_relay+0xb0>
     b16:	f9 c0       	rjmp	.+498    	; 0xd0a <on_off_relay+0x2a2>
        return;

    if(gsm_cmd == GSM_ON_CHAPEKA)
     b18:	8a 81       	ldd	r24, Y+2	; 0x02
     b1a:	82 30       	cpi	r24, 0x02	; 2
     b1c:	09 f0       	breq	.+2      	; 0xb20 <on_off_relay+0xb8>
     b1e:	7b c0       	rjmp	.+246    	; 0xc16 <on_off_relay+0x1ae>
    {
        last_gsm_cmd = gsm_cmd;
     b20:	8a 81       	ldd	r24, Y+2	; 0x02
     b22:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <last_gsm_cmd.60>
        if(state == IS_VOLT_ALL)
     b26:	89 81       	ldd	r24, Y+1	; 0x01
     b28:	83 30       	cpi	r24, 0x03	; 3
     b2a:	d1 f4       	brne	.+52     	; 0xb60 <on_off_relay+0xf8>
        {
//            DigitalWrite(RELAY_UTKINA, HIGH);
//            delay_ms(300);
            DigitalWrite(RELAY_CHAPEKA, HIGH);
     b2c:	8b e2       	ldi	r24, 0x2B	; 43
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	fc 01       	movw	r30, r24
     b32:	20 81       	ld	r18, Z
     b34:	8b e2       	ldi	r24, 0x2B	; 43
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	20 62       	ori	r18, 0x20	; 32
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 83       	st	Z, r18
 //           delay_ms(300);
            last_state_input = IS_VOLT_ALL;
     b3e:	83 e0       	ldi	r24, 0x03	; 3
     b40:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <last_state_input.59>
            softuart_puts_p(PSTR("ENERGY +++\r\n"));
     b44:	88 e6       	ldi	r24, 0x68	; 104
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            if(get_accept_sms() == 1)
     b4c:	0e 94 07 11 	call	0x220e	; 0x220e <get_accept_sms>
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	09 f0       	breq	.+2      	; 0xb56 <on_off_relay+0xee>
     b54:	db c0       	rjmp	.+438    	; 0xd0c <on_off_relay+0x2a4>
                send_sms_admins(PSTR("ENERGY +++"));
     b56:	85 e7       	ldi	r24, 0x75	; 117
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 9f 19 	call	0x333e	; 0x333e <send_sms_admins>
     b5e:	d6 c0       	rjmp	.+428    	; 0xd0c <on_off_relay+0x2a4>
        }
        else if(state == IS_VOLT_UTKINA)
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	d1 f4       	brne	.+52     	; 0xb9a <on_off_relay+0x132>
        {
            DigitalWrite(RELAY_CHAPEKA, LOW);
     b66:	8b e2       	ldi	r24, 0x2B	; 43
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 81       	ld	r18, Z
     b6e:	8b e2       	ldi	r24, 0x2B	; 43
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	2f 7d       	andi	r18, 0xDF	; 223
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
//            delay_ms(300);
//            DigitalWrite(RELAY_UTKINA, LOW);
//            delay_ms(300);
            last_state_input = IS_VOLT_UTKINA;
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <last_state_input.59>
            softuart_puts_p(PSTR("ENERGY FROM UTKINA\r\n"));
     b7e:	80 e8       	ldi	r24, 0x80	; 128
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            if(get_accept_sms() == 1)
     b86:	0e 94 07 11 	call	0x220e	; 0x220e <get_accept_sms>
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	09 f0       	breq	.+2      	; 0xb90 <on_off_relay+0x128>
     b8e:	be c0       	rjmp	.+380    	; 0xd0c <on_off_relay+0x2a4>
                send_sms_admins(PSTR("ENERGY FROM UTKINA"));
     b90:	85 e9       	ldi	r24, 0x95	; 149
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 9f 19 	call	0x333e	; 0x333e <send_sms_admins>
     b98:	b9 c0       	rjmp	.+370    	; 0xd0c <on_off_relay+0x2a4>
        }
        else if(state == IS_VOLT_CHAPEKA)
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	82 30       	cpi	r24, 0x02	; 2
     b9e:	d1 f4       	brne	.+52     	; 0xbd4 <on_off_relay+0x16c>
        {
//            DigitalWrite(RELAY_UTKINA, HIGH);
//            delay_ms(300);
            DigitalWrite(RELAY_CHAPEKA, HIGH);
     ba0:	8b e2       	ldi	r24, 0x2B	; 43
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	fc 01       	movw	r30, r24
     ba6:	20 81       	ld	r18, Z
     ba8:	8b e2       	ldi	r24, 0x2B	; 43
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	20 62       	ori	r18, 0x20	; 32
     bae:	fc 01       	movw	r30, r24
     bb0:	20 83       	st	Z, r18
//            delay_ms(300);
            last_state_input = IS_VOLT_CHAPEKA;
     bb2:	82 e0       	ldi	r24, 0x02	; 2
     bb4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <last_state_input.59>
            softuart_puts_p(PSTR("ENERGY FROM CHAPEKA\r\n"));
     bb8:	88 ea       	ldi	r24, 0xA8	; 168
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            if(get_accept_sms() == 1)
     bc0:	0e 94 07 11 	call	0x220e	; 0x220e <get_accept_sms>
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	09 f0       	breq	.+2      	; 0xbca <on_off_relay+0x162>
     bc8:	a1 c0       	rjmp	.+322    	; 0xd0c <on_off_relay+0x2a4>
                send_sms_admins(PSTR("ENERGY FROM CHAPEKA"));
     bca:	8e eb       	ldi	r24, 0xBE	; 190
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 9f 19 	call	0x333e	; 0x333e <send_sms_admins>
     bd2:	9c c0       	rjmp	.+312    	; 0xd0c <on_off_relay+0x2a4>
        }
        else if(state == NOT_VOLT)
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	88 23       	and	r24, r24
     bd8:	09 f0       	breq	.+2      	; 0xbdc <on_off_relay+0x174>
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <on_off_relay+0x2a4>
        {
            softuart_puts_p(PSTR("NOT_ENERGY\r\n"));
     bdc:	82 ed       	ldi	r24, 0xD2	; 210
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            set_mode_gsm(GSM_ON_UTKINA);
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	0e 94 16 11 	call	0x222c	; 0x222c <set_mode_gsm>
            EEPROM_update();
     bea:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
            DigitalWrite(RELAY_CHAPEKA, LOW);
     bee:	8b e2       	ldi	r24, 0x2B	; 43
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 81       	ld	r18, Z
     bf6:	8b e2       	ldi	r24, 0x2B	; 43
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	2f 7d       	andi	r18, 0xDF	; 223
     bfc:	fc 01       	movw	r30, r24
     bfe:	20 83       	st	Z, r18
//            delay_ms(300);
//            DigitalWrite(RELAY_UTKINA, LOW);
//            delay_ms(300);
            if(get_accept_calls() == 1)
     c00:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <get_accept_calls>
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	21 f4       	brne	.+8      	; 0xc10 <on_off_relay+0x1a8>
                alarm_play_file(ALL_NOT);
     c08:	8c e0       	ldi	r24, 0x0C	; 12
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <alarm_play_file>
            last_state_input = NOT_VOLT;
     c10:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <last_state_input.59>
            return;
     c14:	7b c0       	rjmp	.+246    	; 0xd0c <on_off_relay+0x2a4>
        }
    }
    else if (gsm_cmd == GSM_ON_UTKINA)
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	81 30       	cpi	r24, 0x01	; 1
     c1a:	09 f0       	breq	.+2      	; 0xc1e <on_off_relay+0x1b6>
     c1c:	77 c0       	rjmp	.+238    	; 0xd0c <on_off_relay+0x2a4>
    {
        last_gsm_cmd = gsm_cmd;
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <last_gsm_cmd.60>
        if (state == IS_VOLT_ALL)
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	83 30       	cpi	r24, 0x03	; 3
     c28:	d1 f4       	brne	.+52     	; 0xc5e <on_off_relay+0x1f6>
        {
            DigitalWrite(RELAY_CHAPEKA, LOW);
     c2a:	8b e2       	ldi	r24, 0x2B	; 43
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	fc 01       	movw	r30, r24
     c30:	20 81       	ld	r18, Z
     c32:	8b e2       	ldi	r24, 0x2B	; 43
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	2f 7d       	andi	r18, 0xDF	; 223
     c38:	fc 01       	movw	r30, r24
     c3a:	20 83       	st	Z, r18
//            delay_ms(300);
//            DigitalWrite(RELAY_UTKINA, LOW);
//            delay_ms(300);
            last_state_input = IS_VOLT_ALL;
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <last_state_input.59>
            softuart_puts_p(PSTR("ENERGY +++\r\n"));
     c42:	8f ed       	ldi	r24, 0xDF	; 223
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            if(get_accept_sms() == 1)
     c4a:	0e 94 07 11 	call	0x220e	; 0x220e <get_accept_sms>
     c4e:	81 30       	cpi	r24, 0x01	; 1
     c50:	09 f0       	breq	.+2      	; 0xc54 <on_off_relay+0x1ec>
     c52:	5c c0       	rjmp	.+184    	; 0xd0c <on_off_relay+0x2a4>
                send_sms_admins(PSTR("ENERGY +++"));
     c54:	8c ee       	ldi	r24, 0xEC	; 236
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 9f 19 	call	0x333e	; 0x333e <send_sms_admins>
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <on_off_relay+0x2a4>
        }
        else if (state == IS_VOLT_CHAPEKA)
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	82 30       	cpi	r24, 0x02	; 2
     c62:	d1 f4       	brne	.+52     	; 0xc98 <on_off_relay+0x230>
        {
//            DigitalWrite(RELAY_UTKINA, HIGH);
//            delay_ms(300);
            DigitalWrite(RELAY_CHAPEKA, HIGH);
     c64:	8b e2       	ldi	r24, 0x2B	; 43
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	fc 01       	movw	r30, r24
     c6a:	20 81       	ld	r18, Z
     c6c:	8b e2       	ldi	r24, 0x2B	; 43
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	20 62       	ori	r18, 0x20	; 32
     c72:	fc 01       	movw	r30, r24
     c74:	20 83       	st	Z, r18
//            delay_ms(300);
            last_state_input = IS_VOLT_CHAPEKA;
     c76:	82 e0       	ldi	r24, 0x02	; 2
     c78:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <last_state_input.59>
            softuart_puts_p(PSTR("ENERGY FROM CHAPEKA\r\n"));
     c7c:	87 ef       	ldi	r24, 0xF7	; 247
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            if(get_accept_sms() == 1)
     c84:	0e 94 07 11 	call	0x220e	; 0x220e <get_accept_sms>
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	09 f0       	breq	.+2      	; 0xc8e <on_off_relay+0x226>
     c8c:	3f c0       	rjmp	.+126    	; 0xd0c <on_off_relay+0x2a4>
                send_sms_admins(PSTR("ENERGY FROM CHAPEKA"));
     c8e:	8d e0       	ldi	r24, 0x0D	; 13
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	0e 94 9f 19 	call	0x333e	; 0x333e <send_sms_admins>
     c96:	3a c0       	rjmp	.+116    	; 0xd0c <on_off_relay+0x2a4>
        }
        else if (state == IS_VOLT_UTKINA)
     c98:	89 81       	ldd	r24, Y+1	; 0x01
     c9a:	81 30       	cpi	r24, 0x01	; 1
     c9c:	c9 f4       	brne	.+50     	; 0xcd0 <on_off_relay+0x268>
        {
            DigitalWrite(RELAY_CHAPEKA, LOW);
     c9e:	8b e2       	ldi	r24, 0x2B	; 43
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	fc 01       	movw	r30, r24
     ca4:	20 81       	ld	r18, Z
     ca6:	8b e2       	ldi	r24, 0x2B	; 43
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	2f 7d       	andi	r18, 0xDF	; 223
     cac:	fc 01       	movw	r30, r24
     cae:	20 83       	st	Z, r18
//            delay_ms(300);
//            DigitalWrite(RELAY_UTKINA, LOW);
//            delay_ms(300);
            last_state_input = IS_VOLT_UTKINA;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <last_state_input.59>
            softuart_puts_p(PSTR("ENERGY FROM UTKINA\r\n"));
     cb6:	81 e2       	ldi	r24, 0x21	; 33
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            if(get_accept_sms() == 1)
     cbe:	0e 94 07 11 	call	0x220e	; 0x220e <get_accept_sms>
     cc2:	81 30       	cpi	r24, 0x01	; 1
     cc4:	19 f5       	brne	.+70     	; 0xd0c <on_off_relay+0x2a4>
                send_sms_admins(PSTR("ENERGY FROM UTKINA"));
     cc6:	86 e3       	ldi	r24, 0x36	; 54
     cc8:	91 e0       	ldi	r25, 0x01	; 1
     cca:	0e 94 9f 19 	call	0x333e	; 0x333e <send_sms_admins>
     cce:	1e c0       	rjmp	.+60     	; 0xd0c <on_off_relay+0x2a4>
        }
        else if(state == NOT_VOLT)
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	88 23       	and	r24, r24
     cd4:	d9 f4       	brne	.+54     	; 0xd0c <on_off_relay+0x2a4>
        {
            softuart_puts_p(PSTR("NOT_ENERGY\r\n"));
     cd6:	89 e4       	ldi	r24, 0x49	; 73
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            DigitalWrite(RELAY_CHAPEKA, LOW);
     cde:	8b e2       	ldi	r24, 0x2B	; 43
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	fc 01       	movw	r30, r24
     ce4:	20 81       	ld	r18, Z
     ce6:	8b e2       	ldi	r24, 0x2B	; 43
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	2f 7d       	andi	r18, 0xDF	; 223
     cec:	fc 01       	movw	r30, r24
     cee:	20 83       	st	Z, r18
//            delay_ms(300);
//            DigitalWrite(RELAY_UTKINA, LOW);
//            delay_ms(300);
            if(get_accept_calls() == 1)
     cf0:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <get_accept_calls>
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	21 f4       	brne	.+8      	; 0xd00 <on_off_relay+0x298>
                alarm_play_file(ALL_NOT);
     cf8:	8c e0       	ldi	r24, 0x0C	; 12
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <alarm_play_file>
            last_state_input = NOT_VOLT;
     d00:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <last_state_input.59>
            return;
     d04:	03 c0       	rjmp	.+6      	; 0xd0c <on_off_relay+0x2a4>
        return;
     d06:	00 00       	nop
     d08:	01 c0       	rjmp	.+2      	; 0xd0c <on_off_relay+0x2a4>
        return;
     d0a:	00 00       	nop
//        DigitalWrite(RELAY_CHAPEKA, LOW);
//        delay_s(20);
//        softuart_puts_p(PSTR("GSM_REBOOT_LAN\r\n"));
//    }

}
     d0c:	2a 96       	adiw	r28, 0x0a	; 10
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	08 95       	ret

00000d1e <is_external_pwr>:
//******************************************************************************************************************
static char is_external_pwr(void)
{
     d1e:	cf 93       	push	r28
     d20:	df 93       	push	r29
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
    uint8_t temp = get_flag_input_voltage();
     d28:	0e 94 a4 24 	call	0x4948	; 0x4948 <get_flag_input_voltage>
     d2c:	89 83       	std	Y+1, r24	; 0x01
    if(temp != NOT_VOLT)
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	88 23       	and	r24, r24
     d32:	11 f0       	breq	.+4      	; 0xd38 <is_external_pwr+0x1a>
        return 1;
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <is_external_pwr+0x1c>
    else
        return 0;
     d38:	80 e0       	ldi	r24, 0x00	; 0
}
     d3a:	0f 90       	pop	r0
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <check_power>:

//*******************************************************************************************************************

void check_power(void)
{
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
    if(is_external_pwr())
     d4a:	0e 94 8f 06 	call	0xd1e	; 0xd1e <is_external_pwr>
     d4e:	88 23       	and	r24, r24
     d50:	49 f0       	breq	.+18     	; 0xd64 <check_power+0x22>
        time_without_power_s = 0;
     d52:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <time_without_power_s>
     d56:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <time_without_power_s+0x1>
     d5a:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <time_without_power_s+0x2>
     d5e:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <time_without_power_s+0x3>
    else
        time_without_power_s++;
}
     d62:	13 c0       	rjmp	.+38     	; 0xd8a <check_power+0x48>
        time_without_power_s++;
     d64:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <time_without_power_s>
     d68:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <time_without_power_s+0x1>
     d6c:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <time_without_power_s+0x2>
     d70:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <time_without_power_s+0x3>
     d74:	01 96       	adiw	r24, 0x01	; 1
     d76:	a1 1d       	adc	r26, r1
     d78:	b1 1d       	adc	r27, r1
     d7a:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <time_without_power_s>
     d7e:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <time_without_power_s+0x1>
     d82:	a0 93 aa 01 	sts	0x01AA, r26	; 0x8001aa <time_without_power_s+0x2>
     d86:	b0 93 ab 01 	sts	0x01AB, r27	; 0x8001ab <time_without_power_s+0x3>
}
     d8a:	00 00       	nop
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <power_control>:
//*******************************************************************************************************************
void power_control(void)
{
     d92:	cf 92       	push	r12
     d94:	df 92       	push	r13
     d96:	ef 92       	push	r14
     d98:	ff 92       	push	r15
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	cd b7       	in	r28, 0x3d	; 61
     da0:	de b7       	in	r29, 0x3e	; 62
     da2:	a5 97       	sbiw	r28, 0x25	; 37
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
    static uint8_t report_bat = 0;
    static uint8_t flag_time_on = 1;
    static uint8_t flag_time_off = 1;
    static uint8_t flag = 0;

    if(time_without_power_s == 0)   // power+++
     dae:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <time_without_power_s>
     db2:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <time_without_power_s+0x1>
     db6:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <time_without_power_s+0x2>
     dba:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <time_without_power_s+0x3>
     dbe:	89 2b       	or	r24, r25
     dc0:	8a 2b       	or	r24, r26
     dc2:	8b 2b       	or	r24, r27
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <power_control+0x36>
     dc6:	7a c0       	rjmp	.+244    	; 0xebc <power_control+0x12a>
    {
        if(get_interval_power_on_report() != 0)
     dc8:	0e 94 ad 10 	call	0x215a	; 0x215a <get_interval_power_on_report>
     dcc:	88 23       	and	r24, r24
     dce:	09 f4       	brne	.+2      	; 0xdd2 <power_control+0x40>
     dd0:	56 c1       	rjmp	.+684    	; 0x107e <power_control+0x2ec>
        {
            if(flag == 0)
     dd2:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <flag.44>
     dd6:	88 23       	and	r24, r24
     dd8:	39 f4       	brne	.+14     	; 0xde8 <power_control+0x56>
            {
                flag = 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <flag.44>
                softuart_puts_p(PSTR("power +++."));
     de0:	86 e5       	ldi	r24, 0x56	; 86
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            }
            if(flag_time_on == 0)
     de8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_time_on.42>
     dec:	88 23       	and	r24, r24
     dee:	c1 f4       	brne	.+48     	; 0xe20 <power_control+0x8e>
            {
                time_stamp_on = get_time_s();
     df0:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
     df4:	6e 83       	std	Y+6, r22	; 0x06
     df6:	7f 83       	std	Y+7, r23	; 0x07
     df8:	88 87       	std	Y+8, r24	; 0x08
     dfa:	99 87       	std	Y+9, r25	; 0x09
     dfc:	2e 81       	ldd	r18, Y+6	; 0x06
     dfe:	3f 81       	ldd	r19, Y+7	; 0x07
     e00:	48 85       	ldd	r20, Y+8	; 0x08
     e02:	59 85       	ldd	r21, Y+9	; 0x09
     e04:	20 93 b3 01 	sts	0x01B3, r18	; 0x8001b3 <time_stamp_on.41>
     e08:	30 93 b4 01 	sts	0x01B4, r19	; 0x8001b4 <time_stamp_on.41+0x1>
     e0c:	40 93 b5 01 	sts	0x01B5, r20	; 0x8001b5 <time_stamp_on.41+0x2>
     e10:	50 93 b6 01 	sts	0x01B6, r21	; 0x8001b6 <time_stamp_on.41+0x3>
                flag_time_on = 1;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <flag_time_on.42>
                report_on = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <report_on.40>
            }
            if(report_on == 1)
     e20:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <report_on.40>
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	09 f0       	breq	.+2      	; 0xe2a <power_control+0x98>
     e28:	2a c1       	rjmp	.+596    	; 0x107e <power_control+0x2ec>
            {
                if(flag_time_on == 1 && (time_stamp_on + (uint32_t)60*get_interval_power_on_report()) < get_time_s())
     e2a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <flag_time_on.42>
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	09 f0       	breq	.+2      	; 0xe34 <power_control+0xa2>
     e32:	25 c1       	rjmp	.+586    	; 0x107e <power_control+0x2ec>
     e34:	0e 94 ad 10 	call	0x215a	; 0x215a <get_interval_power_on_report>
     e38:	48 2f       	mov	r20, r24
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	8c e3       	ldi	r24, 0x3C	; 60
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	dc 01       	movw	r26, r24
     e46:	9a 01       	movw	r18, r20
     e48:	ab 01       	movw	r20, r22
     e4a:	0e 94 be 31 	call	0x637c	; 0x637c <__muluhisi3>
     e4e:	6a 87       	std	Y+10, r22	; 0x0a
     e50:	7b 87       	std	Y+11, r23	; 0x0b
     e52:	8c 87       	std	Y+12, r24	; 0x0c
     e54:	9d 87       	std	Y+13, r25	; 0x0d
     e56:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <time_stamp_on.41>
     e5a:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <time_stamp_on.41+0x1>
     e5e:	a0 91 b5 01 	lds	r26, 0x01B5	; 0x8001b5 <time_stamp_on.41+0x2>
     e62:	b0 91 b6 01 	lds	r27, 0x01B6	; 0x8001b6 <time_stamp_on.41+0x3>
     e66:	ca 84       	ldd	r12, Y+10	; 0x0a
     e68:	db 84       	ldd	r13, Y+11	; 0x0b
     e6a:	ec 84       	ldd	r14, Y+12	; 0x0c
     e6c:	fd 84       	ldd	r15, Y+13	; 0x0d
     e6e:	c8 0e       	add	r12, r24
     e70:	d9 1e       	adc	r13, r25
     e72:	ea 1e       	adc	r14, r26
     e74:	fb 1e       	adc	r15, r27
     e76:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
     e7a:	6e 87       	std	Y+14, r22	; 0x0e
     e7c:	7f 87       	std	Y+15, r23	; 0x0f
     e7e:	88 8b       	std	Y+16, r24	; 0x10
     e80:	99 8b       	std	Y+17, r25	; 0x11
     e82:	8e 85       	ldd	r24, Y+14	; 0x0e
     e84:	9f 85       	ldd	r25, Y+15	; 0x0f
     e86:	a8 89       	ldd	r26, Y+16	; 0x10
     e88:	b9 89       	ldd	r27, Y+17	; 0x11
     e8a:	c8 16       	cp	r12, r24
     e8c:	d9 06       	cpc	r13, r25
     e8e:	ea 06       	cpc	r14, r26
     e90:	fb 06       	cpc	r15, r27
     e92:	08 f0       	brcs	.+2      	; 0xe96 <power_control+0x104>
     e94:	f4 c0       	rjmp	.+488    	; 0x107e <power_control+0x2ec>
                {
                    report_on = 0;
     e96:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <report_on.40>
                    flag_time_off = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <flag_time_off.39>
                    softuart_puts_p(PSTR("External power is on."));
     ea0:	81 e6       	ldi	r24, 0x61	; 97
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
                    if(get_accept_sms() == 1)
     ea8:	0e 94 07 11 	call	0x220e	; 0x220e <get_accept_sms>
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	09 f0       	breq	.+2      	; 0xeb2 <power_control+0x120>
     eb0:	e6 c0       	rjmp	.+460    	; 0x107e <power_control+0x2ec>
                        send_sms_admins(PSTR("External power is on."));
     eb2:	87 e7       	ldi	r24, 0x77	; 119
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	0e 94 9f 19 	call	0x333e	; 0x333e <send_sms_admins>
                }
            }
        }
        return;
     eba:	e1 c0       	rjmp	.+450    	; 0x107e <power_control+0x2ec>
    }
    if(get_interval_power_off_report() != 0)  ///  power---
     ebc:	0e 94 8a 10 	call	0x2114	; 0x2114 <get_interval_power_off_report>
     ec0:	88 23       	and	r24, r24
     ec2:	09 f4       	brne	.+2      	; 0xec6 <power_control+0x134>
     ec4:	dd c0       	rjmp	.+442    	; 0x1080 <power_control+0x2ee>
    {
        time_stamp_off = get_val(time_without_power_s);
     ec6:	8f e5       	ldi	r24, 0x5F	; 95
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	dc 01       	movw	r26, r24
     ecc:	8c 91       	ld	r24, X
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	f8 94       	cli
     ed2:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <time_without_power_s>
     ed6:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <time_without_power_s+0x1>
     eda:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <time_without_power_s+0x2>
     ede:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <time_without_power_s+0x3>
     ee2:	8a 83       	std	Y+2, r24	; 0x02
     ee4:	9b 83       	std	Y+3, r25	; 0x03
     ee6:	ac 83       	std	Y+4, r26	; 0x04
     ee8:	bd 83       	std	Y+5, r27	; 0x05
     eea:	8f e5       	ldi	r24, 0x5F	; 95
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	29 81       	ldd	r18, Y+1	; 0x01
     ef0:	fc 01       	movw	r30, r24
     ef2:	20 83       	st	Z, r18
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	ac 81       	ldd	r26, Y+4	; 0x04
     efa:	bd 81       	ldd	r27, Y+5	; 0x05
     efc:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <time_stamp_off.36>
     f00:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <time_stamp_off.36+0x1>
     f04:	a0 93 ba 01 	sts	0x01BA, r26	; 0x8001ba <time_stamp_off.36+0x2>
     f08:	b0 93 bb 01 	sts	0x01BB, r27	; 0x8001bb <time_stamp_off.36+0x3>
        time_stamp_on = get_time_s();
     f0c:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
     f10:	6a 8b       	std	Y+18, r22	; 0x12
     f12:	7b 8b       	std	Y+19, r23	; 0x13
     f14:	8c 8b       	std	Y+20, r24	; 0x14
     f16:	9d 8b       	std	Y+21, r25	; 0x15
     f18:	2a 89       	ldd	r18, Y+18	; 0x12
     f1a:	3b 89       	ldd	r19, Y+19	; 0x13
     f1c:	4c 89       	ldd	r20, Y+20	; 0x14
     f1e:	5d 89       	ldd	r21, Y+21	; 0x15
     f20:	20 93 b3 01 	sts	0x01B3, r18	; 0x8001b3 <time_stamp_on.41>
     f24:	30 93 b4 01 	sts	0x01B4, r19	; 0x8001b4 <time_stamp_on.41+0x1>
     f28:	40 93 b5 01 	sts	0x01B5, r20	; 0x8001b5 <time_stamp_on.41+0x2>
     f2c:	50 93 b6 01 	sts	0x01B6, r21	; 0x8001b6 <time_stamp_on.41+0x3>
        if(flag == 1)
     f30:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <flag.44>
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	31 f4       	brne	.+12     	; 0xf44 <power_control+0x1b2>
        {
            flag = 0;
     f38:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <flag.44>
            softuart_puts_p(PSTR("power ---"));
     f3c:	8d e8       	ldi	r24, 0x8D	; 141
     f3e:	91 e0       	ldi	r25, 0x01	; 1
     f40:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
        }
        if(flag_time_off == 1 && time_stamp_off > (uint32_t)60*get_interval_power_off_report())
     f44:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <flag_time_off.39>
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	29 f5       	brne	.+74     	; 0xf96 <power_control+0x204>
     f4c:	0e 94 8a 10 	call	0x2114	; 0x2114 <get_interval_power_off_report>
     f50:	48 2f       	mov	r20, r24
     f52:	50 e0       	ldi	r21, 0x00	; 0
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	8c e3       	ldi	r24, 0x3C	; 60
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	dc 01       	movw	r26, r24
     f5e:	9a 01       	movw	r18, r20
     f60:	ab 01       	movw	r20, r22
     f62:	0e 94 be 31 	call	0x637c	; 0x637c <__muluhisi3>
     f66:	6e 8b       	std	Y+22, r22	; 0x16
     f68:	7f 8b       	std	Y+23, r23	; 0x17
     f6a:	88 8f       	std	Y+24, r24	; 0x18
     f6c:	99 8f       	std	Y+25, r25	; 0x19
     f6e:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <time_stamp_off.36>
     f72:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <time_stamp_off.36+0x1>
     f76:	a0 91 ba 01 	lds	r26, 0x01BA	; 0x8001ba <time_stamp_off.36+0x2>
     f7a:	b0 91 bb 01 	lds	r27, 0x01BB	; 0x8001bb <time_stamp_off.36+0x3>
     f7e:	2e 89       	ldd	r18, Y+22	; 0x16
     f80:	3f 89       	ldd	r19, Y+23	; 0x17
     f82:	48 8d       	ldd	r20, Y+24	; 0x18
     f84:	59 8d       	ldd	r21, Y+25	; 0x19
     f86:	28 17       	cp	r18, r24
     f88:	39 07       	cpc	r19, r25
     f8a:	4a 07       	cpc	r20, r26
     f8c:	5b 07       	cpc	r21, r27
     f8e:	18 f4       	brcc	.+6      	; 0xf96 <power_control+0x204>
        {
            report_off = 1;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <report_off.34>
        }
        if(report_off == 1)
     f96:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <report_off.34>
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	39 f5       	brne	.+78     	; 0xfec <power_control+0x25a>
        {
            report_off = 0;
     f9e:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <report_off.34>
            flag_time_on = 0;
     fa2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <flag_time_on.42>
            flag_time_off = 0;
     fa6:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <flag_time_off.39>
            report_bat = 1;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <report_bat.33>
            time_stamp_bat = get_time_s();
     fb0:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
     fb4:	6a 8f       	std	Y+26, r22	; 0x1a
     fb6:	7b 8f       	std	Y+27, r23	; 0x1b
     fb8:	8c 8f       	std	Y+28, r24	; 0x1c
     fba:	9d 8f       	std	Y+29, r25	; 0x1d
     fbc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fbe:	9b 8d       	ldd	r25, Y+27	; 0x1b
     fc0:	ac 8d       	ldd	r26, Y+28	; 0x1c
     fc2:	bd 8d       	ldd	r27, Y+29	; 0x1d
     fc4:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <time_stamp_bat.32>
     fc8:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <time_stamp_bat.32+0x1>
     fcc:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <time_stamp_bat.32+0x2>
     fd0:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <time_stamp_bat.32+0x3>
            softuart_puts_p(PSTR("External power is off."));
     fd4:	87 e9       	ldi	r24, 0x97	; 151
     fd6:	91 e0       	ldi	r25, 0x01	; 1
     fd8:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            if(get_accept_sms() == 1)
     fdc:	0e 94 07 11 	call	0x220e	; 0x220e <get_accept_sms>
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	21 f4       	brne	.+8      	; 0xfec <power_control+0x25a>
                send_sms_admins(PSTR("External power is off."));
     fe4:	8e ea       	ldi	r24, 0xAE	; 174
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	0e 94 9f 19 	call	0x333e	; 0x333e <send_sms_admins>
        }
        if(report_bat == 1 && (get_time_s() > (time_stamp_bat + 120)))
     fec:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <report_bat.33>
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <power_control+0x264>
     ff4:	45 c0       	rjmp	.+138    	; 0x1080 <power_control+0x2ee>
     ff6:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
     ffa:	6e 8f       	std	Y+30, r22	; 0x1e
     ffc:	7f 8f       	std	Y+31, r23	; 0x1f
     ffe:	88 a3       	std	Y+32, r24	; 0x20
    1000:	99 a3       	std	Y+33, r25	; 0x21
    1002:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <time_stamp_bat.32>
    1006:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <time_stamp_bat.32+0x1>
    100a:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <time_stamp_bat.32+0x2>
    100e:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <time_stamp_bat.32+0x3>
    1012:	88 58       	subi	r24, 0x88	; 136
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	af 4f       	sbci	r26, 0xFF	; 255
    1018:	bf 4f       	sbci	r27, 0xFF	; 255
    101a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    101c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    101e:	48 a1       	ldd	r20, Y+32	; 0x20
    1020:	59 a1       	ldd	r21, Y+33	; 0x21
    1022:	82 17       	cp	r24, r18
    1024:	93 07       	cpc	r25, r19
    1026:	a4 07       	cpc	r26, r20
    1028:	b5 07       	cpc	r27, r21
    102a:	50 f5       	brcc	.+84     	; 0x1080 <power_control+0x2ee>
        {
            softuart_puts_p(PSTR("check battery"));
    102c:	85 ec       	ldi	r24, 0xC5	; 197
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            time_stamp_bat = get_time_s();
    1034:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    1038:	6a a3       	std	Y+34, r22	; 0x22
    103a:	7b a3       	std	Y+35, r23	; 0x23
    103c:	8c a3       	std	Y+36, r24	; 0x24
    103e:	9d a3       	std	Y+37, r25	; 0x25
    1040:	8a a1       	ldd	r24, Y+34	; 0x22
    1042:	9b a1       	ldd	r25, Y+35	; 0x23
    1044:	ac a1       	ldd	r26, Y+36	; 0x24
    1046:	bd a1       	ldd	r27, Y+37	; 0x25
    1048:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <time_stamp_bat.32>
    104c:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <time_stamp_bat.32+0x1>
    1050:	a0 93 c0 01 	sts	0x01C0, r26	; 0x8001c0 <time_stamp_bat.32+0x2>
    1054:	b0 93 c1 01 	sts	0x01C1, r27	; 0x8001c1 <time_stamp_bat.32+0x3>
//            char tt[5];
//            sprintf(tt, "bat=%d%%",level_battery());
//            softuart_puts_ln(tt);
            if(level_battery() < 25)
    1058:	0e 94 4d 08 	call	0x109a	; 0x109a <level_battery>
    105c:	89 31       	cpi	r24, 0x19	; 25
    105e:	80 f4       	brcc	.+32     	; 0x1080 <power_control+0x2ee>
            {
                report_bat = 0;
    1060:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <report_bat.33>
                if(get_accept_sms() == 1)
    1064:	0e 94 07 11 	call	0x220e	; 0x220e <get_accept_sms>
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	21 f4       	brne	.+8      	; 0x1074 <power_control+0x2e2>
                    send_sms_admins(PSTR("Battery LOW!!!"));
    106c:	83 ed       	ldi	r24, 0xD3	; 211
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	0e 94 9f 19 	call	0x333e	; 0x333e <send_sms_admins>
                softuart_puts_p(PSTR("low battery"));
    1074:	82 ee       	ldi	r24, 0xE2	; 226
    1076:	91 e0       	ldi	r25, 0x01	; 1
    1078:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
    107c:	01 c0       	rjmp	.+2      	; 0x1080 <power_control+0x2ee>
        return;
    107e:	00 00       	nop
            }
        }
    }
}
    1080:	a5 96       	adiw	r28, 0x25	; 37
    1082:	0f b6       	in	r0, 0x3f	; 63
    1084:	f8 94       	cli
    1086:	de bf       	out	0x3e, r29	; 62
    1088:	0f be       	out	0x3f, r0	; 63
    108a:	cd bf       	out	0x3d, r28	; 61
    108c:	df 91       	pop	r29
    108e:	cf 91       	pop	r28
    1090:	ff 90       	pop	r15
    1092:	ef 90       	pop	r14
    1094:	df 90       	pop	r13
    1096:	cf 90       	pop	r12
    1098:	08 95       	ret

0000109a <level_battery>:
///****************************************************************************
static uint8_t level_battery(void)
{
    109a:	0f 93       	push	r16
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	00 d0       	rcall	.+0      	; 0x10a2 <level_battery+0x8>
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
    int16_t bat = analog_read(BATTERY);
    10a6:	85 e0       	ldi	r24, 0x05	; 5
    10a8:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <analog_read>
    10ac:	9a 83       	std	Y+2, r25	; 0x02
    10ae:	89 83       	std	Y+1, r24	; 0x01
    if(bat < 609)
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	81 36       	cpi	r24, 0x61	; 97
    10b6:	92 40       	sbci	r25, 0x02	; 2
    10b8:	4c f4       	brge	.+18     	; 0x10cc <level_battery+0x32>
    {
        set_mode_gsm(GSM_ON_UTKINA);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	0e 94 16 11 	call	0x222c	; 0x222c <set_mode_gsm>
        EEPROM_update();
    10c0:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
        reset_mcu();
    10c4:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <reset_mcu>
        return 0;
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	13 c0       	rjmp	.+38     	; 0x10f2 <level_battery+0x58>
    }
    else if(bat > 699)
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	9a 81       	ldd	r25, Y+2	; 0x02
    10d0:	8c 3b       	cpi	r24, 0xBC	; 188
    10d2:	92 40       	sbci	r25, 0x02	; 2
    10d4:	24 f0       	brlt	.+8      	; 0x10de <level_battery+0x44>
        bat = 700;
    10d6:	8c eb       	ldi	r24, 0xBC	; 188
    10d8:	92 e0       	ldi	r25, 0x02	; 2
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	89 83       	std	Y+1, r24	; 0x01
    return map_s(bat, 610, 700, 0, 100);
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	04 e6       	ldi	r16, 0x64	; 100
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	4c eb       	ldi	r20, 0xBC	; 188
    10e8:	52 e0       	ldi	r21, 0x02	; 2
    10ea:	62 e6       	ldi	r22, 0x62	; 98
    10ec:	72 e0       	ldi	r23, 0x02	; 2
    10ee:	0e 94 81 17 	call	0x2f02	; 0x2f02 <map_s>
}
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	0f 91       	pop	r16
    10fc:	08 95       	ret

000010fe <charge_bat>:
//*****************************************************************************
void charge_bat(void)
{
    10fe:	cf 93       	push	r28
    1100:	df 93       	push	r29
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    while(analog_read(BATTERY) < 609)
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <charge_bat+0x14>
    {
        reset_soft_wdt();
    1108:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <reset_soft_wdt>
        delay_s(5);
    110c:	85 e0       	ldi	r24, 0x05	; 5
    110e:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <delay_s>
    while(analog_read(BATTERY) < 609)
    1112:	85 e0       	ldi	r24, 0x05	; 5
    1114:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <analog_read>
    1118:	81 36       	cpi	r24, 0x61	; 97
    111a:	92 40       	sbci	r25, 0x02	; 2
    111c:	ac f3       	brlt	.-22     	; 0x1108 <charge_bat+0xa>
    }
}
    111e:	00 00       	nop
    1120:	00 00       	nop
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	08 95       	ret

00001128 <get_time_without_power_s>:
//*****************************************************************************
uint32_t get_time_without_power_s(void)
{
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	00 d0       	rcall	.+0      	; 0x112e <get_time_without_power_s+0x6>
    112e:	00 d0       	rcall	.+0      	; 0x1130 <get_time_without_power_s+0x8>
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    return time_without_power_s;
    1134:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <time_without_power_s>
    1138:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <time_without_power_s+0x1>
    113c:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <time_without_power_s+0x2>
    1140:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <time_without_power_s+0x3>
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	9a 83       	std	Y+2, r25	; 0x02
    1148:	ab 83       	std	Y+3, r26	; 0x03
    114a:	bc 83       	std	Y+4, r27	; 0x04
}
    114c:	69 81       	ldd	r22, Y+1	; 0x01
    114e:	7a 81       	ldd	r23, Y+2	; 0x02
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	08 95       	ret

00001162 <send_sms_report>:
//*****************************************************************************
void send_sms_report(char *phone)
{
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	c1 5d       	subi	r28, 0xD1	; 209
    1170:	d1 09       	sbc	r29, r1
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	de bf       	out	0x3e, r29	; 62
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	cd bf       	out	0x3d, r28	; 61
    117c:	9e 01       	movw	r18, r28
    117e:	20 55       	subi	r18, 0x50	; 80
    1180:	3f 4f       	sbci	r19, 0xFF	; 255
    1182:	d9 01       	movw	r26, r18
    1184:	8d 93       	st	X+, r24
    1186:	9c 93       	st	X, r25
    uint32_t time;
    uint16_t d, h, m, s;
    char sms[160];
    char *ptr;

    time = get_time_from_start_s();
    1188:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <get_time_from_start_s>
    118c:	ce 53       	subi	r28, 0x3E	; 62
    118e:	df 4f       	sbci	r29, 0xFF	; 255
    1190:	68 83       	st	Y, r22
    1192:	79 83       	std	Y+1, r23	; 0x01
    1194:	8a 83       	std	Y+2, r24	; 0x02
    1196:	9b 83       	std	Y+3, r25	; 0x03
    1198:	c2 5c       	subi	r28, 0xC2	; 194
    119a:	d0 40       	sbci	r29, 0x00	; 0
    119c:	ce 53       	subi	r28, 0x3E	; 62
    119e:	df 4f       	sbci	r29, 0xFF	; 255
    11a0:	28 81       	ld	r18, Y
    11a2:	39 81       	ldd	r19, Y+1	; 0x01
    11a4:	4a 81       	ldd	r20, Y+2	; 0x02
    11a6:	5b 81       	ldd	r21, Y+3	; 0x03
    11a8:	c2 5c       	subi	r28, 0xC2	; 194
    11aa:	d0 40       	sbci	r29, 0x00	; 0
    11ac:	2b 83       	std	Y+3, r18	; 0x03
    11ae:	3c 83       	std	Y+4, r19	; 0x04
    11b0:	4d 83       	std	Y+5, r20	; 0x05
    11b2:	5e 83       	std	Y+6, r21	; 0x06
    d = time/(3600UL*24UL);
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	ad 81       	ldd	r26, Y+5	; 0x05
    11ba:	be 81       	ldd	r27, Y+6	; 0x06
    11bc:	ca 53       	subi	r28, 0x3A	; 58
    11be:	df 4f       	sbci	r29, 0xFF	; 255
    11c0:	88 83       	st	Y, r24
    11c2:	99 83       	std	Y+1, r25	; 0x01
    11c4:	aa 83       	std	Y+2, r26	; 0x02
    11c6:	bb 83       	std	Y+3, r27	; 0x03
    11c8:	c6 5c       	subi	r28, 0xC6	; 198
    11ca:	d0 40       	sbci	r29, 0x00	; 0
    11cc:	00 e8       	ldi	r16, 0x80	; 128
    11ce:	11 e5       	ldi	r17, 0x51	; 81
    11d0:	21 e0       	ldi	r18, 0x01	; 1
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	ca 53       	subi	r28, 0x3A	; 58
    11d6:	df 4f       	sbci	r29, 0xFF	; 255
    11d8:	68 81       	ld	r22, Y
    11da:	79 81       	ldd	r23, Y+1	; 0x01
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	9b 81       	ldd	r25, Y+3	; 0x03
    11e0:	c6 5c       	subi	r28, 0xC6	; 198
    11e2:	d0 40       	sbci	r29, 0x00	; 0
    11e4:	a9 01       	movw	r20, r18
    11e6:	98 01       	movw	r18, r16
    11e8:	0e 94 77 31 	call	0x62ee	; 0x62ee <__udivmodsi4>
    11ec:	da 01       	movw	r26, r20
    11ee:	c9 01       	movw	r24, r18
    11f0:	98 87       	std	Y+8, r25	; 0x08
    11f2:	8f 83       	std	Y+7, r24	; 0x07
    time -= d*(3600UL*24UL);
    11f4:	8f 81       	ldd	r24, Y+7	; 0x07
    11f6:	98 85       	ldd	r25, Y+8	; 0x08
    11f8:	cc 01       	movw	r24, r24
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	9c 01       	movw	r18, r24
    1200:	ad 01       	movw	r20, r26
    1202:	60 e8       	ldi	r22, 0x80	; 128
    1204:	71 e5       	ldi	r23, 0x51	; 81
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 53 31 	call	0x62a6	; 0x62a6 <__mulsi3>
    120e:	ce 54       	subi	r28, 0x4E	; 78
    1210:	df 4f       	sbci	r29, 0xFF	; 255
    1212:	68 83       	st	Y, r22
    1214:	79 83       	std	Y+1, r23	; 0x01
    1216:	8a 83       	std	Y+2, r24	; 0x02
    1218:	9b 83       	std	Y+3, r25	; 0x03
    121a:	c2 5b       	subi	r28, 0xB2	; 178
    121c:	d0 40       	sbci	r29, 0x00	; 0
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	ad 81       	ldd	r26, Y+5	; 0x05
    1224:	be 81       	ldd	r27, Y+6	; 0x06
    1226:	ce 54       	subi	r28, 0x4E	; 78
    1228:	df 4f       	sbci	r29, 0xFF	; 255
    122a:	28 81       	ld	r18, Y
    122c:	39 81       	ldd	r19, Y+1	; 0x01
    122e:	4a 81       	ldd	r20, Y+2	; 0x02
    1230:	5b 81       	ldd	r21, Y+3	; 0x03
    1232:	c2 5b       	subi	r28, 0xB2	; 178
    1234:	d0 40       	sbci	r29, 0x00	; 0
    1236:	82 1b       	sub	r24, r18
    1238:	93 0b       	sbc	r25, r19
    123a:	a4 0b       	sbc	r26, r20
    123c:	b5 0b       	sbc	r27, r21
    123e:	8b 83       	std	Y+3, r24	; 0x03
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	ad 83       	std	Y+5, r26	; 0x05
    1244:	be 83       	std	Y+6, r27	; 0x06
    h = time/3600UL;
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	ad 81       	ldd	r26, Y+5	; 0x05
    124c:	be 81       	ldd	r27, Y+6	; 0x06
    124e:	c6 53       	subi	r28, 0x36	; 54
    1250:	df 4f       	sbci	r29, 0xFF	; 255
    1252:	88 83       	st	Y, r24
    1254:	99 83       	std	Y+1, r25	; 0x01
    1256:	aa 83       	std	Y+2, r26	; 0x02
    1258:	bb 83       	std	Y+3, r27	; 0x03
    125a:	ca 5c       	subi	r28, 0xCA	; 202
    125c:	d0 40       	sbci	r29, 0x00	; 0
    125e:	00 e1       	ldi	r16, 0x10	; 16
    1260:	1e e0       	ldi	r17, 0x0E	; 14
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	c6 53       	subi	r28, 0x36	; 54
    1268:	df 4f       	sbci	r29, 0xFF	; 255
    126a:	68 81       	ld	r22, Y
    126c:	79 81       	ldd	r23, Y+1	; 0x01
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	9b 81       	ldd	r25, Y+3	; 0x03
    1272:	ca 5c       	subi	r28, 0xCA	; 202
    1274:	d0 40       	sbci	r29, 0x00	; 0
    1276:	a9 01       	movw	r20, r18
    1278:	98 01       	movw	r18, r16
    127a:	0e 94 77 31 	call	0x62ee	; 0x62ee <__udivmodsi4>
    127e:	da 01       	movw	r26, r20
    1280:	c9 01       	movw	r24, r18
    1282:	9a 87       	std	Y+10, r25	; 0x0a
    1284:	89 87       	std	Y+9, r24	; 0x09
    time -= h*3600UL;
    1286:	89 85       	ldd	r24, Y+9	; 0x09
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	ac 01       	movw	r20, r24
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	80 e1       	ldi	r24, 0x10	; 16
    1292:	9e e0       	ldi	r25, 0x0E	; 14
    1294:	dc 01       	movw	r26, r24
    1296:	9a 01       	movw	r18, r20
    1298:	ab 01       	movw	r20, r22
    129a:	0e 94 be 31 	call	0x637c	; 0x637c <__muluhisi3>
    129e:	ca 54       	subi	r28, 0x4A	; 74
    12a0:	df 4f       	sbci	r29, 0xFF	; 255
    12a2:	68 83       	st	Y, r22
    12a4:	79 83       	std	Y+1, r23	; 0x01
    12a6:	8a 83       	std	Y+2, r24	; 0x02
    12a8:	9b 83       	std	Y+3, r25	; 0x03
    12aa:	c6 5b       	subi	r28, 0xB6	; 182
    12ac:	d0 40       	sbci	r29, 0x00	; 0
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	ad 81       	ldd	r26, Y+5	; 0x05
    12b4:	be 81       	ldd	r27, Y+6	; 0x06
    12b6:	ca 54       	subi	r28, 0x4A	; 74
    12b8:	df 4f       	sbci	r29, 0xFF	; 255
    12ba:	28 81       	ld	r18, Y
    12bc:	39 81       	ldd	r19, Y+1	; 0x01
    12be:	4a 81       	ldd	r20, Y+2	; 0x02
    12c0:	5b 81       	ldd	r21, Y+3	; 0x03
    12c2:	c6 5b       	subi	r28, 0xB6	; 182
    12c4:	d0 40       	sbci	r29, 0x00	; 0
    12c6:	82 1b       	sub	r24, r18
    12c8:	93 0b       	sbc	r25, r19
    12ca:	a4 0b       	sbc	r26, r20
    12cc:	b5 0b       	sbc	r27, r21
    12ce:	8b 83       	std	Y+3, r24	; 0x03
    12d0:	9c 83       	std	Y+4, r25	; 0x04
    12d2:	ad 83       	std	Y+5, r26	; 0x05
    12d4:	be 83       	std	Y+6, r27	; 0x06
    m = time/60;
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	ad 81       	ldd	r26, Y+5	; 0x05
    12dc:	be 81       	ldd	r27, Y+6	; 0x06
    12de:	c2 53       	subi	r28, 0x32	; 50
    12e0:	df 4f       	sbci	r29, 0xFF	; 255
    12e2:	88 83       	st	Y, r24
    12e4:	99 83       	std	Y+1, r25	; 0x01
    12e6:	aa 83       	std	Y+2, r26	; 0x02
    12e8:	bb 83       	std	Y+3, r27	; 0x03
    12ea:	ce 5c       	subi	r28, 0xCE	; 206
    12ec:	d0 40       	sbci	r29, 0x00	; 0
    12ee:	0c e3       	ldi	r16, 0x3C	; 60
    12f0:	10 e0       	ldi	r17, 0x00	; 0
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	c2 53       	subi	r28, 0x32	; 50
    12f8:	df 4f       	sbci	r29, 0xFF	; 255
    12fa:	68 81       	ld	r22, Y
    12fc:	79 81       	ldd	r23, Y+1	; 0x01
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	9b 81       	ldd	r25, Y+3	; 0x03
    1302:	ce 5c       	subi	r28, 0xCE	; 206
    1304:	d0 40       	sbci	r29, 0x00	; 0
    1306:	a9 01       	movw	r20, r18
    1308:	98 01       	movw	r18, r16
    130a:	0e 94 77 31 	call	0x62ee	; 0x62ee <__udivmodsi4>
    130e:	da 01       	movw	r26, r20
    1310:	c9 01       	movw	r24, r18
    1312:	9c 87       	std	Y+12, r25	; 0x0c
    1314:	8b 87       	std	Y+11, r24	; 0x0b
    s = time - m*60;
    1316:	2b 81       	ldd	r18, Y+3	; 0x03
    1318:	3c 81       	ldd	r19, Y+4	; 0x04
    131a:	4b 85       	ldd	r20, Y+11	; 0x0b
    131c:	5c 85       	ldd	r21, Y+12	; 0x0c
    131e:	6c e3       	ldi	r22, 0x3C	; 60
    1320:	64 9f       	mul	r22, r20
    1322:	c0 01       	movw	r24, r0
    1324:	65 9f       	mul	r22, r21
    1326:	90 0d       	add	r25, r0
    1328:	11 24       	eor	r1, r1
    132a:	d9 01       	movw	r26, r18
    132c:	a8 1b       	sub	r26, r24
    132e:	b9 0b       	sbc	r27, r25
    1330:	cd 01       	movw	r24, r26
    1332:	9e 87       	std	Y+14, r25	; 0x0e
    1334:	8d 87       	std	Y+13, r24	; 0x0d
    ptr = sms;
    1336:	ce 01       	movw	r24, r28
    1338:	40 96       	adiw	r24, 0x10	; 16
    133a:	9a 83       	std	Y+2, r25	; 0x02
    133c:	89 83       	std	Y+1, r24	; 0x01
    uint8_t in_volt = get_flag_input_voltage();
    133e:	0e 94 a4 24 	call	0x4948	; 0x4948 <get_flag_input_voltage>
    1342:	8f 87       	std	Y+15, r24	; 0x0f

    send_USSD("*101#");
    1344:	84 e1       	ldi	r24, 0x14	; 20
    1346:	91 e0       	ldi	r25, 0x01	; 1
    1348:	0e 94 75 1f 	call	0x3eea	; 0x3eea <send_USSD>

    ptr += sprintf_P(ptr, PSTR("Deposit=%s RUB, "), get_arr_dep());
    134c:	0e 94 92 22 	call	0x4524	; 0x4524 <get_arr_dep>
    1350:	9c 01       	movw	r18, r24
    1352:	8e ee       	ldi	r24, 0xEE	; 238
    1354:	91 e0       	ldi	r25, 0x01	; 1
    1356:	43 2f       	mov	r20, r19
    1358:	4f 93       	push	r20
    135a:	2f 93       	push	r18
    135c:	29 2f       	mov	r18, r25
    135e:	2f 93       	push	r18
    1360:	8f 93       	push	r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	8f 93       	push	r24
    1366:	89 81       	ldd	r24, Y+1	; 0x01
    1368:	8f 93       	push	r24
    136a:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    136e:	0f 90       	pop	r0
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	9c 01       	movw	r18, r24
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	9a 81       	ldd	r25, Y+2	; 0x02
    1380:	82 0f       	add	r24, r18
    1382:	93 1f       	adc	r25, r19
    1384:	9a 83       	std	Y+2, r25	; 0x02
    1386:	89 83       	std	Y+1, r24	; 0x01
    ptr += sprintf_P(ptr, PSTR("Time=%ud%uh%um%us, "), d, h, m, s);
    1388:	8f ef       	ldi	r24, 0xFF	; 255
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	2e 85       	ldd	r18, Y+14	; 0x0e
    138e:	2f 93       	push	r18
    1390:	2d 85       	ldd	r18, Y+13	; 0x0d
    1392:	2f 93       	push	r18
    1394:	2c 85       	ldd	r18, Y+12	; 0x0c
    1396:	2f 93       	push	r18
    1398:	2b 85       	ldd	r18, Y+11	; 0x0b
    139a:	2f 93       	push	r18
    139c:	2a 85       	ldd	r18, Y+10	; 0x0a
    139e:	2f 93       	push	r18
    13a0:	29 85       	ldd	r18, Y+9	; 0x09
    13a2:	2f 93       	push	r18
    13a4:	28 85       	ldd	r18, Y+8	; 0x08
    13a6:	2f 93       	push	r18
    13a8:	2f 81       	ldd	r18, Y+7	; 0x07
    13aa:	2f 93       	push	r18
    13ac:	29 2f       	mov	r18, r25
    13ae:	2f 93       	push	r18
    13b0:	8f 93       	push	r24
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	8f 93       	push	r24
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	8f 93       	push	r24
    13ba:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    13be:	ed b7       	in	r30, 0x3d	; 61
    13c0:	fe b7       	in	r31, 0x3e	; 62
    13c2:	3c 96       	adiw	r30, 0x0c	; 12
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	9c 01       	movw	r18, r24
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	9a 81       	ldd	r25, Y+2	; 0x02
    13d4:	82 0f       	add	r24, r18
    13d6:	93 1f       	adc	r25, r19
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
    ptr += sprintf_P(ptr, PSTR("Temperature=%dC, "), analog_read(INT_TEMP));
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <analog_read>
    13e2:	9c 01       	movw	r18, r24
    13e4:	83 e1       	ldi	r24, 0x13	; 19
    13e6:	92 e0       	ldi	r25, 0x02	; 2
    13e8:	43 2f       	mov	r20, r19
    13ea:	4f 93       	push	r20
    13ec:	2f 93       	push	r18
    13ee:	29 2f       	mov	r18, r25
    13f0:	2f 93       	push	r18
    13f2:	8f 93       	push	r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	8f 93       	push	r24
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	8f 93       	push	r24
    13fc:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	9c 01       	movw	r18, r24
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
    1412:	82 0f       	add	r24, r18
    1414:	93 1f       	adc	r25, r19
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
    ptr += sprintf_P(ptr, PSTR("GSM=%d%%, "), mdm_get_signal_strength());
    141a:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <mdm_get_signal_strength>
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	85 e2       	ldi	r24, 0x25	; 37
    1424:	92 e0       	ldi	r25, 0x02	; 2
    1426:	43 2f       	mov	r20, r19
    1428:	4f 93       	push	r20
    142a:	2f 93       	push	r18
    142c:	29 2f       	mov	r18, r25
    142e:	2f 93       	push	r18
    1430:	8f 93       	push	r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	8f 93       	push	r24
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	8f 93       	push	r24
    143a:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	9c 01       	movw	r18, r24
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	9a 81       	ldd	r25, Y+2	; 0x02
    1450:	82 0f       	add	r24, r18
    1452:	93 1f       	adc	r25, r19
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01

    if(get_time_without_power_s() != 0)
    1458:	0e 94 94 08 	call	0x1128	; 0x1128 <get_time_without_power_s>
    145c:	c6 54       	subi	r28, 0x46	; 70
    145e:	df 4f       	sbci	r29, 0xFF	; 255
    1460:	68 83       	st	Y, r22
    1462:	79 83       	std	Y+1, r23	; 0x01
    1464:	8a 83       	std	Y+2, r24	; 0x02
    1466:	9b 83       	std	Y+3, r25	; 0x03
    1468:	ca 5b       	subi	r28, 0xBA	; 186
    146a:	d0 40       	sbci	r29, 0x00	; 0
    146c:	c6 54       	subi	r28, 0x46	; 70
    146e:	df 4f       	sbci	r29, 0xFF	; 255
    1470:	28 81       	ld	r18, Y
    1472:	39 81       	ldd	r19, Y+1	; 0x01
    1474:	4a 81       	ldd	r20, Y+2	; 0x02
    1476:	5b 81       	ldd	r21, Y+3	; 0x03
    1478:	ca 5b       	subi	r28, 0xBA	; 186
    147a:	d0 40       	sbci	r29, 0x00	; 0
    147c:	23 2b       	or	r18, r19
    147e:	24 2b       	or	r18, r20
    1480:	25 2b       	or	r18, r21
    1482:	f9 f0       	breq	.+62     	; 0x14c2 <send_sms_report+0x360>
    {
        ptr += sprintf_P(ptr, PSTR("Battery=%d%%, "), level_battery());
    1484:	0e 94 4d 08 	call	0x109a	; 0x109a <level_battery>
    1488:	28 2f       	mov	r18, r24
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	80 e3       	ldi	r24, 0x30	; 48
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	43 2f       	mov	r20, r19
    1492:	4f 93       	push	r20
    1494:	2f 93       	push	r18
    1496:	29 2f       	mov	r18, r25
    1498:	2f 93       	push	r18
    149a:	8f 93       	push	r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	8f 93       	push	r24
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	8f 93       	push	r24
    14a4:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	9c 01       	movw	r18, r24
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	89 83       	std	Y+1, r24	; 0x01
    }

    ptr += sprintf_P(ptr, PSTR("rst_mcu=%lu. "), get_reset_count_mcu());
    14c2:	0e 94 58 11 	call	0x22b0	; 0x22b0 <get_reset_count_mcu>
    14c6:	c2 54       	subi	r28, 0x42	; 66
    14c8:	df 4f       	sbci	r29, 0xFF	; 255
    14ca:	68 83       	st	Y, r22
    14cc:	79 83       	std	Y+1, r23	; 0x01
    14ce:	8a 83       	std	Y+2, r24	; 0x02
    14d0:	9b 83       	std	Y+3, r25	; 0x03
    14d2:	ce 5b       	subi	r28, 0xBE	; 190
    14d4:	d0 40       	sbci	r29, 0x00	; 0
    14d6:	8f e3       	ldi	r24, 0x3F	; 63
    14d8:	92 e0       	ldi	r25, 0x02	; 2
    14da:	cf 53       	subi	r28, 0x3F	; 63
    14dc:	df 4f       	sbci	r29, 0xFF	; 255
    14de:	28 81       	ld	r18, Y
    14e0:	c1 5c       	subi	r28, 0xC1	; 193
    14e2:	d0 40       	sbci	r29, 0x00	; 0
    14e4:	2f 93       	push	r18
    14e6:	c0 54       	subi	r28, 0x40	; 64
    14e8:	df 4f       	sbci	r29, 0xFF	; 255
    14ea:	28 81       	ld	r18, Y
    14ec:	c0 5c       	subi	r28, 0xC0	; 192
    14ee:	d0 40       	sbci	r29, 0x00	; 0
    14f0:	2f 93       	push	r18
    14f2:	c1 54       	subi	r28, 0x41	; 65
    14f4:	df 4f       	sbci	r29, 0xFF	; 255
    14f6:	28 81       	ld	r18, Y
    14f8:	cf 5b       	subi	r28, 0xBF	; 191
    14fa:	d0 40       	sbci	r29, 0x00	; 0
    14fc:	2f 93       	push	r18
    14fe:	c2 54       	subi	r28, 0x42	; 66
    1500:	df 4f       	sbci	r29, 0xFF	; 255
    1502:	28 81       	ld	r18, Y
    1504:	ce 5b       	subi	r28, 0xBE	; 190
    1506:	d0 40       	sbci	r29, 0x00	; 0
    1508:	2f 93       	push	r18
    150a:	29 2f       	mov	r18, r25
    150c:	2f 93       	push	r18
    150e:	8f 93       	push	r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	8f 93       	push	r24
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	8f 93       	push	r24
    1518:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    151c:	4d b7       	in	r20, 0x3d	; 61
    151e:	5e b7       	in	r21, 0x3e	; 62
    1520:	48 5f       	subi	r20, 0xF8	; 248
    1522:	5f 4f       	sbci	r21, 0xFF	; 255
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	9c 01       	movw	r18, r24
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	82 0f       	add	r24, r18
    1536:	93 1f       	adc	r25, r19
    1538:	9a 83       	std	Y+2, r25	; 0x02
    153a:	89 83       	std	Y+1, r24	; 0x01

    if(in_volt == IS_VOLT_ALL)
    153c:	8f 85       	ldd	r24, Y+15	; 0x0f
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	99 f5       	brne	.+102    	; 0x15a8 <send_sms_report+0x446>
    {
        ptr = strcat(ptr, "All good, ");
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	9c 01       	movw	r18, r24
    1548:	d9 01       	movw	r26, r18
    154a:	0d 90       	ld	r0, X+
    154c:	00 20       	and	r0, r0
    154e:	e9 f7       	brne	.-6      	; 0x154a <send_sms_report+0x3e8>
    1550:	cd 01       	movw	r24, r26
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	82 1b       	sub	r24, r18
    1556:	93 0b       	sbc	r25, r19
    1558:	29 81       	ldd	r18, Y+1	; 0x01
    155a:	3a 81       	ldd	r19, Y+2	; 0x02
    155c:	82 0f       	add	r24, r18
    155e:	93 1f       	adc	r25, r19
    1560:	2b e0       	ldi	r18, 0x0B	; 11
    1562:	ea e1       	ldi	r30, 0x1A	; 26
    1564:	f1 e0       	ldi	r31, 0x01	; 1
    1566:	dc 01       	movw	r26, r24
    1568:	01 90       	ld	r0, Z+
    156a:	0d 92       	st	X+, r0
    156c:	2a 95       	dec	r18
    156e:	e1 f7       	brne	.-8      	; 0x1568 <send_sms_report+0x406>
        if(get_mode_gsm() == GSM_ON_CHAPEKA)
    1570:	0e 94 2a 11 	call	0x2254	; 0x2254 <get_mode_gsm>
    1574:	82 30       	cpi	r24, 0x02	; 2
    1576:	51 f4       	brne	.+20     	; 0x158c <send_sms_report+0x42a>
        {
            ptr = strcat_P(ptr, PSTR("energy from Chapeka."));
    1578:	2d e4       	ldi	r18, 0x4D	; 77
    157a:	32 e0       	ldi	r19, 0x02	; 2
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	b9 01       	movw	r22, r18
    1582:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <strcat_P>
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	34 c0       	rjmp	.+104    	; 0x15f4 <send_sms_report+0x492>
        }
        else if(get_mode_gsm() == GSM_ON_UTKINA)
    158c:	0e 94 2a 11 	call	0x2254	; 0x2254 <get_mode_gsm>
    1590:	81 30       	cpi	r24, 0x01	; 1
    1592:	81 f5       	brne	.+96     	; 0x15f4 <send_sms_report+0x492>
        {
            ptr = strcat_P(ptr, PSTR("energy from Utkina."));
    1594:	22 e6       	ldi	r18, 0x62	; 98
    1596:	32 e0       	ldi	r19, 0x02	; 2
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	9a 81       	ldd	r25, Y+2	; 0x02
    159c:	b9 01       	movw	r22, r18
    159e:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <strcat_P>
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	26 c0       	rjmp	.+76     	; 0x15f4 <send_sms_report+0x492>
        }
    }
    else if(in_volt == IS_VOLT_CHAPEKA)
    15a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	51 f4       	brne	.+20     	; 0x15c2 <send_sms_report+0x460>
    {
        ptr = strcat_P(ptr, PSTR("Warning! Energy from Chapeka."));
    15ae:	26 e7       	ldi	r18, 0x76	; 118
    15b0:	32 e0       	ldi	r19, 0x02	; 2
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	9a 81       	ldd	r25, Y+2	; 0x02
    15b6:	b9 01       	movw	r22, r18
    15b8:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <strcat_P>
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	19 c0       	rjmp	.+50     	; 0x15f4 <send_sms_report+0x492>
    }
    else if(in_volt == IS_VOLT_UTKINA)
    15c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	51 f4       	brne	.+20     	; 0x15dc <send_sms_report+0x47a>
    {
        ptr = strcat_P(ptr, PSTR("Warning! Energy from Utkina."));
    15c8:	24 e9       	ldi	r18, 0x94	; 148
    15ca:	32 e0       	ldi	r19, 0x02	; 2
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	9a 81       	ldd	r25, Y+2	; 0x02
    15d0:	b9 01       	movw	r22, r18
    15d2:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <strcat_P>
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01
    15da:	0c c0       	rjmp	.+24     	; 0x15f4 <send_sms_report+0x492>
    }
    else if(in_volt == NOT_VOLT)
    15dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    15de:	88 23       	and	r24, r24
    15e0:	49 f4       	brne	.+18     	; 0x15f4 <send_sms_report+0x492>
    {
        ptr = strcat_P(ptr, PSTR("Alarm! Not energy!!!"));
    15e2:	21 eb       	ldi	r18, 0xB1	; 177
    15e4:	32 e0       	ldi	r19, 0x02	; 2
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ea:	b9 01       	movw	r22, r18
    15ec:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <strcat_P>
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
    }
    send_sms(sms, phone);
    15f4:	ce 01       	movw	r24, r28
    15f6:	80 55       	subi	r24, 0x50	; 80
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 81       	ld	r18, Z
    15fe:	31 81       	ldd	r19, Z+1	; 0x01
    1600:	ce 01       	movw	r24, r28
    1602:	40 96       	adiw	r24, 0x10	; 16
    1604:	b9 01       	movw	r22, r18
    1606:	0e 94 35 18 	call	0x306a	; 0x306a <send_sms>
}
    160a:	00 00       	nop
    160c:	cf 52       	subi	r28, 0x2F	; 47
    160e:	df 4f       	sbci	r29, 0xFF	; 255
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	08 95       	ret

00001624 <debug_report>:
//*****************************************************************************
void debug_report(void)
{
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	c4 59       	subi	r28, 0x94	; 148
    1632:	d1 09       	sbc	r29, r1
    1634:	0f b6       	in	r0, 0x3f	; 63
    1636:	f8 94       	cli
    1638:	de bf       	out	0x3e, r29	; 62
    163a:	0f be       	out	0x3f, r0	; 63
    163c:	cd bf       	out	0x3d, r28	; 61
    uint32_t time;
    uint16_t d, h, m, s;
    char sms[100];
    char *ptr;

    time = get_time_from_start_s();
    163e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <get_time_from_start_s>
    1642:	cb 57       	subi	r28, 0x7B	; 123
    1644:	df 4f       	sbci	r29, 0xFF	; 255
    1646:	68 83       	st	Y, r22
    1648:	79 83       	std	Y+1, r23	; 0x01
    164a:	8a 83       	std	Y+2, r24	; 0x02
    164c:	9b 83       	std	Y+3, r25	; 0x03
    164e:	c5 58       	subi	r28, 0x85	; 133
    1650:	d0 40       	sbci	r29, 0x00	; 0
    1652:	cb 57       	subi	r28, 0x7B	; 123
    1654:	df 4f       	sbci	r29, 0xFF	; 255
    1656:	28 81       	ld	r18, Y
    1658:	39 81       	ldd	r19, Y+1	; 0x01
    165a:	4a 81       	ldd	r20, Y+2	; 0x02
    165c:	5b 81       	ldd	r21, Y+3	; 0x03
    165e:	c5 58       	subi	r28, 0x85	; 133
    1660:	d0 40       	sbci	r29, 0x00	; 0
    1662:	2b 83       	std	Y+3, r18	; 0x03
    1664:	3c 83       	std	Y+4, r19	; 0x04
    1666:	4d 83       	std	Y+5, r20	; 0x05
    1668:	5e 83       	std	Y+6, r21	; 0x06
    d = time/(3600UL*24UL);
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	ad 81       	ldd	r26, Y+5	; 0x05
    1670:	be 81       	ldd	r27, Y+6	; 0x06
    1672:	c7 57       	subi	r28, 0x77	; 119
    1674:	df 4f       	sbci	r29, 0xFF	; 255
    1676:	88 83       	st	Y, r24
    1678:	99 83       	std	Y+1, r25	; 0x01
    167a:	aa 83       	std	Y+2, r26	; 0x02
    167c:	bb 83       	std	Y+3, r27	; 0x03
    167e:	c9 58       	subi	r28, 0x89	; 137
    1680:	d0 40       	sbci	r29, 0x00	; 0
    1682:	00 e8       	ldi	r16, 0x80	; 128
    1684:	11 e5       	ldi	r17, 0x51	; 81
    1686:	21 e0       	ldi	r18, 0x01	; 1
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	c7 57       	subi	r28, 0x77	; 119
    168c:	df 4f       	sbci	r29, 0xFF	; 255
    168e:	68 81       	ld	r22, Y
    1690:	79 81       	ldd	r23, Y+1	; 0x01
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	9b 81       	ldd	r25, Y+3	; 0x03
    1696:	c9 58       	subi	r28, 0x89	; 137
    1698:	d0 40       	sbci	r29, 0x00	; 0
    169a:	a9 01       	movw	r20, r18
    169c:	98 01       	movw	r18, r16
    169e:	0e 94 77 31 	call	0x62ee	; 0x62ee <__udivmodsi4>
    16a2:	da 01       	movw	r26, r20
    16a4:	c9 01       	movw	r24, r18
    16a6:	98 87       	std	Y+8, r25	; 0x08
    16a8:	8f 83       	std	Y+7, r24	; 0x07
    time -= d*(3600UL*24UL);
    16aa:	8f 81       	ldd	r24, Y+7	; 0x07
    16ac:	98 85       	ldd	r25, Y+8	; 0x08
    16ae:	cc 01       	movw	r24, r24
    16b0:	a0 e0       	ldi	r26, 0x00	; 0
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	9c 01       	movw	r18, r24
    16b6:	ad 01       	movw	r20, r26
    16b8:	60 e8       	ldi	r22, 0x80	; 128
    16ba:	71 e5       	ldi	r23, 0x51	; 81
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 53 31 	call	0x62a6	; 0x62a6 <__mulsi3>
    16c4:	e9 96       	adiw	r28, 0x39	; 57
    16c6:	6c af       	std	Y+60, r22	; 0x3c
    16c8:	7d af       	std	Y+61, r23	; 0x3d
    16ca:	8e af       	std	Y+62, r24	; 0x3e
    16cc:	9f af       	std	Y+63, r25	; 0x3f
    16ce:	e9 97       	sbiw	r28, 0x39	; 57
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	ad 81       	ldd	r26, Y+5	; 0x05
    16d6:	be 81       	ldd	r27, Y+6	; 0x06
    16d8:	e9 96       	adiw	r28, 0x39	; 57
    16da:	2c ad       	ldd	r18, Y+60	; 0x3c
    16dc:	3d ad       	ldd	r19, Y+61	; 0x3d
    16de:	4e ad       	ldd	r20, Y+62	; 0x3e
    16e0:	5f ad       	ldd	r21, Y+63	; 0x3f
    16e2:	e9 97       	sbiw	r28, 0x39	; 57
    16e4:	82 1b       	sub	r24, r18
    16e6:	93 0b       	sbc	r25, r19
    16e8:	a4 0b       	sbc	r26, r20
    16ea:	b5 0b       	sbc	r27, r21
    16ec:	8b 83       	std	Y+3, r24	; 0x03
    16ee:	9c 83       	std	Y+4, r25	; 0x04
    16f0:	ad 83       	std	Y+5, r26	; 0x05
    16f2:	be 83       	std	Y+6, r27	; 0x06
    h = time/3600UL;
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	ad 81       	ldd	r26, Y+5	; 0x05
    16fa:	be 81       	ldd	r27, Y+6	; 0x06
    16fc:	c3 57       	subi	r28, 0x73	; 115
    16fe:	df 4f       	sbci	r29, 0xFF	; 255
    1700:	88 83       	st	Y, r24
    1702:	99 83       	std	Y+1, r25	; 0x01
    1704:	aa 83       	std	Y+2, r26	; 0x02
    1706:	bb 83       	std	Y+3, r27	; 0x03
    1708:	cd 58       	subi	r28, 0x8D	; 141
    170a:	d0 40       	sbci	r29, 0x00	; 0
    170c:	00 e1       	ldi	r16, 0x10	; 16
    170e:	1e e0       	ldi	r17, 0x0E	; 14
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	c3 57       	subi	r28, 0x73	; 115
    1716:	df 4f       	sbci	r29, 0xFF	; 255
    1718:	68 81       	ld	r22, Y
    171a:	79 81       	ldd	r23, Y+1	; 0x01
    171c:	8a 81       	ldd	r24, Y+2	; 0x02
    171e:	9b 81       	ldd	r25, Y+3	; 0x03
    1720:	cd 58       	subi	r28, 0x8D	; 141
    1722:	d0 40       	sbci	r29, 0x00	; 0
    1724:	a9 01       	movw	r20, r18
    1726:	98 01       	movw	r18, r16
    1728:	0e 94 77 31 	call	0x62ee	; 0x62ee <__udivmodsi4>
    172c:	da 01       	movw	r26, r20
    172e:	c9 01       	movw	r24, r18
    1730:	9a 87       	std	Y+10, r25	; 0x0a
    1732:	89 87       	std	Y+9, r24	; 0x09
    time -= h*3600UL;
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	ac 01       	movw	r20, r24
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	70 e0       	ldi	r23, 0x00	; 0
    173e:	80 e1       	ldi	r24, 0x10	; 16
    1740:	9e e0       	ldi	r25, 0x0E	; 14
    1742:	dc 01       	movw	r26, r24
    1744:	9a 01       	movw	r18, r20
    1746:	ab 01       	movw	r20, r22
    1748:	0e 94 be 31 	call	0x637c	; 0x637c <__muluhisi3>
    174c:	ed 96       	adiw	r28, 0x3d	; 61
    174e:	6c af       	std	Y+60, r22	; 0x3c
    1750:	7d af       	std	Y+61, r23	; 0x3d
    1752:	8e af       	std	Y+62, r24	; 0x3e
    1754:	9f af       	std	Y+63, r25	; 0x3f
    1756:	ed 97       	sbiw	r28, 0x3d	; 61
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	ad 81       	ldd	r26, Y+5	; 0x05
    175e:	be 81       	ldd	r27, Y+6	; 0x06
    1760:	ed 96       	adiw	r28, 0x3d	; 61
    1762:	2c ad       	ldd	r18, Y+60	; 0x3c
    1764:	3d ad       	ldd	r19, Y+61	; 0x3d
    1766:	4e ad       	ldd	r20, Y+62	; 0x3e
    1768:	5f ad       	ldd	r21, Y+63	; 0x3f
    176a:	ed 97       	sbiw	r28, 0x3d	; 61
    176c:	82 1b       	sub	r24, r18
    176e:	93 0b       	sbc	r25, r19
    1770:	a4 0b       	sbc	r26, r20
    1772:	b5 0b       	sbc	r27, r21
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	ad 83       	std	Y+5, r26	; 0x05
    177a:	be 83       	std	Y+6, r27	; 0x06
    m = time/60;
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	ad 81       	ldd	r26, Y+5	; 0x05
    1782:	be 81       	ldd	r27, Y+6	; 0x06
    1784:	cf 56       	subi	r28, 0x6F	; 111
    1786:	df 4f       	sbci	r29, 0xFF	; 255
    1788:	88 83       	st	Y, r24
    178a:	99 83       	std	Y+1, r25	; 0x01
    178c:	aa 83       	std	Y+2, r26	; 0x02
    178e:	bb 83       	std	Y+3, r27	; 0x03
    1790:	c1 59       	subi	r28, 0x91	; 145
    1792:	d0 40       	sbci	r29, 0x00	; 0
    1794:	0c e3       	ldi	r16, 0x3C	; 60
    1796:	10 e0       	ldi	r17, 0x00	; 0
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	cf 56       	subi	r28, 0x6F	; 111
    179e:	df 4f       	sbci	r29, 0xFF	; 255
    17a0:	68 81       	ld	r22, Y
    17a2:	79 81       	ldd	r23, Y+1	; 0x01
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
    17a8:	c1 59       	subi	r28, 0x91	; 145
    17aa:	d0 40       	sbci	r29, 0x00	; 0
    17ac:	a9 01       	movw	r20, r18
    17ae:	98 01       	movw	r18, r16
    17b0:	0e 94 77 31 	call	0x62ee	; 0x62ee <__udivmodsi4>
    17b4:	da 01       	movw	r26, r20
    17b6:	c9 01       	movw	r24, r18
    17b8:	9c 87       	std	Y+12, r25	; 0x0c
    17ba:	8b 87       	std	Y+11, r24	; 0x0b
    s = time - m*60;
    17bc:	2b 81       	ldd	r18, Y+3	; 0x03
    17be:	3c 81       	ldd	r19, Y+4	; 0x04
    17c0:	4b 85       	ldd	r20, Y+11	; 0x0b
    17c2:	5c 85       	ldd	r21, Y+12	; 0x0c
    17c4:	6c e3       	ldi	r22, 0x3C	; 60
    17c6:	64 9f       	mul	r22, r20
    17c8:	c0 01       	movw	r24, r0
    17ca:	65 9f       	mul	r22, r21
    17cc:	90 0d       	add	r25, r0
    17ce:	11 24       	eor	r1, r1
    17d0:	d9 01       	movw	r26, r18
    17d2:	a8 1b       	sub	r26, r24
    17d4:	b9 0b       	sbc	r27, r25
    17d6:	cd 01       	movw	r24, r26
    17d8:	9e 87       	std	Y+14, r25	; 0x0e
    17da:	8d 87       	std	Y+13, r24	; 0x0d
    ptr = sms;
    17dc:	ce 01       	movw	r24, r28
    17de:	41 96       	adiw	r24, 0x11	; 17
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
    uint8_t in_volt = get_flag_input_voltage();
    17e4:	0e 94 a4 24 	call	0x4948	; 0x4948 <get_flag_input_voltage>
    17e8:	8f 87       	std	Y+15, r24	; 0x0f

    ptr += sprintf_P(ptr, PSTR("Dep=%s, "), get_arr_dep());
    17ea:	0e 94 92 22 	call	0x4524	; 0x4524 <get_arr_dep>
    17ee:	9c 01       	movw	r18, r24
    17f0:	86 ec       	ldi	r24, 0xC6	; 198
    17f2:	92 e0       	ldi	r25, 0x02	; 2
    17f4:	43 2f       	mov	r20, r19
    17f6:	4f 93       	push	r20
    17f8:	2f 93       	push	r18
    17fa:	29 2f       	mov	r18, r25
    17fc:	2f 93       	push	r18
    17fe:	8f 93       	push	r24
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	8f 93       	push	r24
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	8f 93       	push	r24
    1808:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	9c 01       	movw	r18, r24
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	9a 81       	ldd	r25, Y+2	; 0x02
    181e:	82 0f       	add	r24, r18
    1820:	93 1f       	adc	r25, r19
    1822:	9a 83       	std	Y+2, r25	; 0x02
    1824:	89 83       	std	Y+1, r24	; 0x01

    ptr += sprintf_P(ptr, PSTR("time=%ud%uh%um%us, "), d, h, m, s);
    1826:	8f ec       	ldi	r24, 0xCF	; 207
    1828:	92 e0       	ldi	r25, 0x02	; 2
    182a:	2e 85       	ldd	r18, Y+14	; 0x0e
    182c:	2f 93       	push	r18
    182e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1830:	2f 93       	push	r18
    1832:	2c 85       	ldd	r18, Y+12	; 0x0c
    1834:	2f 93       	push	r18
    1836:	2b 85       	ldd	r18, Y+11	; 0x0b
    1838:	2f 93       	push	r18
    183a:	2a 85       	ldd	r18, Y+10	; 0x0a
    183c:	2f 93       	push	r18
    183e:	29 85       	ldd	r18, Y+9	; 0x09
    1840:	2f 93       	push	r18
    1842:	28 85       	ldd	r18, Y+8	; 0x08
    1844:	2f 93       	push	r18
    1846:	2f 81       	ldd	r18, Y+7	; 0x07
    1848:	2f 93       	push	r18
    184a:	29 2f       	mov	r18, r25
    184c:	2f 93       	push	r18
    184e:	8f 93       	push	r24
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	8f 93       	push	r24
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	8f 93       	push	r24
    1858:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    185c:	ed b7       	in	r30, 0x3d	; 61
    185e:	fe b7       	in	r31, 0x3e	; 62
    1860:	3c 96       	adiw	r30, 0x0c	; 12
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	9c 01       	movw	r18, r24
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	9a 81       	ldd	r25, Y+2	; 0x02
    1872:	82 0f       	add	r24, r18
    1874:	93 1f       	adc	r25, r19
    1876:	9a 83       	std	Y+2, r25	; 0x02
    1878:	89 83       	std	Y+1, r24	; 0x01

    ptr += sprintf_P(ptr, PSTR("temp=%dC, "), analog_read(INT_TEMP));
    187a:	88 e0       	ldi	r24, 0x08	; 8
    187c:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <analog_read>
    1880:	9c 01       	movw	r18, r24
    1882:	83 ee       	ldi	r24, 0xE3	; 227
    1884:	92 e0       	ldi	r25, 0x02	; 2
    1886:	43 2f       	mov	r20, r19
    1888:	4f 93       	push	r20
    188a:	2f 93       	push	r18
    188c:	29 2f       	mov	r18, r25
    188e:	2f 93       	push	r18
    1890:	8f 93       	push	r24
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	8f 93       	push	r24
    1896:	89 81       	ldd	r24, Y+1	; 0x01
    1898:	8f 93       	push	r24
    189a:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	9c 01       	movw	r18, r24
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	82 0f       	add	r24, r18
    18b2:	93 1f       	adc	r25, r19
    18b4:	9a 83       	std	Y+2, r25	; 0x02
    18b6:	89 83       	std	Y+1, r24	; 0x01

    ptr += sprintf_P(ptr, PSTR("rst_mcu=%lu, "), get_reset_count_mcu());
    18b8:	0e 94 58 11 	call	0x22b0	; 0x22b0 <get_reset_count_mcu>
    18bc:	c3 58       	subi	r28, 0x83	; 131
    18be:	df 4f       	sbci	r29, 0xFF	; 255
    18c0:	68 83       	st	Y, r22
    18c2:	79 83       	std	Y+1, r23	; 0x01
    18c4:	8a 83       	std	Y+2, r24	; 0x02
    18c6:	9b 83       	std	Y+3, r25	; 0x03
    18c8:	cd 57       	subi	r28, 0x7D	; 125
    18ca:	d0 40       	sbci	r29, 0x00	; 0
    18cc:	8e ee       	ldi	r24, 0xEE	; 238
    18ce:	92 e0       	ldi	r25, 0x02	; 2
    18d0:	c0 58       	subi	r28, 0x80	; 128
    18d2:	df 4f       	sbci	r29, 0xFF	; 255
    18d4:	28 81       	ld	r18, Y
    18d6:	c0 58       	subi	r28, 0x80	; 128
    18d8:	d0 40       	sbci	r29, 0x00	; 0
    18da:	2f 93       	push	r18
    18dc:	c1 58       	subi	r28, 0x81	; 129
    18de:	df 4f       	sbci	r29, 0xFF	; 255
    18e0:	28 81       	ld	r18, Y
    18e2:	cf 57       	subi	r28, 0x7F	; 127
    18e4:	d0 40       	sbci	r29, 0x00	; 0
    18e6:	2f 93       	push	r18
    18e8:	ef 96       	adiw	r28, 0x3f	; 63
    18ea:	2f ad       	ldd	r18, Y+63	; 0x3f
    18ec:	ef 97       	sbiw	r28, 0x3f	; 63
    18ee:	2f 93       	push	r18
    18f0:	ee 96       	adiw	r28, 0x3e	; 62
    18f2:	2f ad       	ldd	r18, Y+63	; 0x3f
    18f4:	ee 97       	sbiw	r28, 0x3e	; 62
    18f6:	2f 93       	push	r18
    18f8:	29 2f       	mov	r18, r25
    18fa:	2f 93       	push	r18
    18fc:	8f 93       	push	r24
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	8f 93       	push	r24
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	8f 93       	push	r24
    1906:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    190a:	2d b7       	in	r18, 0x3d	; 61
    190c:	3e b7       	in	r19, 0x3e	; 62
    190e:	28 5f       	subi	r18, 0xF8	; 248
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	0f b6       	in	r0, 0x3f	; 63
    1914:	f8 94       	cli
    1916:	de bf       	out	0x3e, r29	; 62
    1918:	0f be       	out	0x3f, r0	; 63
    191a:	cd bf       	out	0x3d, r28	; 61
    191c:	9c 01       	movw	r18, r24
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	82 0f       	add	r24, r18
    1924:	93 1f       	adc	r25, r19
    1926:	9a 83       	std	Y+2, r25	; 0x02
    1928:	89 83       	std	Y+1, r24	; 0x01

    ptr += sprintf_P(ptr, PSTR("s=%d%%, "), mdm_get_signal_strength());
    192a:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <mdm_get_signal_strength>
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	8c ef       	ldi	r24, 0xFC	; 252
    1934:	92 e0       	ldi	r25, 0x02	; 2
    1936:	43 2f       	mov	r20, r19
    1938:	4f 93       	push	r20
    193a:	2f 93       	push	r18
    193c:	29 2f       	mov	r18, r25
    193e:	2f 93       	push	r18
    1940:	8f 93       	push	r24
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	8f 93       	push	r24
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	8f 93       	push	r24
    194a:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	9c 01       	movw	r18, r24
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	9a 81       	ldd	r25, Y+2	; 0x02
    1960:	82 0f       	add	r24, r18
    1962:	93 1f       	adc	r25, r19
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	89 83       	std	Y+1, r24	; 0x01

    uint8_t time_w_p = (uint8_t)get_time_without_power_s();
    1968:	0e 94 94 08 	call	0x1128	; 0x1128 <get_time_without_power_s>
    196c:	cf 57       	subi	r28, 0x7F	; 127
    196e:	df 4f       	sbci	r29, 0xFF	; 255
    1970:	68 83       	st	Y, r22
    1972:	79 83       	std	Y+1, r23	; 0x01
    1974:	8a 83       	std	Y+2, r24	; 0x02
    1976:	9b 83       	std	Y+3, r25	; 0x03
    1978:	c1 58       	subi	r28, 0x81	; 129
    197a:	d0 40       	sbci	r29, 0x00	; 0
    197c:	cf 57       	subi	r28, 0x7F	; 127
    197e:	df 4f       	sbci	r29, 0xFF	; 255
    1980:	38 81       	ld	r19, Y
    1982:	c1 58       	subi	r28, 0x81	; 129
    1984:	d0 40       	sbci	r29, 0x00	; 0
    1986:	38 8b       	std	Y+16, r19	; 0x10
    if(time_w_p == 0)
    1988:	88 89       	ldd	r24, Y+16	; 0x10
    198a:	88 23       	and	r24, r24
    198c:	e1 f4       	brne	.+56     	; 0x19c6 <debug_report+0x3a2>
    {
        ptr += sprintf_P(ptr, PSTR("e_power=%u. "), 1);
    198e:	85 e0       	ldi	r24, 0x05	; 5
    1990:	93 e0       	ldi	r25, 0x03	; 3
    1992:	1f 92       	push	r1
    1994:	21 e0       	ldi	r18, 0x01	; 1
    1996:	2f 93       	push	r18
    1998:	29 2f       	mov	r18, r25
    199a:	2f 93       	push	r18
    199c:	8f 93       	push	r24
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	8f 93       	push	r24
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	8f 93       	push	r24
    19a6:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	9c 01       	movw	r18, r24
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	9a 81       	ldd	r25, Y+2	; 0x02
    19bc:	82 0f       	add	r24, r18
    19be:	93 1f       	adc	r25, r19
    19c0:	9a 83       	std	Y+2, r25	; 0x02
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	1f c0       	rjmp	.+62     	; 0x1a04 <debug_report+0x3e0>
    }
    else
    {
        ptr += sprintf_P(ptr, PSTR("battery=%d%%. "), level_battery());
    19c6:	0e 94 4d 08 	call	0x109a	; 0x109a <level_battery>
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	82 e1       	ldi	r24, 0x12	; 18
    19d0:	93 e0       	ldi	r25, 0x03	; 3
    19d2:	43 2f       	mov	r20, r19
    19d4:	4f 93       	push	r20
    19d6:	2f 93       	push	r18
    19d8:	29 2f       	mov	r18, r25
    19da:	2f 93       	push	r18
    19dc:	8f 93       	push	r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	8f 93       	push	r24
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	8f 93       	push	r24
    19e6:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    19ea:	0f 90       	pop	r0
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	9c 01       	movw	r18, r24
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	9a 81       	ldd	r25, Y+2	; 0x02
    19fc:	82 0f       	add	r24, r18
    19fe:	93 1f       	adc	r25, r19
    1a00:	9a 83       	std	Y+2, r25	; 0x02
    1a02:	89 83       	std	Y+1, r24	; 0x01

    }
    if(in_volt == IS_VOLT_ALL)
    1a04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a06:	83 30       	cpi	r24, 0x03	; 3
    1a08:	99 f5       	brne	.+102    	; 0x1a70 <debug_report+0x44c>
    {
        ptr = strcat(ptr, "All Ok, ");
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	9c 01       	movw	r18, r24
    1a10:	d9 01       	movw	r26, r18
    1a12:	0d 90       	ld	r0, X+
    1a14:	00 20       	and	r0, r0
    1a16:	e9 f7       	brne	.-6      	; 0x1a12 <debug_report+0x3ee>
    1a18:	cd 01       	movw	r24, r26
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	82 1b       	sub	r24, r18
    1a1e:	93 0b       	sbc	r25, r19
    1a20:	29 81       	ldd	r18, Y+1	; 0x01
    1a22:	3a 81       	ldd	r19, Y+2	; 0x02
    1a24:	82 0f       	add	r24, r18
    1a26:	93 1f       	adc	r25, r19
    1a28:	29 e0       	ldi	r18, 0x09	; 9
    1a2a:	e5 e2       	ldi	r30, 0x25	; 37
    1a2c:	f1 e0       	ldi	r31, 0x01	; 1
    1a2e:	dc 01       	movw	r26, r24
    1a30:	01 90       	ld	r0, Z+
    1a32:	0d 92       	st	X+, r0
    1a34:	2a 95       	dec	r18
    1a36:	e1 f7       	brne	.-8      	; 0x1a30 <debug_report+0x40c>
        if(get_mode_gsm() == GSM_ON_CHAPEKA)
    1a38:	0e 94 2a 11 	call	0x2254	; 0x2254 <get_mode_gsm>
    1a3c:	82 30       	cpi	r24, 0x02	; 2
    1a3e:	51 f4       	brne	.+20     	; 0x1a54 <debug_report+0x430>
        {
            ptr = strcat_P(ptr, PSTR("energy from Chapeka."));
    1a40:	21 e2       	ldi	r18, 0x21	; 33
    1a42:	33 e0       	ldi	r19, 0x03	; 3
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	b9 01       	movw	r22, r18
    1a4a:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <strcat_P>
    1a4e:	9a 83       	std	Y+2, r25	; 0x02
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	34 c0       	rjmp	.+104    	; 0x1abc <debug_report+0x498>
        }
        else if(get_mode_gsm() == GSM_ON_UTKINA)
    1a54:	0e 94 2a 11 	call	0x2254	; 0x2254 <get_mode_gsm>
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	81 f5       	brne	.+96     	; 0x1abc <debug_report+0x498>
        {
            ptr = strcat_P(ptr, PSTR("energy from Utkina."));
    1a5c:	26 e3       	ldi	r18, 0x36	; 54
    1a5e:	33 e0       	ldi	r19, 0x03	; 3
    1a60:	89 81       	ldd	r24, Y+1	; 0x01
    1a62:	9a 81       	ldd	r25, Y+2	; 0x02
    1a64:	b9 01       	movw	r22, r18
    1a66:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <strcat_P>
    1a6a:	9a 83       	std	Y+2, r25	; 0x02
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	26 c0       	rjmp	.+76     	; 0x1abc <debug_report+0x498>
        }
    }
    else if(in_volt == IS_VOLT_CHAPEKA)
    1a70:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a72:	82 30       	cpi	r24, 0x02	; 2
    1a74:	51 f4       	brne	.+20     	; 0x1a8a <debug_report+0x466>
    {
        ptr = strcat_P(ptr, PSTR(" Warning! Energy from Chapeka."));
    1a76:	2a e4       	ldi	r18, 0x4A	; 74
    1a78:	33 e0       	ldi	r19, 0x03	; 3
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7e:	b9 01       	movw	r22, r18
    1a80:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <strcat_P>
    1a84:	9a 83       	std	Y+2, r25	; 0x02
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	19 c0       	rjmp	.+50     	; 0x1abc <debug_report+0x498>
    }
    else if(in_volt == IS_VOLT_UTKINA)
    1a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8c:	81 30       	cpi	r24, 0x01	; 1
    1a8e:	51 f4       	brne	.+20     	; 0x1aa4 <debug_report+0x480>
    {
        ptr = strcat_P(ptr, PSTR(" Warning! Energy from Utkina."));
    1a90:	29 e6       	ldi	r18, 0x69	; 105
    1a92:	33 e0       	ldi	r19, 0x03	; 3
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	b9 01       	movw	r22, r18
    1a9a:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <strcat_P>
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	0c c0       	rjmp	.+24     	; 0x1abc <debug_report+0x498>
    }
    else if(in_volt == NOT_VOLT)
    1aa4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aa6:	88 23       	and	r24, r24
    1aa8:	49 f4       	brne	.+18     	; 0x1abc <debug_report+0x498>
    {
        ptr = strcat_P(ptr, PSTR(" Alarm! Not energy!!!"));
    1aaa:	27 e8       	ldi	r18, 0x87	; 135
    1aac:	33 e0       	ldi	r19, 0x03	; 3
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	b9 01       	movw	r22, r18
    1ab4:	0e 94 7c 34 	call	0x68f8	; 0x68f8 <strcat_P>
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
    }
    softuart_puts_ln(sms);
    1abc:	ce 01       	movw	r24, r28
    1abe:	41 96       	adiw	r24, 0x11	; 17
    1ac0:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <softuart_puts_ln>
    print_freeRam();
    1ac4:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <print_freeRam>
}
    1ac8:	00 00       	nop
    1aca:	cc 56       	subi	r28, 0x6C	; 108
    1acc:	df 4f       	sbci	r29, 0xFF	; 255
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	df 91       	pop	r29
    1ada:	cf 91       	pop	r28
    1adc:	1f 91       	pop	r17
    1ade:	0f 91       	pop	r16
    1ae0:	08 95       	ret

00001ae2 <init_internal_temperature>:

//********************************************************************************************************
void init_internal_temperature(void)
{
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    ADMUX |= (1<<REFS1) | (1<<REFS0); //Internal 1.1V Voltage Reference
    1aea:	8c e7       	ldi	r24, 0x7C	; 124
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	fc 01       	movw	r30, r24
    1af0:	20 81       	ld	r18, Z
    1af2:	8c e7       	ldi	r24, 0x7C	; 124
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	20 6c       	ori	r18, 0xC0	; 192
    1af8:	fc 01       	movw	r30, r24
    1afa:	20 83       	st	Z, r18
    {
        ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 16Mhz F_CPU / 128 prescaler = 125Khz ADC clock source
    }
    else if(F_CPU == 7372800)
    {
        ADCSRA |= (1 << ADPS2) | (1 << ADPS1); // 8Mhz F_CPU / 64 prescaler = 125Khz ADC clock source
    1afc:	8a e7       	ldi	r24, 0x7A	; 122
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	fc 01       	movw	r30, r24
    1b02:	20 81       	ld	r18, Z
    1b04:	8a e7       	ldi	r24, 0x7A	; 122
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	26 60       	ori	r18, 0x06	; 6
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	20 83       	st	Z, r18
        ADCSRA &= ~(1 << ADPS0);
    1b0e:	8a e7       	ldi	r24, 0x7A	; 122
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	fc 01       	movw	r30, r24
    1b14:	20 81       	ld	r18, Z
    1b16:	8a e7       	ldi	r24, 0x7A	; 122
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	2e 7f       	andi	r18, 0xFE	; 254
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	20 83       	st	Z, r18
    else
    {
        ADCSRA |= (1 << ADPS1) | (1 << ADPS0); // 1Mhz F_CPU / 8 prescaler = 125Khz ADC clock source
        ADCSRA &= ~(1 << ADPS2);
    }
}
    1b20:	00 00       	nop
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <check_temperature>:
//*******************************************************************************************************************


//********************************************************************************************************************
void check_temperature(void)
{
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	28 97       	sbiw	r28, 0x08	; 8
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61

    static uint32_t time_stamp_s = 0;
    static uint8_t flag = 0;
    if(flag == 1)
    1b3c:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <flag.3>
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <check_temperature+0x1e>
    1b44:	47 c0       	rjmp	.+142    	; 0x1bd4 <check_temperature+0xac>
        return;
    if(get_report_temperature() == 0)
    1b46:	0e 94 a5 11 	call	0x234a	; 0x234a <get_report_temperature>
    1b4a:	88 23       	and	r24, r24
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <check_temperature+0x28>
    1b4e:	44 c0       	rjmp	.+136    	; 0x1bd8 <check_temperature+0xb0>
        return;
    if(get_time_s() > (time_stamp_s + 60))
    1b50:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    1b54:	69 83       	std	Y+1, r22	; 0x01
    1b56:	7a 83       	std	Y+2, r23	; 0x02
    1b58:	8b 83       	std	Y+3, r24	; 0x03
    1b5a:	9c 83       	std	Y+4, r25	; 0x04
    1b5c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <time_stamp_s.2>
    1b60:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <time_stamp_s.2+0x1>
    1b64:	a0 91 c5 01 	lds	r26, 0x01C5	; 0x8001c5 <time_stamp_s.2+0x2>
    1b68:	b0 91 c6 01 	lds	r27, 0x01C6	; 0x8001c6 <time_stamp_s.2+0x3>
    1b6c:	cc 96       	adiw	r24, 0x3c	; 60
    1b6e:	a1 1d       	adc	r26, r1
    1b70:	b1 1d       	adc	r27, r1
    1b72:	29 81       	ldd	r18, Y+1	; 0x01
    1b74:	3a 81       	ldd	r19, Y+2	; 0x02
    1b76:	4b 81       	ldd	r20, Y+3	; 0x03
    1b78:	5c 81       	ldd	r21, Y+4	; 0x04
    1b7a:	82 17       	cp	r24, r18
    1b7c:	93 07       	cpc	r25, r19
    1b7e:	a4 07       	cpc	r26, r20
    1b80:	b5 07       	cpc	r27, r21
    1b82:	58 f5       	brcc	.+86     	; 0x1bda <check_temperature+0xb2>
    {
        time_stamp_s = get_time_s();
    1b84:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    1b88:	6d 83       	std	Y+5, r22	; 0x05
    1b8a:	7e 83       	std	Y+6, r23	; 0x06
    1b8c:	8f 83       	std	Y+7, r24	; 0x07
    1b8e:	98 87       	std	Y+8, r25	; 0x08
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	af 81       	ldd	r26, Y+7	; 0x07
    1b96:	b8 85       	ldd	r27, Y+8	; 0x08
    1b98:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <time_stamp_s.2>
    1b9c:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <time_stamp_s.2+0x1>
    1ba0:	a0 93 c5 01 	sts	0x01C5, r26	; 0x8001c5 <time_stamp_s.2+0x2>
    1ba4:	b0 93 c6 01 	sts	0x01C6, r27	; 0x8001c6 <time_stamp_s.2+0x3>
//        char tt[5];
//        itoa(analog_read(INT_TEMP), tt, 10);
//        softuart_puts_ln(tt);
        if(analog_read(INT_TEMP) > 70)
    1ba8:	88 e0       	ldi	r24, 0x08	; 8
    1baa:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <analog_read>
    1bae:	87 34       	cpi	r24, 0x47	; 71
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	9c f0       	brlt	.+38     	; 0x1bda <check_temperature+0xb2>
        {
            flag = 1;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <flag.3>
            softuart_puts_p(PSTR("Alarm! TEMPERATURE!!!"));
    1bba:	8d e9       	ldi	r24, 0x9D	; 157
    1bbc:	93 e0       	ldi	r25, 0x03	; 3
    1bbe:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
//            if(get_accept_calls() == 1)
//                alarm_play_file(ALARM_TEMPERATURE);
            if(get_accept_sms() == 1)
    1bc2:	0e 94 07 11 	call	0x220e	; 0x220e <get_accept_sms>
    1bc6:	81 30       	cpi	r24, 0x01	; 1
    1bc8:	41 f4       	brne	.+16     	; 0x1bda <check_temperature+0xb2>
                send_sms_admins(PSTR("Alarm! TEMPERATURE > 70"));
    1bca:	83 eb       	ldi	r24, 0xB3	; 179
    1bcc:	93 e0       	ldi	r25, 0x03	; 3
    1bce:	0e 94 9f 19 	call	0x333e	; 0x333e <send_sms_admins>
    1bd2:	03 c0       	rjmp	.+6      	; 0x1bda <check_temperature+0xb2>
        return;
    1bd4:	00 00       	nop
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <check_temperature+0xb2>
        return;
    1bd8:	00 00       	nop
        }
    }
}
    1bda:	28 96       	adiw	r28, 0x08	; 8
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	de bf       	out	0x3e, r29	; 62
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	cd bf       	out	0x3d, r28	; 61
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	08 95       	ret

00001bec <analog_read>:

//***********************************************************************************************
int16_t analog_read(uint8_t input)
{
    1bec:	0f 93       	push	r16
    1bee:	1f 93       	push	r17
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	cd b7       	in	r28, 0x3d	; 61
    1bf6:	de b7       	in	r29, 0x3e	; 62
    1bf8:	61 97       	sbiw	r28, 0x11	; 17
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	de bf       	out	0x3e, r29	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	cd bf       	out	0x3d, r28	; 61
    1c04:	89 87       	std	Y+9, r24	; 0x09

    uint16_t ADC_cache=0, i;
    1c06:	18 86       	std	Y+8, r1	; 0x08
    1c08:	1f 82       	std	Y+7, r1	; 0x07
    long buffer=0;
    1c0a:	1b 82       	std	Y+3, r1	; 0x03
    1c0c:	1c 82       	std	Y+4, r1	; 0x04
    1c0e:	1d 82       	std	Y+5, r1	; 0x05
    1c10:	1e 82       	std	Y+6, r1	; 0x06
    ADMUX &=  (~(1<<MUX3)) & (~(1<<MUX2)) & (~(1<<MUX1)) & (~(1<<MUX0));
    1c12:	8c e7       	ldi	r24, 0x7C	; 124
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	dc 01       	movw	r26, r24
    1c18:	2c 91       	ld	r18, X
    1c1a:	8c e7       	ldi	r24, 0x7C	; 124
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	20 7f       	andi	r18, 0xF0	; 240
    1c20:	fc 01       	movw	r30, r24
    1c22:	20 83       	st	Z, r18
    // Select the ADC reference voltage and channel. Must be done everytime because ADMUX can be overwritten in meantime
    if(input == INT_TEMP)
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	88 30       	cpi	r24, 0x08	; 8
    1c28:	51 f4       	brne	.+20     	; 0x1c3e <analog_read+0x52>
        ADMUX |= (1<<MUX3);         // ADC channel 8 - temperature sensor
    1c2a:	8c e7       	ldi	r24, 0x7C	; 124
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	dc 01       	movw	r26, r24
    1c30:	2c 91       	ld	r18, X
    1c32:	8c e7       	ldi	r24, 0x7C	; 124
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	28 60       	ori	r18, 0x08	; 8
    1c38:	fc 01       	movw	r30, r24
    1c3a:	20 83       	st	Z, r18
    1c3c:	0c c0       	rjmp	.+24     	; 0x1c56 <analog_read+0x6a>
    else if(input == BATTERY)
    1c3e:	89 85       	ldd	r24, Y+9	; 0x09
    1c40:	85 30       	cpi	r24, 0x05	; 5
    1c42:	49 f4       	brne	.+18     	; 0x1c56 <analog_read+0x6a>
        ADMUX |= (1<<MUX2) | (1<<MUX0);
    1c44:	8c e7       	ldi	r24, 0x7C	; 124
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	dc 01       	movw	r26, r24
    1c4a:	2c 91       	ld	r18, X
    1c4c:	8c e7       	ldi	r24, 0x7C	; 124
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	25 60       	ori	r18, 0x05	; 5
    1c52:	fc 01       	movw	r30, r24
    1c54:	20 83       	st	Z, r18
    ADCSRA |= (1 << ADEN);  // Power up the ADC
    1c56:	8a e7       	ldi	r24, 0x7A	; 122
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	2c 91       	ld	r18, X
    1c5e:	8a e7       	ldi	r24, 0x7A	; 122
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	20 68       	ori	r18, 0x80	; 128
    1c64:	fc 01       	movw	r30, r24
    1c66:	20 83       	st	Z, r18
    ADCSRA |= (1 << ADIE);  // Enable the ADC Interrupt
    1c68:	8a e7       	ldi	r24, 0x7A	; 122
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	2c 91       	ld	r18, X
    1c70:	8a e7       	ldi	r24, 0x7A	; 122
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	28 60       	ori	r18, 0x08	; 8
    1c76:	fc 01       	movw	r30, r24
    1c78:	20 83       	st	Z, r18

    SMCR |= (1 << SM0);    // ADC Noise Reduction Sleep Mode
    1c7a:	83 e5       	ldi	r24, 0x53	; 83
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	dc 01       	movw	r26, r24
    1c80:	2c 91       	ld	r18, X
    1c82:	83 e5       	ldi	r24, 0x53	; 83
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	22 60       	ori	r18, 0x02	; 2
    1c88:	fc 01       	movw	r30, r24
    1c8a:	20 83       	st	Z, r18
    delay_ms(20);         // Wait for voltages to become stable
    1c8c:	84 e1       	ldi	r24, 0x14	; 20
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
    ADCSRA |= (1 << ADSC);  // Start converting
    1c94:	8a e7       	ldi	r24, 0x7A	; 122
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	dc 01       	movw	r26, r24
    1c9a:	2c 91       	ld	r18, X
    1c9c:	8a e7       	ldi	r24, 0x7A	; 122
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	20 64       	ori	r18, 0x40	; 64
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	20 83       	st	Z, r18

    // Take a reading and discard the first sample to prevent errors
    while(ADCSRA & (1 << ADSC));
    1ca6:	00 00       	nop
    1ca8:	8a e7       	ldi	r24, 0x7A	; 122
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	dc 01       	movw	r26, r24
    1cae:	8c 91       	ld	r24, X
    1cb0:	88 2f       	mov	r24, r24
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	80 74       	andi	r24, 0x40	; 64
    1cb6:	99 27       	eor	r25, r25
    1cb8:	89 2b       	or	r24, r25
    1cba:	b1 f7       	brne	.-20     	; 0x1ca8 <analog_read+0xbc>

    for(i=CHIP_TEMP_NR_OF_SAMPLES; i>0; i--)
    1cbc:	82 e3       	ldi	r24, 0x32	; 50
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	9a 83       	std	Y+2, r25	; 0x02
    1cc2:	89 83       	std	Y+1, r24	; 0x01
    1cc4:	3c c0       	rjmp	.+120    	; 0x1d3e <analog_read+0x152>
    {
        // Enter Sleep Mode (ADC Noise Reduction Sleep Mode) and Start a new conversion
        SMCR |= (1 << SE);
    1cc6:	83 e5       	ldi	r24, 0x53	; 83
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	fc 01       	movw	r30, r24
    1ccc:	20 81       	ld	r18, Z
    1cce:	83 e5       	ldi	r24, 0x53	; 83
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	21 60       	ori	r18, 0x01	; 1
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	2c 93       	st	X, r18

        // Wait for ADC conversion
        while(ADCSRA & (1 << ADSC)); // ADSC is cleared when the conversion finishes
    1cd8:	00 00       	nop
    1cda:	8a e7       	ldi	r24, 0x7A	; 122
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	fc 01       	movw	r30, r24
    1ce0:	80 81       	ld	r24, Z
    1ce2:	88 2f       	mov	r24, r24
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	80 74       	andi	r24, 0x40	; 64
    1ce8:	99 27       	eor	r25, r25
    1cea:	89 2b       	or	r24, r25
    1cec:	b1 f7       	brne	.-20     	; 0x1cda <analog_read+0xee>

        // After the Sleep Mode this bit must be set to 0 according to the datasheet
        SMCR &= ~(1 << SE);
    1cee:	83 e5       	ldi	r24, 0x53	; 83
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	2c 91       	ld	r18, X
    1cf6:	83 e5       	ldi	r24, 0x53	; 83
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	2e 7f       	andi	r18, 0xFE	; 254
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	20 83       	st	Z, r18

        // Read register atomically in case other interrupts are enabled
        cli();
    1d00:	f8 94       	cli
        ADC_cache = ADCW;
    1d02:	88 e7       	ldi	r24, 0x78	; 120
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	dc 01       	movw	r26, r24
    1d08:	8d 91       	ld	r24, X+
    1d0a:	9c 91       	ld	r25, X
    1d0c:	98 87       	std	Y+8, r25	; 0x08
    1d0e:	8f 83       	std	Y+7, r24	; 0x07
        sei();
    1d10:	78 94       	sei

        buffer += ADC_cache;
    1d12:	8f 81       	ldd	r24, Y+7	; 0x07
    1d14:	98 85       	ldd	r25, Y+8	; 0x08
    1d16:	cc 01       	movw	r24, r24
    1d18:	a0 e0       	ldi	r26, 0x00	; 0
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	4b 81       	ldd	r20, Y+3	; 0x03
    1d1e:	5c 81       	ldd	r21, Y+4	; 0x04
    1d20:	6d 81       	ldd	r22, Y+5	; 0x05
    1d22:	7e 81       	ldd	r23, Y+6	; 0x06
    1d24:	84 0f       	add	r24, r20
    1d26:	95 1f       	adc	r25, r21
    1d28:	a6 1f       	adc	r26, r22
    1d2a:	b7 1f       	adc	r27, r23
    1d2c:	8b 83       	std	Y+3, r24	; 0x03
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	ad 83       	std	Y+5, r26	; 0x05
    1d32:	be 83       	std	Y+6, r27	; 0x06
    for(i=CHIP_TEMP_NR_OF_SAMPLES; i>0; i--)
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	89 83       	std	Y+1, r24	; 0x01
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	89 2b       	or	r24, r25
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <analog_read+0x15c>
    1d46:	bf cf       	rjmp	.-130    	; 0x1cc6 <analog_read+0xda>
    }
    //print_freeRam();
    // Shut down the ADC to save power
    ADCSRA &= ~(1 << ADEN);
    1d48:	8a e7       	ldi	r24, 0x7A	; 122
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	20 81       	ld	r18, Z
    1d50:	8a e7       	ldi	r24, 0x7A	; 122
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	2f 77       	andi	r18, 0x7F	; 127
    1d56:	dc 01       	movw	r26, r24
    1d58:	2c 93       	st	X, r18
    if(input == INT_TEMP)
    1d5a:	89 85       	ldd	r24, Y+9	; 0x09
    1d5c:	88 30       	cpi	r24, 0x08	; 8
    1d5e:	c9 f4       	brne	.+50     	; 0x1d92 <analog_read+0x1a6>
        return ((buffer / CHIP_TEMP_NR_OF_SAMPLES) + CHIP_TEMP_ERROR_OFFSET) - 273;
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	9c 81       	ldd	r25, Y+4	; 0x04
    1d64:	ad 81       	ldd	r26, Y+5	; 0x05
    1d66:	be 81       	ldd	r27, Y+6	; 0x06
    1d68:	8a 87       	std	Y+10, r24	; 0x0a
    1d6a:	9b 87       	std	Y+11, r25	; 0x0b
    1d6c:	ac 87       	std	Y+12, r26	; 0x0c
    1d6e:	bd 87       	std	Y+13, r27	; 0x0d
    1d70:	02 e3       	ldi	r16, 0x32	; 50
    1d72:	10 e0       	ldi	r17, 0x00	; 0
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	6a 85       	ldd	r22, Y+10	; 0x0a
    1d7a:	7b 85       	ldd	r23, Y+11	; 0x0b
    1d7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d7e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d80:	a9 01       	movw	r20, r18
    1d82:	98 01       	movw	r18, r16
    1d84:	0e 94 99 31 	call	0x6332	; 0x6332 <__divmodsi4>
    1d88:	da 01       	movw	r26, r20
    1d8a:	c9 01       	movw	r24, r18
    1d8c:	8e 53       	subi	r24, 0x3E	; 62
    1d8e:	91 40       	sbci	r25, 0x01	; 1
    1d90:	1c c0       	rjmp	.+56     	; 0x1dca <analog_read+0x1de>
    else if(input == BATTERY)
    1d92:	89 85       	ldd	r24, Y+9	; 0x09
    1d94:	85 30       	cpi	r24, 0x05	; 5
    1d96:	b9 f4       	brne	.+46     	; 0x1dc6 <analog_read+0x1da>
        return (buffer / CHIP_TEMP_NR_OF_SAMPLES);
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	ad 81       	ldd	r26, Y+5	; 0x05
    1d9e:	be 81       	ldd	r27, Y+6	; 0x06
    1da0:	8e 87       	std	Y+14, r24	; 0x0e
    1da2:	9f 87       	std	Y+15, r25	; 0x0f
    1da4:	a8 8b       	std	Y+16, r26	; 0x10
    1da6:	b9 8b       	std	Y+17, r27	; 0x11
    1da8:	02 e3       	ldi	r16, 0x32	; 50
    1daa:	10 e0       	ldi	r17, 0x00	; 0
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	6e 85       	ldd	r22, Y+14	; 0x0e
    1db2:	7f 85       	ldd	r23, Y+15	; 0x0f
    1db4:	88 89       	ldd	r24, Y+16	; 0x10
    1db6:	99 89       	ldd	r25, Y+17	; 0x11
    1db8:	a9 01       	movw	r20, r18
    1dba:	98 01       	movw	r18, r16
    1dbc:	0e 94 99 31 	call	0x6332	; 0x6332 <__divmodsi4>
    1dc0:	da 01       	movw	r26, r20
    1dc2:	c9 01       	movw	r24, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <analog_read+0x1de>
    return 0;
    1dc6:	80 e0       	ldi	r24, 0x00	; 0
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
}
    1dca:	61 96       	adiw	r28, 0x11	; 17
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	1f 91       	pop	r17
    1ddc:	0f 91       	pop	r16
    1dde:	08 95       	ret

00001de0 <__vector_21>:

ISR(ADC_vect)
{
    1de0:	1f 92       	push	r1
    1de2:	0f 92       	push	r0
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	0f 92       	push	r0
    1de8:	11 24       	eor	r1, r1
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62

}
    1df2:	00 00       	nop
    1df4:	df 91       	pop	r29
    1df6:	cf 91       	pop	r28
    1df8:	0f 90       	pop	r0
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	0f 90       	pop	r0
    1dfe:	1f 90       	pop	r1
    1e00:	18 95       	reti

00001e02 <freeRam>:

//*****************************************************************************
static int freeRam ();
static int freeRam ()
{
    1e02:	cf 93       	push	r28
    1e04:	df 93       	push	r29
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <freeRam+0x6>
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    extern int __heap_start, *__brkval;
    int v;
    return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
    1e0c:	9e 01       	movw	r18, r28
    1e0e:	2f 5f       	subi	r18, 0xFF	; 255
    1e10:	3f 4f       	sbci	r19, 0xFF	; 255
    1e12:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <__brkval>
    1e16:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <__brkval+0x1>
    1e1a:	89 2b       	or	r24, r25
    1e1c:	29 f0       	breq	.+10     	; 0x1e28 <freeRam+0x26>
    1e1e:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <__brkval>
    1e22:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <__brkval+0x1>
    1e26:	02 c0       	rjmp	.+4      	; 0x1e2c <freeRam+0x2a>
    1e28:	8e e5       	ldi	r24, 0x5E	; 94
    1e2a:	94 e0       	ldi	r25, 0x04	; 4
    1e2c:	a9 01       	movw	r20, r18
    1e2e:	48 1b       	sub	r20, r24
    1e30:	59 0b       	sbc	r21, r25
    1e32:	ca 01       	movw	r24, r20
}
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	08 95       	ret

00001e3e <print_freeRam>:


void print_freeRam(void)
{
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
    1e46:	2a 97       	sbiw	r28, 0x0a	; 10
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
    char ch[10];
    itoa(freeRam(), ch, 10);
    1e52:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <freeRam>
    1e56:	9c 01       	movw	r18, r24
    1e58:	4a e0       	ldi	r20, 0x0A	; 10
    1e5a:	50 e0       	ldi	r21, 0x00	; 0
    1e5c:	ce 01       	movw	r24, r28
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	bc 01       	movw	r22, r24
    1e62:	c9 01       	movw	r24, r18
    1e64:	0e 94 34 35 	call	0x6a68	; 0x6a68 <itoa>
    softuart_puts("free=");
    1e68:	8e e2       	ldi	r24, 0x2E	; 46
    1e6a:	91 e0       	ldi	r25, 0x01	; 1
    1e6c:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <softuart_puts>
    softuart_puts_ln(ch);
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <softuart_puts_ln>
}
    1e78:	00 00       	nop
    1e7a:	2a 96       	adiw	r28, 0x0a	; 10
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	08 95       	ret

00001e8c <EEPROM_write>:

static config_t *p_config = &config;
//*******************************************************************************************************************
// здесь обязательно нужен высокий уровень оптимизации, т.к. между записями EEMWE EEWE должно быть не более 4 тактов
void __attribute__((optimize("-O3"))) EEPROM_write(uint16_t address, uint8_t data)
{
    1e8c:	9c 01       	movw	r18, r24
    char tsreg;
    tsreg = SREG;
    1e8e:	8f b7       	in	r24, 0x3f	; 63
    cli();
    1e90:	f8 94       	cli
    while(EECR & (1<<EEPE)); // Wait for completion of previous write
    1e92:	f9 99       	sbic	0x1f, 1	; 31
    1e94:	fe cf       	rjmp	.-4      	; 0x1e92 <EEPROM_write+0x6>
    EEAR = address; // Set up address and data registers
    1e96:	32 bd       	out	0x22, r19	; 34
    1e98:	21 bd       	out	0x21, r18	; 33
    EEDR = data;
    1e9a:	60 bd       	out	0x20, r22	; 32
    EECR = (1<<EEMPE); // Write logical one to EEMWE
    1e9c:	94 e0       	ldi	r25, 0x04	; 4
    1e9e:	9f bb       	out	0x1f, r25	; 31
    EECR = (1<<EEPE); // Start eeprom write by setting EEWE
    1ea0:	92 e0       	ldi	r25, 0x02	; 2
    1ea2:	9f bb       	out	0x1f, r25	; 31
    SREG = tsreg;
    1ea4:	8f bf       	out	0x3f, r24	; 63
}
    1ea6:	08 95       	ret

00001ea8 <EEPROM_read>:
//    EECR |= (1<<EEPE);
//}
//*******************************************************************************************************************

uint8_t EEPROM_read(uint16_t address)
{
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	00 d0       	rcall	.+0      	; 0x1eae <EEPROM_read+0x6>
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	9a 83       	std	Y+2, r25	; 0x02
    1eb4:	89 83       	std	Y+1, r24	; 0x01
    while(EECR & (1<<EEPE)); // Wait for completion of previous write
    1eb6:	00 00       	nop
    1eb8:	8f e3       	ldi	r24, 0x3F	; 63
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	80 81       	ld	r24, Z
    1ec0:	88 2f       	mov	r24, r24
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	82 70       	andi	r24, 0x02	; 2
    1ec6:	99 27       	eor	r25, r25
    1ec8:	89 2b       	or	r24, r25
    1eca:	b1 f7       	brne	.-20     	; 0x1eb8 <EEPROM_read+0x10>
    EEAR = address; // Set up address register
    1ecc:	81 e4       	ldi	r24, 0x41	; 65
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	29 81       	ldd	r18, Y+1	; 0x01
    1ed2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ed4:	fc 01       	movw	r30, r24
    1ed6:	31 83       	std	Z+1, r19	; 0x01
    1ed8:	20 83       	st	Z, r18
    EECR |= (1<<EERE); // Start eeprom read by writing EERE
    1eda:	8f e3       	ldi	r24, 0x3F	; 63
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	fc 01       	movw	r30, r24
    1ee0:	20 81       	ld	r18, Z
    1ee2:	8f e3       	ldi	r24, 0x3F	; 63
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	21 60       	ori	r18, 0x01	; 1
    1ee8:	fc 01       	movw	r30, r24
    1eea:	20 83       	st	Z, r18
    return EEDR; // Return data from data register
    1eec:	80 e4       	ldi	r24, 0x40	; 64
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	fc 01       	movw	r30, r24
    1ef2:	80 81       	ld	r24, Z
}
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	08 95       	ret

00001efe <EEPROM_write_buf>:
//*******************************************************************************************************************

void EEPROM_write_buf(char *buf, uint16_t len, uint16_t address)
{
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <EEPROM_write_buf+0x6>
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <EEPROM_write_buf+0x8>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <EEPROM_write_buf+0xa>
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	7c 83       	std	Y+4, r23	; 0x04
    1f12:	6b 83       	std	Y+3, r22	; 0x03
    1f14:	5e 83       	std	Y+6, r21	; 0x06
    1f16:	4d 83       	std	Y+5, r20	; 0x05
    while(len--)
    1f18:	14 c0       	rjmp	.+40     	; 0x1f42 <EEPROM_write_buf+0x44>
        EEPROM_write(address++, *buf++);
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1e:	9c 01       	movw	r18, r24
    1f20:	2f 5f       	subi	r18, 0xFF	; 255
    1f22:	3f 4f       	sbci	r19, 0xFF	; 255
    1f24:	3a 83       	std	Y+2, r19	; 0x02
    1f26:	29 83       	std	Y+1, r18	; 0x01
    1f28:	fc 01       	movw	r30, r24
    1f2a:	80 81       	ld	r24, Z
    1f2c:	48 2f       	mov	r20, r24
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	9c 01       	movw	r18, r24
    1f34:	2f 5f       	subi	r18, 0xFF	; 255
    1f36:	3f 4f       	sbci	r19, 0xFF	; 255
    1f38:	3e 83       	std	Y+6, r19	; 0x06
    1f3a:	2d 83       	std	Y+5, r18	; 0x05
    1f3c:	64 2f       	mov	r22, r20
    1f3e:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <EEPROM_write>
    while(len--)
    1f42:	8b 81       	ldd	r24, Y+3	; 0x03
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	9c 01       	movw	r18, r24
    1f48:	21 50       	subi	r18, 0x01	; 1
    1f4a:	31 09       	sbc	r19, r1
    1f4c:	3c 83       	std	Y+4, r19	; 0x04
    1f4e:	2b 83       	std	Y+3, r18	; 0x03
    1f50:	89 2b       	or	r24, r25
    1f52:	19 f7       	brne	.-58     	; 0x1f1a <EEPROM_write_buf+0x1c>
}
    1f54:	00 00       	nop
    1f56:	00 00       	nop
    1f58:	26 96       	adiw	r28, 0x06	; 6
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	08 95       	ret

00001f6a <EEPROM_read_buf>:

//*******************************************************************************************************************

void EEPROM_read_buf(char *buf, uint16_t len, uint16_t address)
{
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <EEPROM_read_buf+0x6>
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <EEPROM_read_buf+0x8>
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <EEPROM_read_buf+0xa>
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	7c 83       	std	Y+4, r23	; 0x04
    1f7e:	6b 83       	std	Y+3, r22	; 0x03
    1f80:	5e 83       	std	Y+6, r21	; 0x06
    1f82:	4d 83       	std	Y+5, r20	; 0x05
    while(len--)
    1f84:	14 c0       	rjmp	.+40     	; 0x1fae <EEPROM_read_buf+0x44>
        *buf++ = EEPROM_read(address++);
    1f86:	8d 81       	ldd	r24, Y+5	; 0x05
    1f88:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8a:	9c 01       	movw	r18, r24
    1f8c:	2f 5f       	subi	r18, 0xFF	; 255
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	3e 83       	std	Y+6, r19	; 0x06
    1f92:	2d 83       	std	Y+5, r18	; 0x05
    1f94:	0e 94 54 0f 	call	0x1ea8	; 0x1ea8 <EEPROM_read>
    1f98:	48 2f       	mov	r20, r24
    1f9a:	89 81       	ldd	r24, Y+1	; 0x01
    1f9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9e:	9c 01       	movw	r18, r24
    1fa0:	2f 5f       	subi	r18, 0xFF	; 255
    1fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa4:	3a 83       	std	Y+2, r19	; 0x02
    1fa6:	29 83       	std	Y+1, r18	; 0x01
    1fa8:	24 2f       	mov	r18, r20
    1faa:	fc 01       	movw	r30, r24
    1fac:	20 83       	st	Z, r18
    while(len--)
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	9c 01       	movw	r18, r24
    1fb4:	21 50       	subi	r18, 0x01	; 1
    1fb6:	31 09       	sbc	r19, r1
    1fb8:	3c 83       	std	Y+4, r19	; 0x04
    1fba:	2b 83       	std	Y+3, r18	; 0x03
    1fbc:	89 2b       	or	r24, r25
    1fbe:	19 f7       	brne	.-58     	; 0x1f86 <EEPROM_read_buf+0x1c>
}
    1fc0:	00 00       	nop
    1fc2:	00 00       	nop
    1fc4:	26 96       	adiw	r28, 0x06	; 6
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <eeprom_read_config>:

//*******************************************************************************************************************

void eeprom_read_config(uint8_t start)
{
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	0f 92       	push	r0
    1fdc:	cd b7       	in	r28, 0x3d	; 61
    1fde:	de b7       	in	r29, 0x3e	; 62
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    eeprom_read_block((void*)&config, 0, sizeof(config_t));
    1fe2:	44 e5       	ldi	r20, 0x54	; 84
    1fe4:	50 e0       	ldi	r21, 0x00	; 0
    1fe6:	60 e0       	ldi	r22, 0x00	; 0
    1fe8:	70 e0       	ldi	r23, 0x00	; 0
    1fea:	87 ec       	ldi	r24, 0xC7	; 199
    1fec:	91 e0       	ldi	r25, 0x01	; 1
    1fee:	0e 94 19 38 	call	0x7032	; 0x7032 <eeprom_read_block>
    //softuart_puts_p(PSTR("eeprom\r\n"));
    //EEPROM_read_buf((char*)&config, sizeof(config_t), 0);
    if(p_config->first_usage != 0xAB)
    1ff2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    1ff6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    1ffa:	84 5b       	subi	r24, 0xB4	; 180
    1ffc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffe:	fc 01       	movw	r30, r24
    2000:	80 81       	ld	r24, Z
    2002:	8b 3a       	cpi	r24, 0xAB	; 171
    2004:	09 f4       	brne	.+2      	; 0x2008 <eeprom_read_config+0x32>
    2006:	61 c0       	rjmp	.+194    	; 0x20ca <eeprom_read_config+0xf4>
    {
        softuart_puts_p(PSTR("eeprom_read_config\r\n"));
    2008:	8b ec       	ldi	r24, 0xCB	; 203
    200a:	93 e0       	ldi	r25, 0x03	; 3
    200c:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
        memset(&config, 0, sizeof(config_t));
    2010:	44 e5       	ldi	r20, 0x54	; 84
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	87 ec       	ldi	r24, 0xC7	; 199
    201a:	91 e0       	ldi	r25, 0x01	; 1
    201c:	0e 94 ce 34 	call	0x699c	; 0x699c <memset>
        p_config->interval_power_off_report_m = 1;
    2020:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    2024:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    2028:	80 5b       	subi	r24, 0xB0	; 176
    202a:	9f 4f       	sbci	r25, 0xFF	; 255
    202c:	21 e0       	ldi	r18, 0x01	; 1
    202e:	fc 01       	movw	r30, r24
    2030:	20 83       	st	Z, r18
        p_config->interval_power_on_report_m = 2;
    2032:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    2036:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    203a:	8f 5a       	subi	r24, 0xAF	; 175
    203c:	9f 4f       	sbci	r25, 0xFF	; 255
    203e:	22 e0       	ldi	r18, 0x02	; 2
    2040:	fc 01       	movw	r30, r24
    2042:	20 83       	st	Z, r18
        p_config->accept_calls = 1;
    2044:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    2048:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    204c:	83 5b       	subi	r24, 0xB3	; 179
    204e:	9f 4f       	sbci	r25, 0xFF	; 255
    2050:	21 e0       	ldi	r18, 0x01	; 1
    2052:	fc 01       	movw	r30, r24
    2054:	20 83       	st	Z, r18
        p_config->accept_sms = 1;
    2056:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    205a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    205e:	82 5b       	subi	r24, 0xB2	; 178
    2060:	9f 4f       	sbci	r25, 0xFF	; 255
    2062:	21 e0       	ldi	r18, 0x01	; 1
    2064:	fc 01       	movw	r30, r24
    2066:	20 83       	st	Z, r18
        p_config->mode_gsm = GSM_ON_UTKINA;
    2068:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    206c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    2070:	85 5b       	subi	r24, 0xB5	; 181
    2072:	9f 4f       	sbci	r25, 0xFF	; 255
    2074:	21 e0       	ldi	r18, 0x01	; 1
    2076:	fc 01       	movw	r30, r24
    2078:	20 83       	st	Z, r18
        p_config->first_usage = 0xAB;
    207a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    207e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    2082:	84 5b       	subi	r24, 0xB4	; 180
    2084:	9f 4f       	sbci	r25, 0xFF	; 255
    2086:	2b ea       	ldi	r18, 0xAB	; 171
    2088:	fc 01       	movw	r30, r24
    208a:	20 83       	st	Z, r18
        p_config->report_temperature = 1;
    208c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    2090:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    2094:	8e 5a       	subi	r24, 0xAE	; 174
    2096:	9f 4f       	sbci	r25, 0xFF	; 255
    2098:	21 e0       	ldi	r18, 0x01	; 1
    209a:	fc 01       	movw	r30, r24
    209c:	20 83       	st	Z, r18
        p_config->pause_relay = 5;
    209e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    20a2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    20a6:	8d 5a       	subi	r24, 0xAD	; 173
    20a8:	9f 4f       	sbci	r25, 0xFF	; 255
    20aa:	25 e0       	ldi	r18, 0x05	; 5
    20ac:	fc 01       	movw	r30, r24
    20ae:	20 83       	st	Z, r18
        memcpy(p_config->admin_phone[0], "+380713318090", 13);
    20b0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    20b4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    20b8:	05 96       	adiw	r24, 0x05	; 5
    20ba:	4d e0       	ldi	r20, 0x0D	; 13
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	6a e9       	ldi	r22, 0x9A	; 154
    20c0:	71 e0       	ldi	r23, 0x01	; 1
    20c2:	0e 94 b3 34 	call	0x6966	; 0x6966 <memcpy>
        //strcpy(p_config->admin_phone[0], "+380713318090");
        eeprom_save_config();
    20c6:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <eeprom_save_config>
    if(start)
    {
        //softuart_puts_p(PSTR("eeprom end\r\n"));
//        set_time_from_motion_s(config.time_from_motion_s);
    }
}
    20ca:	00 00       	nop
    20cc:	0f 90       	pop	r0
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	08 95       	ret

000020d4 <eeprom_save_config>:

//*******************************************************************************************************************

void eeprom_save_config(void)
{
    20d4:	cf 93       	push	r28
    20d6:	df 93       	push	r29
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
//    config.time_from_motion_s = get_time_from_motion_s();
    //EEPROM_write_buf((char*)&config, sizeof(config_t), 0);
    eeprom_write_block((void*)&config, 0, sizeof(config_t));
    20dc:	44 e5       	ldi	r20, 0x54	; 84
    20de:	50 e0       	ldi	r21, 0x00	; 0
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	87 ec       	ldi	r24, 0xC7	; 199
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	0e 94 4b 38 	call	0x7096	; 0x7096 <eeprom_write_block>
}
    20ec:	00 00       	nop
    20ee:	df 91       	pop	r29
    20f0:	cf 91       	pop	r28
    20f2:	08 95       	ret

000020f4 <EEPROM_update>:


//*******************************************************************************************************************

void EEPROM_update(void)
{
    20f4:	cf 93       	push	r28
    20f6:	df 93       	push	r29
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    eeprom_update_block((void*)&config, 0, sizeof(config_t));
    20fc:	44 e5       	ldi	r20, 0x54	; 84
    20fe:	50 e0       	ldi	r21, 0x00	; 0
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	87 ec       	ldi	r24, 0xC7	; 199
    2106:	91 e0       	ldi	r25, 0x01	; 1
    2108:	0e 94 29 38 	call	0x7052	; 0x7052 <eeprom_update_block>
}
    210c:	00 00       	nop
    210e:	df 91       	pop	r29
    2110:	cf 91       	pop	r28
    2112:	08 95       	ret

00002114 <get_interval_power_off_report>:



//***********************************************
uint8_t get_interval_power_off_report(void)
{
    2114:	cf 93       	push	r28
    2116:	df 93       	push	r29
    2118:	cd b7       	in	r28, 0x3d	; 61
    211a:	de b7       	in	r29, 0x3e	; 62
    return p_config->interval_power_off_report_m;
    211c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    2120:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    2124:	80 5b       	subi	r24, 0xB0	; 176
    2126:	9f 4f       	sbci	r25, 0xFF	; 255
    2128:	fc 01       	movw	r30, r24
    212a:	80 81       	ld	r24, Z
}
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <set_interval_power_off_report>:
void set_interval_power_off_report(uint8_t minute)
{
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	0f 92       	push	r0
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	89 83       	std	Y+1, r24	; 0x01
    p_config->interval_power_off_report_m = minute;
    213e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    2142:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    2146:	80 5b       	subi	r24, 0xB0	; 176
    2148:	9f 4f       	sbci	r25, 0xFF	; 255
    214a:	29 81       	ldd	r18, Y+1	; 0x01
    214c:	fc 01       	movw	r30, r24
    214e:	20 83       	st	Z, r18
}
    2150:	00 00       	nop
    2152:	0f 90       	pop	r0
    2154:	df 91       	pop	r29
    2156:	cf 91       	pop	r28
    2158:	08 95       	ret

0000215a <get_interval_power_on_report>:
//***********************************************
uint8_t get_interval_power_on_report(void)
{
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    return p_config->interval_power_on_report_m;
    2162:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    2166:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    216a:	8f 5a       	subi	r24, 0xAF	; 175
    216c:	9f 4f       	sbci	r25, 0xFF	; 255
    216e:	fc 01       	movw	r30, r24
    2170:	80 81       	ld	r24, Z
}
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	08 95       	ret

00002178 <set_interval_power_on_report>:
void set_interval_power_on_report(uint8_t minute)
{
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	0f 92       	push	r0
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	89 83       	std	Y+1, r24	; 0x01
    p_config->interval_power_on_report_m = minute;
    2184:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    2188:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    218c:	8f 5a       	subi	r24, 0xAF	; 175
    218e:	9f 4f       	sbci	r25, 0xFF	; 255
    2190:	29 81       	ldd	r18, Y+1	; 0x01
    2192:	fc 01       	movw	r30, r24
    2194:	20 83       	st	Z, r18
}
    2196:	00 00       	nop
    2198:	0f 90       	pop	r0
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	08 95       	ret

000021a0 <set_accept_calls>:

//***********************************************
//******************************************************************
void set_accept_calls(uint8_t on_off)
{
    21a0:	cf 93       	push	r28
    21a2:	df 93       	push	r29
    21a4:	0f 92       	push	r0
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	89 83       	std	Y+1, r24	; 0x01
    p_config->accept_calls = on_off;
    21ac:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    21b0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    21b4:	83 5b       	subi	r24, 0xB3	; 179
    21b6:	9f 4f       	sbci	r25, 0xFF	; 255
    21b8:	29 81       	ldd	r18, Y+1	; 0x01
    21ba:	fc 01       	movw	r30, r24
    21bc:	20 83       	st	Z, r18
}
    21be:	00 00       	nop
    21c0:	0f 90       	pop	r0
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	08 95       	ret

000021c8 <get_accept_calls>:
uint8_t get_accept_calls(void)
{
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    return p_config->accept_calls;
    21d0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    21d4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    21d8:	83 5b       	subi	r24, 0xB3	; 179
    21da:	9f 4f       	sbci	r25, 0xFF	; 255
    21dc:	fc 01       	movw	r30, r24
    21de:	80 81       	ld	r24, Z
}
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	08 95       	ret

000021e6 <set_accept_sms>:
//**********************************************************************
void set_accept_sms(uint8_t on_off)
{
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	0f 92       	push	r0
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	89 83       	std	Y+1, r24	; 0x01
    p_config->accept_sms = on_off;
    21f2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    21f6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    21fa:	82 5b       	subi	r24, 0xB2	; 178
    21fc:	9f 4f       	sbci	r25, 0xFF	; 255
    21fe:	29 81       	ldd	r18, Y+1	; 0x01
    2200:	fc 01       	movw	r30, r24
    2202:	20 83       	st	Z, r18
}
    2204:	00 00       	nop
    2206:	0f 90       	pop	r0
    2208:	df 91       	pop	r29
    220a:	cf 91       	pop	r28
    220c:	08 95       	ret

0000220e <get_accept_sms>:
uint8_t get_accept_sms(void)
{
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    return p_config->accept_sms;
    2216:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    221a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    221e:	82 5b       	subi	r24, 0xB2	; 178
    2220:	9f 4f       	sbci	r25, 0xFF	; 255
    2222:	fc 01       	movw	r30, r24
    2224:	80 81       	ld	r24, Z
}
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	08 95       	ret

0000222c <set_mode_gsm>:
//***********************************************
//**********************************************************************
void set_mode_gsm(uint8_t on_off)
{
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	0f 92       	push	r0
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
    2236:	89 83       	std	Y+1, r24	; 0x01
    p_config->mode_gsm = on_off;
    2238:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    223c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    2240:	85 5b       	subi	r24, 0xB5	; 181
    2242:	9f 4f       	sbci	r25, 0xFF	; 255
    2244:	29 81       	ldd	r18, Y+1	; 0x01
    2246:	fc 01       	movw	r30, r24
    2248:	20 83       	st	Z, r18
}
    224a:	00 00       	nop
    224c:	0f 90       	pop	r0
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	08 95       	ret

00002254 <get_mode_gsm>:
uint8_t get_mode_gsm(void)
{
    2254:	cf 93       	push	r28
    2256:	df 93       	push	r29
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
    return p_config->mode_gsm;
    225c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    2260:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    2264:	85 5b       	subi	r24, 0xB5	; 181
    2266:	9f 4f       	sbci	r25, 0xFF	; 255
    2268:	fc 01       	movw	r30, r24
    226a:	80 81       	ld	r24, Z
}
    226c:	df 91       	pop	r29
    226e:	cf 91       	pop	r28
    2270:	08 95       	ret

00002272 <set_reset_count_mcu>:
//***********************************************

void set_reset_count_mcu(uint32_t cnt)
{
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	00 d0       	rcall	.+0      	; 0x2278 <set_reset_count_mcu+0x6>
    2278:	00 d0       	rcall	.+0      	; 0x227a <set_reset_count_mcu+0x8>
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	69 83       	std	Y+1, r22	; 0x01
    2280:	7a 83       	std	Y+2, r23	; 0x02
    2282:	8b 83       	std	Y+3, r24	; 0x03
    2284:	9c 83       	std	Y+4, r25	; 0x04
    p_config->reset_count_mcu = cnt;
    2286:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <p_config>
    228a:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <p_config+0x1>
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	ab 81       	ldd	r26, Y+3	; 0x03
    2294:	bc 81       	ldd	r27, Y+4	; 0x04
    2296:	f9 01       	movw	r30, r18
    2298:	80 83       	st	Z, r24
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	a2 83       	std	Z+2, r26	; 0x02
    229e:	b3 83       	std	Z+3, r27	; 0x03
}
    22a0:	00 00       	nop
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	08 95       	ret

000022b0 <get_reset_count_mcu>:

uint32_t get_reset_count_mcu(void)
{
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <get_reset_count_mcu+0x6>
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <get_reset_count_mcu+0x8>
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    return p_config->reset_count_mcu;
    22bc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    22c0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    22c4:	fc 01       	movw	r30, r24
    22c6:	80 81       	ld	r24, Z
    22c8:	91 81       	ldd	r25, Z+1	; 0x01
    22ca:	a2 81       	ldd	r26, Z+2	; 0x02
    22cc:	b3 81       	ldd	r27, Z+3	; 0x03
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	ab 83       	std	Y+3, r26	; 0x03
    22d4:	bc 83       	std	Y+4, r27	; 0x04
}
    22d6:	69 81       	ldd	r22, Y+1	; 0x01
    22d8:	7a 81       	ldd	r23, Y+2	; 0x02
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	08 95       	ret

000022ec <inc_reset_count_mcu>:

void inc_reset_count_mcu(void)
{
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62
    config.reset_count_mcu++;
    22f4:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <config>
    22f8:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <config+0x1>
    22fc:	a0 91 c9 01 	lds	r26, 0x01C9	; 0x8001c9 <config+0x2>
    2300:	b0 91 ca 01 	lds	r27, 0x01CA	; 0x8001ca <config+0x3>
    2304:	01 96       	adiw	r24, 0x01	; 1
    2306:	a1 1d       	adc	r26, r1
    2308:	b1 1d       	adc	r27, r1
    230a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <config>
    230e:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <config+0x1>
    2312:	a0 93 c9 01 	sts	0x01C9, r26	; 0x8001c9 <config+0x2>
    2316:	b0 93 ca 01 	sts	0x01CA, r27	; 0x8001ca <config+0x3>
}
    231a:	00 00       	nop
    231c:	df 91       	pop	r29
    231e:	cf 91       	pop	r28
    2320:	08 95       	ret

00002322 <set_report_temperature>:
//***********************************************

void set_report_temperature(uint8_t cnt)
{
    2322:	cf 93       	push	r28
    2324:	df 93       	push	r29
    2326:	0f 92       	push	r0
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	89 83       	std	Y+1, r24	; 0x01
    p_config->report_temperature = cnt;
    232e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    2332:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    2336:	8e 5a       	subi	r24, 0xAE	; 174
    2338:	9f 4f       	sbci	r25, 0xFF	; 255
    233a:	29 81       	ldd	r18, Y+1	; 0x01
    233c:	fc 01       	movw	r30, r24
    233e:	20 83       	st	Z, r18
}
    2340:	00 00       	nop
    2342:	0f 90       	pop	r0
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	08 95       	ret

0000234a <get_report_temperature>:
uint8_t get_report_temperature(void)
{
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    return p_config->report_temperature;
    2352:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    2356:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    235a:	8e 5a       	subi	r24, 0xAE	; 174
    235c:	9f 4f       	sbci	r25, 0xFF	; 255
    235e:	fc 01       	movw	r30, r24
    2360:	80 81       	ld	r24, Z
}
    2362:	df 91       	pop	r29
    2364:	cf 91       	pop	r28
    2366:	08 95       	ret

00002368 <set_first_usage>:
//***********************************************
void set_first_usage(uint8_t data)
{
    2368:	cf 93       	push	r28
    236a:	df 93       	push	r29
    236c:	0f 92       	push	r0
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	89 83       	std	Y+1, r24	; 0x01
    p_config->first_usage = data;
    2374:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    2378:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    237c:	84 5b       	subi	r24, 0xB4	; 180
    237e:	9f 4f       	sbci	r25, 0xFF	; 255
    2380:	29 81       	ldd	r18, Y+1	; 0x01
    2382:	fc 01       	movw	r30, r24
    2384:	20 83       	st	Z, r18
}
    2386:	00 00       	nop
    2388:	0f 90       	pop	r0
    238a:	df 91       	pop	r29
    238c:	cf 91       	pop	r28
    238e:	08 95       	ret

00002390 <set_pause_relay>:
//***********************************************

void set_pause_relay(uint8_t seconds)
{
    2390:	cf 93       	push	r28
    2392:	df 93       	push	r29
    2394:	0f 92       	push	r0
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	89 83       	std	Y+1, r24	; 0x01
    p_config->pause_relay = seconds;
    239c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    23a0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    23a4:	8d 5a       	subi	r24, 0xAD	; 173
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255
    23a8:	29 81       	ldd	r18, Y+1	; 0x01
    23aa:	fc 01       	movw	r30, r24
    23ac:	20 83       	st	Z, r18
}
    23ae:	00 00       	nop
    23b0:	0f 90       	pop	r0
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <get_pause_relay>:
uint8_t get_pause_relay(void)
{
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    return p_config->pause_relay;
    23c0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <p_config>
    23c4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <p_config+0x1>
    23c8:	8d 5a       	subi	r24, 0xAD	; 173
    23ca:	9f 4f       	sbci	r25, 0xFF	; 255
    23cc:	fc 01       	movw	r30, r24
    23ce:	80 81       	ld	r24, Z
}
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	08 95       	ret

000023d6 <gsm_poll_for_string>:
static void SMSdecodUCS2(char* dst, char* src, uint16_t len, uint16_t pos);
static uint8_t len_to_char(char *p_src, uint8_t end_ch);
//*******************************************************************************************************************

static char* gsm_poll_for_string(void)
{
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	29 97       	sbiw	r28, 0x09	; 9
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    static uint8_t state=0;
    static uint16_t i;
    static uint32_t time_stamp;
    unsigned char ch;

    if((get_time_s() - time_stamp) > 10)
    23ea:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    23ee:	6a 83       	std	Y+2, r22	; 0x02
    23f0:	7b 83       	std	Y+3, r23	; 0x03
    23f2:	8c 83       	std	Y+4, r24	; 0x04
    23f4:	9d 83       	std	Y+5, r25	; 0x05
    23f6:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <time_stamp.54>
    23fa:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <time_stamp.54+0x1>
    23fe:	a0 91 7d 03 	lds	r26, 0x037D	; 0x80037d <time_stamp.54+0x2>
    2402:	b0 91 7e 03 	lds	r27, 0x037E	; 0x80037e <time_stamp.54+0x3>
    2406:	2a 81       	ldd	r18, Y+2	; 0x02
    2408:	3b 81       	ldd	r19, Y+3	; 0x03
    240a:	4c 81       	ldd	r20, Y+4	; 0x04
    240c:	5d 81       	ldd	r21, Y+5	; 0x05
    240e:	28 1b       	sub	r18, r24
    2410:	39 0b       	sbc	r19, r25
    2412:	4a 0b       	sbc	r20, r26
    2414:	5b 0b       	sbc	r21, r27
    2416:	da 01       	movw	r26, r20
    2418:	c9 01       	movw	r24, r18
    241a:	0b 97       	sbiw	r24, 0x0b	; 11
    241c:	a1 05       	cpc	r26, r1
    241e:	b1 05       	cpc	r27, r1
    2420:	50 f0       	brcs	.+20     	; 0x2436 <gsm_poll_for_string+0x60>
    {
        if(state)
    2422:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <state.53>
    2426:	88 23       	and	r24, r24
    2428:	31 f0       	breq	.+12     	; 0x2436 <gsm_poll_for_string+0x60>
        {
            error_code1 = state;
    242a:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <state.53>
    242e:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <error_code1>
            state = 0;
    2432:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <state.53>
        }
    }
    if(is_queue_not_empty())
    2436:	0e 94 4c 30 	call	0x6098	; 0x6098 <is_queue_not_empty>
    243a:	88 23       	and	r24, r24
    243c:	09 f4       	brne	.+2      	; 0x2440 <gsm_poll_for_string+0x6a>
    243e:	8e c0       	rjmp	.+284    	; 0x255c <gsm_poll_for_string+0x186>
    {
        time_stamp = get_time_s();
    2440:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    2444:	6e 83       	std	Y+6, r22	; 0x06
    2446:	7f 83       	std	Y+7, r23	; 0x07
    2448:	88 87       	std	Y+8, r24	; 0x08
    244a:	99 87       	std	Y+9, r25	; 0x09
    244c:	8e 81       	ldd	r24, Y+6	; 0x06
    244e:	9f 81       	ldd	r25, Y+7	; 0x07
    2450:	a8 85       	ldd	r26, Y+8	; 0x08
    2452:	b9 85       	ldd	r27, Y+9	; 0x09
    2454:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <time_stamp.54>
    2458:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <time_stamp.54+0x1>
    245c:	a0 93 7d 03 	sts	0x037D, r26	; 0x80037d <time_stamp.54+0x2>
    2460:	b0 93 7e 03 	sts	0x037E, r27	; 0x80037e <time_stamp.54+0x3>
        ch = get_byte_from_queue();
    2464:	0e 94 33 30 	call	0x6066	; 0x6066 <get_byte_from_queue>
    2468:	89 83       	std	Y+1, r24	; 0x01
        switch(state)
    246a:	80 91 7f 03 	lds	r24, 0x037F	; 0x80037f <state.53>
    246e:	88 2f       	mov	r24, r24
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	19 f0       	breq	.+6      	; 0x247c <gsm_poll_for_string+0xa6>
    2476:	03 97       	sbiw	r24, 0x03	; 3
    2478:	21 f1       	breq	.+72     	; 0x24c2 <gsm_poll_for_string+0xec>
    247a:	70 c0       	rjmp	.+224    	; 0x255c <gsm_poll_for_string+0x186>
        {
        case 0:
            if((ch != 0) && (ch != '\r') && (ch != '\n'))
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	88 23       	and	r24, r24
    2480:	09 f4       	brne	.+2      	; 0x2484 <gsm_poll_for_string+0xae>
    2482:	69 c0       	rjmp	.+210    	; 0x2556 <gsm_poll_for_string+0x180>
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	8d 30       	cpi	r24, 0x0D	; 13
    2488:	09 f4       	brne	.+2      	; 0x248c <gsm_poll_for_string+0xb6>
    248a:	65 c0       	rjmp	.+202    	; 0x2556 <gsm_poll_for_string+0x180>
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	8a 30       	cpi	r24, 0x0A	; 10
    2490:	09 f4       	brne	.+2      	; 0x2494 <gsm_poll_for_string+0xbe>
    2492:	61 c0       	rjmp	.+194    	; 0x2556 <gsm_poll_for_string+0x180>
            {
                mdm_data[0] = ch;
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <mdm_data>
                i = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <i.52+0x1>
    24a2:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <i.52>
                state = 3;
    24a6:	83 e0       	ldi	r24, 0x03	; 3
    24a8:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <state.53>
                if(ch == '>')
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	8e 33       	cpi	r24, 0x3E	; 62
    24b0:	09 f0       	breq	.+2      	; 0x24b4 <gsm_poll_for_string+0xde>
    24b2:	51 c0       	rjmp	.+162    	; 0x2556 <gsm_poll_for_string+0x180>
                {
                    mdm_data[1] = 0;
    24b4:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <mdm_data+0x1>
                    state = 0;
    24b8:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <state.53>
                    return mdm_data;
    24bc:	8b e1       	ldi	r24, 0x1B	; 27
    24be:	92 e0       	ldi	r25, 0x02	; 2
    24c0:	4f c0       	rjmp	.+158    	; 0x2560 <gsm_poll_for_string+0x18a>
                }
            }
            break;
        case 3:
            mdm_data[i] = ch;
    24c2:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <i.52>
    24c6:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <i.52+0x1>
    24ca:	29 81       	ldd	r18, Y+1	; 0x01
    24cc:	85 5e       	subi	r24, 0xE5	; 229
    24ce:	9d 4f       	sbci	r25, 0xFD	; 253
    24d0:	dc 01       	movw	r26, r24
    24d2:	2c 93       	st	X, r18
            i++;
    24d4:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <i.52>
    24d8:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <i.52+0x1>
    24dc:	01 96       	adiw	r24, 0x01	; 1
    24de:	90 93 81 03 	sts	0x0381, r25	; 0x800381 <i.52+0x1>
    24e2:	80 93 80 03 	sts	0x0380, r24	; 0x800380 <i.52>
            if(i>=NET_BUF_SIZE)
    24e6:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <i.52>
    24ea:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <i.52+0x1>
    24ee:	80 34       	cpi	r24, 0x40	; 64
    24f0:	91 40       	sbci	r25, 0x01	; 1
    24f2:	38 f0       	brcs	.+14     	; 0x2502 <gsm_poll_for_string+0x12c>
            {
                i=0;
    24f4:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <i.52+0x1>
    24f8:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <i.52>
                state = 0; // переполнение входного буфера
    24fc:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <state.53>
                break;
    2500:	2d c0       	rjmp	.+90     	; 0x255c <gsm_poll_for_string+0x186>
            }
            if(i>=2)
    2502:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <i.52>
    2506:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <i.52+0x1>
    250a:	02 97       	sbiw	r24, 0x02	; 2
    250c:	30 f1       	brcs	.+76     	; 0x255a <gsm_poll_for_string+0x184>
            {
                if((mdm_data[i-2] == '\r')&&(mdm_data[i-1] == '\n'))
    250e:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <i.52>
    2512:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <i.52+0x1>
    2516:	02 97       	sbiw	r24, 0x02	; 2
    2518:	85 5e       	subi	r24, 0xE5	; 229
    251a:	9d 4f       	sbci	r25, 0xFD	; 253
    251c:	fc 01       	movw	r30, r24
    251e:	80 81       	ld	r24, Z
    2520:	8d 30       	cpi	r24, 0x0D	; 13
    2522:	d9 f4       	brne	.+54     	; 0x255a <gsm_poll_for_string+0x184>
    2524:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <i.52>
    2528:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <i.52+0x1>
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	85 5e       	subi	r24, 0xE5	; 229
    2530:	9d 4f       	sbci	r25, 0xFD	; 253
    2532:	dc 01       	movw	r26, r24
    2534:	8c 91       	ld	r24, X
    2536:	8a 30       	cpi	r24, 0x0A	; 10
    2538:	81 f4       	brne	.+32     	; 0x255a <gsm_poll_for_string+0x184>
                {
                    mdm_data[i-2] = 0;
    253a:	80 91 80 03 	lds	r24, 0x0380	; 0x800380 <i.52>
    253e:	90 91 81 03 	lds	r25, 0x0381	; 0x800381 <i.52+0x1>
    2542:	02 97       	sbiw	r24, 0x02	; 2
    2544:	85 5e       	subi	r24, 0xE5	; 229
    2546:	9d 4f       	sbci	r25, 0xFD	; 253
    2548:	fc 01       	movw	r30, r24
    254a:	10 82       	st	Z, r1
                    state = 0;
    254c:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <state.53>
                    return mdm_data;
    2550:	8b e1       	ldi	r24, 0x1B	; 27
    2552:	92 e0       	ldi	r25, 0x02	; 2
    2554:	05 c0       	rjmp	.+10     	; 0x2560 <gsm_poll_for_string+0x18a>
            break;
    2556:	00 00       	nop
    2558:	01 c0       	rjmp	.+2      	; 0x255c <gsm_poll_for_string+0x186>
                }
            }
            break;
    255a:	00 00       	nop
        }
    }
    return 0;
    255c:	80 e0       	ldi	r24, 0x00	; 0
    255e:	90 e0       	ldi	r25, 0x00	; 0
}
    2560:	29 96       	adiw	r28, 0x09	; 9
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	08 95       	ret

00002572 <call_status>:

// //*******************************************************************************************************************

static uint8_t call_status(void) 																														//	Аргументы функции:	отсутствуют.
{
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
    2576:	00 d0       	rcall	.+0      	; 0x2578 <call_status+0x6>
    2578:	0f 92       	push	r0
    257a:	cd b7       	in	r28, 0x3d	; 61
    257c:	de b7       	in	r29, 0x3e	; 62
    char *ptr;

    for(uint8_t i = 0; i < 5; i++)
    257e:	19 82       	std	Y+1, r1	; 0x01
    2580:	08 c1       	rjmp	.+528    	; 0x2792 <call_status+0x220>
    {
        if(i != 0)
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	88 23       	and	r24, r24
    2586:	21 f0       	breq	.+8      	; 0x2590 <call_status+0x1e>
            delay_ms(100);
    2588:	84 e6       	ldi	r24, 0x64	; 100
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        uart_flush();
    2590:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
        uart_send_str_p(PSTR("AT+CLCC\r\n"));
    2594:	80 ee       	ldi	r24, 0xE0	; 224
    2596:	93 e0       	ldi	r25, 0x03	; 3
    2598:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
        if(mdm_wait_str(2000))
    259c:	80 ed       	ldi	r24, 0xD0	; 208
    259e:	97 e0       	ldi	r25, 0x07	; 7
    25a0:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <mdm_wait_str>
    25a4:	88 23       	and	r24, r24
    25a6:	09 f4       	brne	.+2      	; 0x25aa <call_status+0x38>
    25a8:	f1 c0       	rjmp	.+482    	; 0x278c <call_status+0x21a>
        {
            ptr = strstr_P(mdm_data, PSTR("+CLCC:"));
    25aa:	8a ee       	ldi	r24, 0xEA	; 234
    25ac:	93 e0       	ldi	r25, 0x03	; 3
    25ae:	bc 01       	movw	r22, r24
    25b0:	8b e1       	ldi	r24, 0x1B	; 27
    25b2:	92 e0       	ldi	r25, 0x02	; 2
    25b4:	0e 94 87 34 	call	0x690e	; 0x690e <strstr_P>
    25b8:	9b 83       	std	Y+3, r25	; 0x03
    25ba:	8a 83       	std	Y+2, r24	; 0x02
            if(ptr)
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9b 81       	ldd	r25, Y+3	; 0x03
    25c0:	89 2b       	or	r24, r25
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <call_status+0x54>
    25c4:	55 c0       	rjmp	.+170    	; 0x2670 <call_status+0xfe>
            {
                ptr = strchr(mdm_data, ','); // ищем первую запятую в строке
    25c6:	6c e2       	ldi	r22, 0x2C	; 44
    25c8:	70 e0       	ldi	r23, 0x00	; 0
    25ca:	8b e1       	ldi	r24, 0x1B	; 27
    25cc:	92 e0       	ldi	r25, 0x02	; 2
    25ce:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    25d2:	9b 83       	std	Y+3, r25	; 0x03
    25d4:	8a 83       	std	Y+2, r24	; 0x02
                if(ptr)
    25d6:	8a 81       	ldd	r24, Y+2	; 0x02
    25d8:	9b 81       	ldd	r25, Y+3	; 0x03
    25da:	89 2b       	or	r24, r25
    25dc:	09 f4       	brne	.+2      	; 0x25e0 <call_status+0x6e>
    25de:	cf c0       	rjmp	.+414    	; 0x277e <call_status+0x20c>
                {
                    ptr++;
    25e0:	8a 81       	ldd	r24, Y+2	; 0x02
    25e2:	9b 81       	ldd	r25, Y+3	; 0x03
    25e4:	01 96       	adiw	r24, 0x01	; 1
    25e6:	9b 83       	std	Y+3, r25	; 0x03
    25e8:	8a 83       	std	Y+2, r24	; 0x02
                    ptr = strchr(ptr, ','); // ищем вторую запятую в строке
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	6c e2       	ldi	r22, 0x2C	; 44
    25f0:	70 e0       	ldi	r23, 0x00	; 0
    25f2:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    25f6:	9b 83       	std	Y+3, r25	; 0x03
    25f8:	8a 83       	std	Y+2, r24	; 0x02
                    if(ptr)
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	9b 81       	ldd	r25, Y+3	; 0x03
    25fe:	89 2b       	or	r24, r25
    2600:	09 f4       	brne	.+2      	; 0x2604 <call_status+0x92>
    2602:	bf c0       	rjmp	.+382    	; 0x2782 <call_status+0x210>
                    {

                        if(isdigit(*++ptr))
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	9b 81       	ldd	r25, Y+3	; 0x03
    2608:	01 96       	adiw	r24, 0x01	; 1
    260a:	9b 83       	std	Y+3, r25	; 0x03
    260c:	8a 83       	std	Y+2, r24	; 0x02
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	9b 81       	ldd	r25, Y+3	; 0x03
    2612:	fc 01       	movw	r30, r24
    2614:	80 81       	ld	r24, Z
    2616:	08 2e       	mov	r0, r24
    2618:	00 0c       	add	r0, r0
    261a:	99 0b       	sbc	r25, r25
    261c:	c0 97       	sbiw	r24, 0x30	; 48
    261e:	0a 97       	sbiw	r24, 0x0a	; 10
    2620:	08 f0       	brcs	.+2      	; 0x2624 <call_status+0xb2>
    2622:	b1 c0       	rjmp	.+354    	; 0x2786 <call_status+0x214>
                        {
                            switch( ptr[0]) 																													//	Получаем значение состояния вызова.
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	9b 81       	ldd	r25, Y+3	; 0x03
    2628:	fc 01       	movw	r30, r24
    262a:	80 81       	ld	r24, Z
    262c:	08 2e       	mov	r0, r24
    262e:	00 0c       	add	r0, r0
    2630:	99 0b       	sbc	r25, r25
    2632:	aa 0b       	sbc	r26, r26
    2634:	bb 0b       	sbc	r27, r27
    2636:	c0 97       	sbiw	r24, 0x30	; 48
    2638:	a1 09       	sbc	r26, r1
    263a:	b1 09       	sbc	r27, r1
    263c:	88 30       	cpi	r24, 0x08	; 8
    263e:	91 05       	cpc	r25, r1
    2640:	a1 05       	cpc	r26, r1
    2642:	b1 05       	cpc	r27, r1
    2644:	98 f4       	brcc	.+38     	; 0x266c <call_status+0xfa>
    2646:	84 56       	subi	r24, 0x64	; 100
    2648:	97 4c       	sbci	r25, 0xC7	; 199
    264a:	fc 01       	movw	r30, r24
    264c:	0c 94 b8 31 	jmp	0x6370	; 0x6370 <__tablejump2__>
                            {
                            case '0':
                                return GSM_CALL_ACTIVE;
    2650:	82 e0       	ldi	r24, 0x02	; 2
    2652:	a4 c0       	rjmp	.+328    	; 0x279c <call_status+0x22a>
                                break;	//	Состояние вызова - активное голосовое соединение.
                            case '1':
                                return GSM_CALL_HELD;
    2654:	83 e0       	ldi	r24, 0x03	; 3
    2656:	a2 c0       	rjmp	.+324    	; 0x279c <call_status+0x22a>
                                break;  //	Состояние вызова - удерживаемый.
                            case '2':
                                return GSM_CALL_OUT_DIAL;
    2658:	85 e0       	ldi	r24, 0x05	; 5
    265a:	a0 c0       	rjmp	.+320    	; 0x279c <call_status+0x22a>
                                break;	//	Состояние вызова - исходящий в режиме набора адреса.
                            case '3':
                                return GSM_CALL_OUT_BEEP;
    265c:	86 e0       	ldi	r24, 0x06	; 6
    265e:	9e c0       	rjmp	.+316    	; 0x279c <call_status+0x22a>
                                break;  //	Состояние вызова - исходящий в режиме дозвона.
                            case '4':
                                return GSM_CALL_IN_BEEP;
    2660:	87 e0       	ldi	r24, 0x07	; 7
    2662:	9c c0       	rjmp	.+312    	; 0x279c <call_status+0x22a>
                                break;	//	Состояние вызова - входящий  в режиме дозвона.
                            case '5':
                                return GSM_CALL_IN_WAIT;
    2664:	88 e0       	ldi	r24, 0x08	; 8
    2666:	9a c0       	rjmp	.+308    	; 0x279c <call_status+0x22a>
                                break;	//	Состояние вызова - входящий  в режиме ожидания.
                            case '7':
                                return GSM_CALL_END;
    2668:	84 e0       	ldi	r24, 0x04	; 4
    266a:	98 c0       	rjmp	.+304    	; 0x279c <call_status+0x22a>
                                break;	//	Состояние вызова - разъединение.
                            default:
                                return GSM_CALL_ERR;
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	96 c0       	rjmp	.+300    	; 0x279c <call_status+0x22a>
                    else continue;
                }
                else continue;
            }

            ptr = strstr_P(mdm_data, PSTR("ERROR"));
    2670:	81 ef       	ldi	r24, 0xF1	; 241
    2672:	93 e0       	ldi	r25, 0x03	; 3
    2674:	bc 01       	movw	r22, r24
    2676:	8b e1       	ldi	r24, 0x1B	; 27
    2678:	92 e0       	ldi	r25, 0x02	; 2
    267a:	0e 94 87 34 	call	0x690e	; 0x690e <strstr_P>
    267e:	9b 83       	std	Y+3, r25	; 0x03
    2680:	8a 83       	std	Y+2, r24	; 0x02
            if(ptr)
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	9b 81       	ldd	r25, Y+3	; 0x03
    2686:	89 2b       	or	r24, r25
    2688:	09 f0       	breq	.+2      	; 0x268c <call_status+0x11a>
    268a:	7f c0       	rjmp	.+254    	; 0x278a <call_status+0x218>
                continue;

            ptr = strstr_P(mdm_data, PSTR("+DTMF:"));
    268c:	87 ef       	ldi	r24, 0xF7	; 247
    268e:	93 e0       	ldi	r25, 0x03	; 3
    2690:	bc 01       	movw	r22, r24
    2692:	8b e1       	ldi	r24, 0x1B	; 27
    2694:	92 e0       	ldi	r25, 0x02	; 2
    2696:	0e 94 87 34 	call	0x690e	; 0x690e <strstr_P>
    269a:	9b 83       	std	Y+3, r25	; 0x03
    269c:	8a 83       	std	Y+2, r24	; 0x02
            if(ptr)   // DTFM msg
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	9b 81       	ldd	r25, Y+3	; 0x03
    26a2:	89 2b       	or	r24, r25
    26a4:	09 f4       	brne	.+2      	; 0x26a8 <call_status+0x136>
    26a6:	72 c0       	rjmp	.+228    	; 0x278c <call_status+0x21a>
            {
                ptr += 6;
    26a8:	8a 81       	ldd	r24, Y+2	; 0x02
    26aa:	9b 81       	ldd	r25, Y+3	; 0x03
    26ac:	06 96       	adiw	r24, 0x06	; 6
    26ae:	9b 83       	std	Y+3, r25	; 0x03
    26b0:	8a 83       	std	Y+2, r24	; 0x02
                if(isdigit(*++ptr))
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	9b 81       	ldd	r25, Y+3	; 0x03
    26b6:	01 96       	adiw	r24, 0x01	; 1
    26b8:	9b 83       	std	Y+3, r25	; 0x03
    26ba:	8a 83       	std	Y+2, r24	; 0x02
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	9b 81       	ldd	r25, Y+3	; 0x03
    26c0:	fc 01       	movw	r30, r24
    26c2:	80 81       	ld	r24, Z
    26c4:	08 2e       	mov	r0, r24
    26c6:	00 0c       	add	r0, r0
    26c8:	99 0b       	sbc	r25, r25
    26ca:	c0 97       	sbiw	r24, 0x30	; 48
    26cc:	0a 97       	sbiw	r24, 0x0a	; 10
    26ce:	08 f0       	brcs	.+2      	; 0x26d2 <call_status+0x160>
    26d0:	54 c0       	rjmp	.+168    	; 0x277a <call_status+0x208>
                {
                    switch( ptr[0]) 																													//	Получаем значение состояния вызова.
    26d2:	8a 81       	ldd	r24, Y+2	; 0x02
    26d4:	9b 81       	ldd	r25, Y+3	; 0x03
    26d6:	fc 01       	movw	r30, r24
    26d8:	80 81       	ld	r24, Z
    26da:	08 2e       	mov	r0, r24
    26dc:	00 0c       	add	r0, r0
    26de:	99 0b       	sbc	r25, r25
    26e0:	aa 0b       	sbc	r26, r26
    26e2:	bb 0b       	sbc	r27, r27
    26e4:	c0 97       	sbiw	r24, 0x30	; 48
    26e6:	a1 09       	sbc	r26, r1
    26e8:	b1 09       	sbc	r27, r1
    26ea:	88 30       	cpi	r24, 0x08	; 8
    26ec:	91 05       	cpc	r25, r1
    26ee:	a1 05       	cpc	r26, r1
    26f0:	b1 05       	cpc	r27, r1
    26f2:	08 f0       	brcs	.+2      	; 0x26f6 <call_status+0x184>
    26f4:	3f c0       	rjmp	.+126    	; 0x2774 <call_status+0x202>
    26f6:	8c 55       	subi	r24, 0x5C	; 92
    26f8:	97 4c       	sbci	r25, 0xC7	; 199
    26fa:	fc 01       	movw	r30, r24
    26fc:	0c 94 b8 31 	jmp	0x6370	; 0x6370 <__tablejump2__>
                    {
                    case '0':          // press 0
                        hang_up_call();
    2700:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <hang_up_call>
                        break;
    2704:	3a c0       	rjmp	.+116    	; 0x277a <call_status+0x208>
                    case '1':           //press 1
                        set_mode_gsm(GSM_ON_CHAPEKA);
    2706:	82 e0       	ldi	r24, 0x02	; 2
    2708:	0e 94 16 11 	call	0x222c	; 0x222c <set_mode_gsm>
                        play_amr(CHAPEKA_ON,'0');
    270c:	60 e3       	ldi	r22, 0x30	; 48
    270e:	84 e3       	ldi	r24, 0x34	; 52
    2710:	91 e0       	ldi	r25, 0x01	; 1
    2712:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <play_amr>
                        EEPROM_update();
    2716:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
                        break;
    271a:	2f c0       	rjmp	.+94     	; 0x277a <call_status+0x208>
                    case '2':
                        set_mode_gsm(GSM_ON_UTKINA);
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	0e 94 16 11 	call	0x222c	; 0x222c <set_mode_gsm>
                        play_amr(UTKINA_ON,'0');
    2722:	60 e3       	ldi	r22, 0x30	; 48
    2724:	8a e3       	ldi	r24, 0x3A	; 58
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <play_amr>
                        EEPROM_update();
    272c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
                        break;
    2730:	24 c0       	rjmp	.+72     	; 0x277a <call_status+0x208>
                    case '3':
                        play_amr(REPORT_SEND,'0');
    2732:	60 e3       	ldi	r22, 0x30	; 48
    2734:	80 e4       	ldi	r24, 0x40	; 64
    2736:	91 e0       	ldi	r25, 0x01	; 1
    2738:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <play_amr>
                        delay_ms(2000);
    273c:	80 ed       	ldi	r24, 0xD0	; 208
    273e:	97 e0       	ldi	r25, 0x07	; 7
    2740:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
                        hang_up_call();
    2744:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <hang_up_call>
                        delay_ms(1000);
    2748:	88 ee       	ldi	r24, 0xE8	; 232
    274a:	93 e0       	ldi	r25, 0x03	; 3
    274c:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
                        send_sms_report(rec_phone_number);
    2750:	8b e5       	ldi	r24, 0x5B	; 91
    2752:	93 e0       	ldi	r25, 0x03	; 3
    2754:	0e 94 b1 08 	call	0x1162	; 0x1162 <send_sms_report>
                        break;
    2758:	10 c0       	rjmp	.+32     	; 0x277a <call_status+0x208>
                    case '4':
                        play_amr(RST_LAN,'0');
    275a:	60 e3       	ldi	r22, 0x30	; 48
    275c:	87 e4       	ldi	r24, 0x47	; 71
    275e:	91 e0       	ldi	r25, 0x01	; 1
    2760:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <play_amr>
                        delay_ms(3000);
    2764:	88 eb       	ldi	r24, 0xB8	; 184
    2766:	9b e0       	ldi	r25, 0x0B	; 11
    2768:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
                        set_mode_gsm(GSM_REBOOT_LAN);
    276c:	83 e0       	ldi	r24, 0x03	; 3
    276e:	0e 94 16 11 	call	0x222c	; 0x222c <set_mode_gsm>
                        break;
    2772:	03 c0       	rjmp	.+6      	; 0x277a <call_status+0x208>
                    case '6':
                        break;
                    case '7':
                        break;
                    default:
                        break;	//	Состояние текущего вызова
    2774:	00 00       	nop
    2776:	01 c0       	rjmp	.+2      	; 0x277a <call_status+0x208>
                        break;
    2778:	00 00       	nop
                    }
                }
                return GSM_CALL_ACTIVE;
    277a:	82 e0       	ldi	r24, 0x02	; 2
    277c:	0f c0       	rjmp	.+30     	; 0x279c <call_status+0x22a>
                else continue;
    277e:	00 00       	nop
    2780:	05 c0       	rjmp	.+10     	; 0x278c <call_status+0x21a>
                    else continue;
    2782:	00 00       	nop
    2784:	03 c0       	rjmp	.+6      	; 0x278c <call_status+0x21a>
                        else continue;
    2786:	00 00       	nop
    2788:	01 c0       	rjmp	.+2      	; 0x278c <call_status+0x21a>
                continue;
    278a:	00 00       	nop
    for(uint8_t i = 0; i < 5; i++)
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	8f 5f       	subi	r24, 0xFF	; 255
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	85 30       	cpi	r24, 0x05	; 5
    2796:	08 f4       	brcc	.+2      	; 0x279a <call_status+0x228>
    2798:	f4 ce       	rjmp	.-536    	; 0x2582 <call_status+0x10>
            }
        }
    }
    return 0;
    279a:	80 e0       	ldi	r24, 0x00	; 0
}
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	df 91       	pop	r29
    27a4:	cf 91       	pop	r28
    27a6:	08 95       	ret

000027a8 <play_amr>:
////////////////////////////////////////////////////////////////
static uint8_t play_amr(char * file_sim800, char repeat)
{
    27a8:	cf 93       	push	r28
    27aa:	df 93       	push	r29
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <play_amr+0x6>
    27ae:	0f 92       	push	r0
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	6b 83       	std	Y+3, r22	; 0x03
    uart_flush();
    27ba:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
    uart_send_str_p(PSTR("AT+CREC=5\r\n")); // stop play
    27be:	8e ef       	ldi	r24, 0xFE	; 254
    27c0:	93 e0       	ldi	r25, 0x03	; 3
    27c2:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
    delay_ms(200);
    27c6:	88 ec       	ldi	r24, 0xC8	; 200
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
    uart_flush();
    27ce:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
    uart_send_str_p(PSTR("AT+CREC=4,\"C:\\User\\"));
    27d2:	8a e0       	ldi	r24, 0x0A	; 10
    27d4:	94 e0       	ldi	r25, 0x04	; 4
    27d6:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
    uart_send_str(file_sim800);
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	9a 81       	ldd	r25, Y+2	; 0x02
    27de:	0e 94 8c 30 	call	0x6118	; 0x6118 <uart_send_str>
    uart_send_str_p(PSTR(".amr\",0,100,"));
    27e2:	8e e1       	ldi	r24, 0x1E	; 30
    27e4:	94 e0       	ldi	r25, 0x04	; 4
    27e6:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
    uart_send_byte(repeat);
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <uart_send_byte>
    uart_send_str_p(PSTR("\r\n"));
    27f0:	8b e2       	ldi	r24, 0x2B	; 43
    27f2:	94 e0       	ldi	r25, 0x04	; 4
    27f4:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>

    if(mdm_wait_cmd_ms(2000, (const char*)RESPON_OK) == 1)
    27f8:	6e e4       	ldi	r22, 0x4E	; 78
    27fa:	71 e0       	ldi	r23, 0x01	; 1
    27fc:	80 ed       	ldi	r24, 0xD0	; 208
    27fe:	97 e0       	ldi	r25, 0x07	; 7
    2800:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    2804:	81 30       	cpi	r24, 0x01	; 1
    2806:	11 f4       	brne	.+4      	; 0x280c <play_amr+0x64>
    {
        return 1;
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	01 c0       	rjmp	.+2      	; 0x280e <play_amr+0x66>
    }
    return 0;
    280c:	80 e0       	ldi	r24, 0x00	; 0
}
    280e:	0f 90       	pop	r0
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	08 95       	ret

0000281a <call_to>:
////////////////////////////////////////////////////////////
//"AT+CREC=4,\"C:\\User\\14.amr\",1,100"
uint8_t call_to(char *phone, char *file_amr)
{
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	61 97       	sbiw	r28, 0x11	; 17
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	9f 83       	std	Y+7, r25	; 0x07
    2830:	8e 83       	std	Y+6, r24	; 0x06
    2832:	79 87       	std	Y+9, r23	; 0x09
    2834:	68 87       	std	Y+8, r22	; 0x08
    uint8_t i = 0;
    2836:	19 82       	std	Y+1, r1	; 0x01
    uint32_t time_stamp_s;
    hang_up_call();
    2838:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <hang_up_call>
    if(registered_in_gsm_network == 0)
    283c:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <registered_in_gsm_network>
    2840:	88 23       	and	r24, r24
    2842:	89 f4       	brne	.+34     	; 0x2866 <call_to+0x4c>
    {
        if(error_gsm < 0xFFFF)
    2844:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <error_gsm>
    2848:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <error_gsm+0x1>
    284c:	01 96       	adiw	r24, 0x01	; 1
    284e:	49 f0       	breq	.+18     	; 0x2862 <call_to+0x48>
        {
            error_gsm++;
    2850:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <error_gsm>
    2854:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <error_gsm+0x1>
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <error_gsm+0x1>
    285e:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <error_gsm>
        }
        return 0;
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	a4 c0       	rjmp	.+328    	; 0x29ae <call_to+0x194>
    }
    if(deposit < 1)
    2866:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <deposit>
    286a:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <deposit+0x1>
    286e:	18 16       	cp	r1, r24
    2870:	19 06       	cpc	r1, r25
    2872:	0c f4       	brge	.+2      	; 0x2876 <call_to+0x5c>
    2874:	97 c0       	rjmp	.+302    	; 0x29a4 <call_to+0x18a>
        return 0;
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	9a c0       	rjmp	.+308    	; 0x29ae <call_to+0x194>
    while(i < 5)
    {
        delay_ms(1000);
    287a:	88 ee       	ldi	r24, 0xE8	; 232
    287c:	93 e0       	ldi	r25, 0x03	; 3
    287e:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        i++;
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	8f 5f       	subi	r24, 0xFF	; 255
    2886:	89 83       	std	Y+1, r24	; 0x01
        sprintf_P(mdm_data, PSTR("ATD%s;\r\n"), phone);
    2888:	8e e2       	ldi	r24, 0x2E	; 46
    288a:	94 e0       	ldi	r25, 0x04	; 4
    288c:	2f 81       	ldd	r18, Y+7	; 0x07
    288e:	2f 93       	push	r18
    2890:	2e 81       	ldd	r18, Y+6	; 0x06
    2892:	2f 93       	push	r18
    2894:	29 2f       	mov	r18, r25
    2896:	2f 93       	push	r18
    2898:	8f 93       	push	r24
    289a:	8b e1       	ldi	r24, 0x1B	; 27
    289c:	92 e0       	ldi	r25, 0x02	; 2
    289e:	89 2f       	mov	r24, r25
    28a0:	8f 93       	push	r24
    28a2:	8b e1       	ldi	r24, 0x1B	; 27
    28a4:	92 e0       	ldi	r25, 0x02	; 2
    28a6:	8f 93       	push	r24
    28a8:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
        //uart_flush();
        uart_send_str(mdm_data);
    28b8:	8b e1       	ldi	r24, 0x1B	; 27
    28ba:	92 e0       	ldi	r25, 0x02	; 2
    28bc:	0e 94 8c 30 	call	0x6118	; 0x6118 <uart_send_str>
        if(mdm_wait_cmd_ms(2000, (const char*)RESPON_OK))
    28c0:	6e e4       	ldi	r22, 0x4E	; 78
    28c2:	71 e0       	ldi	r23, 0x01	; 1
    28c4:	80 ed       	ldi	r24, 0xD0	; 208
    28c6:	97 e0       	ldi	r25, 0x07	; 7
    28c8:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    28cc:	88 23       	and	r24, r24
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <call_to+0xb8>
    28d0:	69 c0       	rjmp	.+210    	; 0x29a4 <call_to+0x18a>
        {
            delay_ms(200);
    28d2:	88 ec       	ldi	r24, 0xC8	; 200
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
            softuart_puts_p(PSTR("CALL_OUT_DIAL ... " ));
    28da:	87 e3       	ldi	r24, 0x37	; 55
    28dc:	94 e0       	ldi	r25, 0x04	; 4
    28de:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            while(call_status()==GSM_CALL_OUT_DIAL) // Цикл выполняется пока набирается номер ...
    28e2:	04 c0       	rjmp	.+8      	; 0x28ec <call_to+0xd2>
            {
                delay_ms(500); //          Можно добавить код который будет выполняться в процессе набора номера             //
    28e4:	84 ef       	ldi	r24, 0xF4	; 244
    28e6:	91 e0       	ldi	r25, 0x01	; 1
    28e8:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
            while(call_status()==GSM_CALL_OUT_DIAL) // Цикл выполняется пока набирается номер ...
    28ec:	0e 94 b9 12 	call	0x2572	; 0x2572 <call_status>
    28f0:	85 30       	cpi	r24, 0x05	; 5
    28f2:	c1 f3       	breq	.-16     	; 0x28e4 <call_to+0xca>
        }
        else
        {
            continue;
        }
        delay_ms(200);
    28f4:	88 ec       	ldi	r24, 0xC8	; 200
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        if(call_status()==GSM_CALL_OUT_BEEP)
    28fc:	0e 94 b9 12 	call	0x2572	; 0x2572 <call_status>
    2900:	86 30       	cpi	r24, 0x06	; 6
    2902:	49 f4       	brne	.+18     	; 0x2916 <call_to+0xfc>
        {
            //          Ждём поднятия трубки на вызываемой стороне:                                       //
            while(call_status()==GSM_CALL_OUT_BEEP)
    2904:	04 c0       	rjmp	.+8      	; 0x290e <call_to+0xf4>
            {
                delay_ms(500);
    2906:	84 ef       	ldi	r24, 0xF4	; 244
    2908:	91 e0       	ldi	r25, 0x01	; 1
    290a:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
            while(call_status()==GSM_CALL_OUT_BEEP)
    290e:	0e 94 b9 12 	call	0x2572	; 0x2572 <call_status>
    2912:	86 30       	cpi	r24, 0x06	; 6
    2914:	c1 f3       	breq	.-16     	; 0x2906 <call_to+0xec>
            }
        }
        delay_ms(200);
    2916:	88 ec       	ldi	r24, 0xC8	; 200
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        if(call_status()==GSM_CALL_ACTIVE)                   // Если соединение установлено (абонент ответил), то ...
    291e:	0e 94 b9 12 	call	0x2572	; 0x2572 <call_status>
    2922:	82 30       	cpi	r24, 0x02	; 2
    2924:	d1 f5       	brne	.+116    	; 0x299a <call_to+0x180>
        {
            play_amr(file_amr, '1');
    2926:	88 85       	ldd	r24, Y+8	; 0x08
    2928:	99 85       	ldd	r25, Y+9	; 0x09
    292a:	61 e3       	ldi	r22, 0x31	; 49
    292c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <play_amr>
            time_stamp_s = get_time_s() + 10;
    2930:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    2934:	6a 87       	std	Y+10, r22	; 0x0a
    2936:	7b 87       	std	Y+11, r23	; 0x0b
    2938:	8c 87       	std	Y+12, r24	; 0x0c
    293a:	9d 87       	std	Y+13, r25	; 0x0d
    293c:	8a 85       	ldd	r24, Y+10	; 0x0a
    293e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2940:	ac 85       	ldd	r26, Y+12	; 0x0c
    2942:	bd 85       	ldd	r27, Y+13	; 0x0d
    2944:	0a 96       	adiw	r24, 0x0a	; 10
    2946:	a1 1d       	adc	r26, r1
    2948:	b1 1d       	adc	r27, r1
    294a:	8a 83       	std	Y+2, r24	; 0x02
    294c:	9b 83       	std	Y+3, r25	; 0x03
    294e:	ac 83       	std	Y+4, r26	; 0x04
    2950:	bd 83       	std	Y+5, r27	; 0x05
            //          Ждём завершения активного голосового соединения:                                  //
            while((call_status()==GSM_CALL_ACTIVE) && (get_time_s() < time_stamp_s))        // Цикл выполняется пока установлено активное голосовое соединение ...
    2952:	04 c0       	rjmp	.+8      	; 0x295c <call_to+0x142>
            {
                delay_ms(1000);
    2954:	88 ee       	ldi	r24, 0xE8	; 232
    2956:	93 e0       	ldi	r25, 0x03	; 3
    2958:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
            while((call_status()==GSM_CALL_ACTIVE) && (get_time_s() < time_stamp_s))        // Цикл выполняется пока установлено активное голосовое соединение ...
    295c:	0e 94 b9 12 	call	0x2572	; 0x2572 <call_status>
    2960:	82 30       	cpi	r24, 0x02	; 2
    2962:	99 f4       	brne	.+38     	; 0x298a <call_to+0x170>
    2964:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    2968:	6e 87       	std	Y+14, r22	; 0x0e
    296a:	7f 87       	std	Y+15, r23	; 0x0f
    296c:	88 8b       	std	Y+16, r24	; 0x10
    296e:	99 8b       	std	Y+17, r25	; 0x11
    2970:	8a 81       	ldd	r24, Y+2	; 0x02
    2972:	9b 81       	ldd	r25, Y+3	; 0x03
    2974:	ac 81       	ldd	r26, Y+4	; 0x04
    2976:	bd 81       	ldd	r27, Y+5	; 0x05
    2978:	2e 85       	ldd	r18, Y+14	; 0x0e
    297a:	3f 85       	ldd	r19, Y+15	; 0x0f
    297c:	48 89       	ldd	r20, Y+16	; 0x10
    297e:	59 89       	ldd	r21, Y+17	; 0x11
    2980:	28 17       	cp	r18, r24
    2982:	39 07       	cpc	r19, r25
    2984:	4a 07       	cpc	r20, r26
    2986:	5b 07       	cpc	r21, r27
    2988:	28 f3       	brcs	.-54     	; 0x2954 <call_to+0x13a>
            }
            softuart_puts_p(PSTR( "Call ended" ));
    298a:	8a e4       	ldi	r24, 0x4A	; 74
    298c:	94 e0       	ldi	r25, 0x04	; 4
    298e:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            hang_up_call();
    2992:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <hang_up_call>
            return 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	0a c0       	rjmp	.+20     	; 0x29ae <call_to+0x194>
        }
        else                                                                                  // Иначе, если активное голосовое соединение не было установлено, то ...
        {
            softuart_puts_p(PSTR( "No answer!" ));
    299a:	85 e5       	ldi	r24, 0x55	; 85
    299c:	94 e0       	ldi	r25, 0x04	; 4
    299e:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            continue;                                                  // Абонент не отвечает.
    29a2:	00 00       	nop
    while(i < 5)
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	85 30       	cpi	r24, 0x05	; 5
    29a8:	08 f4       	brcc	.+2      	; 0x29ac <call_to+0x192>
    29aa:	67 cf       	rjmp	.-306    	; 0x287a <call_to+0x60>
        }
    }
    return FALSE;
    29ac:	80 e0       	ldi	r24, 0x00	; 0
}
    29ae:	61 96       	adiw	r28, 0x11	; 17
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <hang_up_call>:
//


////////////////////////////////////////////////////////////////////////
static uint8_t hang_up_call(void)
{
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	00 d0       	rcall	.+0      	; 0x29c6 <hang_up_call+0x6>
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    uint8_t i, rez;

    for(i=0; i<5; i++)
    29ca:	19 82       	std	Y+1, r1	; 0x01
    29cc:	1a c0       	rjmp	.+52     	; 0x2a02 <hang_up_call+0x42>
    {
        if(i!=0)
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	88 23       	and	r24, r24
    29d2:	21 f0       	breq	.+8      	; 0x29dc <hang_up_call+0x1c>
            delay_ms(200);
    29d4:	88 ec       	ldi	r24, 0xC8	; 200
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        uart_flush();
    29dc:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
        uart_send_str_p(PSTR("ATH\r\n"));
    29e0:	80 e6       	ldi	r24, 0x60	; 96
    29e2:	94 e0       	ldi	r25, 0x04	; 4
    29e4:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
        rez = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK);
    29e8:	6e e4       	ldi	r22, 0x4E	; 78
    29ea:	71 e0       	ldi	r23, 0x01	; 1
    29ec:	80 ed       	ldi	r24, 0xD0	; 208
    29ee:	97 e0       	ldi	r25, 0x07	; 7
    29f0:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    29f4:	8a 83       	std	Y+2, r24	; 0x02
        if(rez)
    29f6:	8a 81       	ldd	r24, Y+2	; 0x02
    29f8:	88 23       	and	r24, r24
    29fa:	39 f4       	brne	.+14     	; 0x2a0a <hang_up_call+0x4a>
    for(i=0; i<5; i++)
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	8f 5f       	subi	r24, 0xFF	; 255
    2a00:	89 83       	std	Y+1, r24	; 0x01
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	85 30       	cpi	r24, 0x05	; 5
    2a06:	18 f3       	brcs	.-58     	; 0x29ce <hang_up_call+0xe>
    2a08:	01 c0       	rjmp	.+2      	; 0x2a0c <hang_up_call+0x4c>
            break;
    2a0a:	00 00       	nop
    }
    return rez;
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	08 95       	ret

00002a18 <mdm_wait_str>:
//
// //*******************************************************************************************************************
//
static uint8_t mdm_wait_str(uint16_t time_to_wait_ms)
{
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
    2a20:	2e 97       	sbiw	r28, 0x0e	; 14
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	9e 83       	std	Y+6, r25	; 0x06
    2a2e:	8d 83       	std	Y+5, r24	; 0x05
    uint32_t time_stamp = get_time_ms() + time_to_wait_ms;
    2a30:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    2a34:	6f 83       	std	Y+7, r22	; 0x07
    2a36:	78 87       	std	Y+8, r23	; 0x08
    2a38:	89 87       	std	Y+9, r24	; 0x09
    2a3a:	9a 87       	std	Y+10, r25	; 0x0a
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a40:	cc 01       	movw	r24, r24
    2a42:	a0 e0       	ldi	r26, 0x00	; 0
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	2f 81       	ldd	r18, Y+7	; 0x07
    2a48:	38 85       	ldd	r19, Y+8	; 0x08
    2a4a:	49 85       	ldd	r20, Y+9	; 0x09
    2a4c:	5a 85       	ldd	r21, Y+10	; 0x0a
    2a4e:	82 0f       	add	r24, r18
    2a50:	93 1f       	adc	r25, r19
    2a52:	a4 1f       	adc	r26, r20
    2a54:	b5 1f       	adc	r27, r21
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	9a 83       	std	Y+2, r25	; 0x02
    2a5a:	ab 83       	std	Y+3, r26	; 0x03
    2a5c:	bc 83       	std	Y+4, r27	; 0x04
    while(get_message_from_mdm()==0)
    2a5e:	19 c0       	rjmp	.+50     	; 0x2a92 <mdm_wait_str+0x7a>
    {
        if((get_time_ms() > time_stamp) )
    2a60:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    2a64:	6b 87       	std	Y+11, r22	; 0x0b
    2a66:	7c 87       	std	Y+12, r23	; 0x0c
    2a68:	8d 87       	std	Y+13, r24	; 0x0d
    2a6a:	9e 87       	std	Y+14, r25	; 0x0e
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a70:	ab 81       	ldd	r26, Y+3	; 0x03
    2a72:	bc 81       	ldd	r27, Y+4	; 0x04
    2a74:	2b 85       	ldd	r18, Y+11	; 0x0b
    2a76:	3c 85       	ldd	r19, Y+12	; 0x0c
    2a78:	4d 85       	ldd	r20, Y+13	; 0x0d
    2a7a:	5e 85       	ldd	r21, Y+14	; 0x0e
    2a7c:	82 17       	cp	r24, r18
    2a7e:	93 07       	cpc	r25, r19
    2a80:	a4 07       	cpc	r26, r20
    2a82:	b5 07       	cpc	r27, r21
    2a84:	30 f4       	brcc	.+12     	; 0x2a92 <mdm_wait_str+0x7a>
        {
            softuart_puts_p(PSTR( "wait str time end" ));
    2a86:	86 e6       	ldi	r24, 0x66	; 102
    2a88:	94 e0       	ldi	r25, 0x04	; 4
    2a8a:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            return 0;
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	05 c0       	rjmp	.+10     	; 0x2a9c <mdm_wait_str+0x84>
    while(get_message_from_mdm()==0)
    2a92:	0e 94 40 1a 	call	0x3480	; 0x3480 <get_message_from_mdm>
    2a96:	88 23       	and	r24, r24
    2a98:	19 f3       	breq	.-58     	; 0x2a60 <mdm_wait_str+0x48>
        }
    }
    return 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
}
    2a9c:	2e 96       	adiw	r28, 0x0e	; 14
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	08 95       	ret

00002aae <mdm_wait_prompt_ms>:

// //*******************************************************************************************************************
//
static uint8_t mdm_wait_prompt_ms(uint16_t time_to_wait_ms)
{
    2aae:	cf 93       	push	r28
    2ab0:	df 93       	push	r29
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	60 97       	sbiw	r28, 0x10	; 16
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	98 87       	std	Y+8, r25	; 0x08
    2ac4:	8f 83       	std	Y+7, r24	; 0x07
    uint32_t time_stamp = get_time_ms() + time_to_wait_ms;
    2ac6:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    2aca:	69 87       	std	Y+9, r22	; 0x09
    2acc:	7a 87       	std	Y+10, r23	; 0x0a
    2ace:	8b 87       	std	Y+11, r24	; 0x0b
    2ad0:	9c 87       	std	Y+12, r25	; 0x0c
    2ad2:	8f 81       	ldd	r24, Y+7	; 0x07
    2ad4:	98 85       	ldd	r25, Y+8	; 0x08
    2ad6:	cc 01       	movw	r24, r24
    2ad8:	a0 e0       	ldi	r26, 0x00	; 0
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	29 85       	ldd	r18, Y+9	; 0x09
    2ade:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ae0:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ae2:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ae4:	82 0f       	add	r24, r18
    2ae6:	93 1f       	adc	r25, r19
    2ae8:	a4 1f       	adc	r26, r20
    2aea:	b5 1f       	adc	r27, r21
    2aec:	89 83       	std	Y+1, r24	; 0x01
    2aee:	9a 83       	std	Y+2, r25	; 0x02
    2af0:	ab 83       	std	Y+3, r26	; 0x03
    2af2:	bc 83       	std	Y+4, r27	; 0x04
    char *ptr;

    while(1)
    {
        while(get_message_from_mdm()==0)
    2af4:	15 c0       	rjmp	.+42     	; 0x2b20 <mdm_wait_prompt_ms+0x72>
        {
            if((get_time_ms() > time_stamp))
    2af6:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    2afa:	6d 87       	std	Y+13, r22	; 0x0d
    2afc:	7e 87       	std	Y+14, r23	; 0x0e
    2afe:	8f 87       	std	Y+15, r24	; 0x0f
    2b00:	98 8b       	std	Y+16, r25	; 0x10
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	9a 81       	ldd	r25, Y+2	; 0x02
    2b06:	ab 81       	ldd	r26, Y+3	; 0x03
    2b08:	bc 81       	ldd	r27, Y+4	; 0x04
    2b0a:	2d 85       	ldd	r18, Y+13	; 0x0d
    2b0c:	3e 85       	ldd	r19, Y+14	; 0x0e
    2b0e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2b10:	58 89       	ldd	r21, Y+16	; 0x10
    2b12:	82 17       	cp	r24, r18
    2b14:	93 07       	cpc	r25, r19
    2b16:	a4 07       	cpc	r26, r20
    2b18:	b5 07       	cpc	r27, r21
    2b1a:	10 f4       	brcc	.+4      	; 0x2b20 <mdm_wait_prompt_ms+0x72>
                return 0;
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	18 c0       	rjmp	.+48     	; 0x2b50 <mdm_wait_prompt_ms+0xa2>
        while(get_message_from_mdm()==0)
    2b20:	0e 94 40 1a 	call	0x3480	; 0x3480 <get_message_from_mdm>
    2b24:	88 23       	and	r24, r24
    2b26:	39 f3       	breq	.-50     	; 0x2af6 <mdm_wait_prompt_ms+0x48>
        }

        if(mdm_data[0] == '>')
    2b28:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <mdm_data>
    2b2c:	8e 33       	cpi	r24, 0x3E	; 62
    2b2e:	11 f4       	brne	.+4      	; 0x2b34 <mdm_wait_prompt_ms+0x86>
            return 1;
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	0e c0       	rjmp	.+28     	; 0x2b50 <mdm_wait_prompt_ms+0xa2>

        ptr = strstr_P(mdm_data, PSTR("ERROR"));
    2b34:	88 e7       	ldi	r24, 0x78	; 120
    2b36:	94 e0       	ldi	r25, 0x04	; 4
    2b38:	bc 01       	movw	r22, r24
    2b3a:	8b e1       	ldi	r24, 0x1B	; 27
    2b3c:	92 e0       	ldi	r25, 0x02	; 2
    2b3e:	0e 94 87 34 	call	0x690e	; 0x690e <strstr_P>
    2b42:	9e 83       	std	Y+6, r25	; 0x06
    2b44:	8d 83       	std	Y+5, r24	; 0x05
        if(ptr)
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4a:	89 2b       	or	r24, r25
    2b4c:	49 f3       	breq	.-46     	; 0x2b20 <mdm_wait_prompt_ms+0x72>
            return 0;
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    2b50:	60 96       	adiw	r28, 0x10	; 16
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	cd bf       	out	0x3d, r28	; 61
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	08 95       	ret

00002b62 <mdm_wait_cmd_ms>:
// //*******************************************************************************************************************

static uint8_t mdm_wait_cmd_ms(uint16_t time_to_wait_ms, const char* _answer)
{
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
    2b6a:	62 97       	sbiw	r28, 0x12	; 18
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	f8 94       	cli
    2b70:	de bf       	out	0x3e, r29	; 62
    2b72:	0f be       	out	0x3f, r0	; 63
    2b74:	cd bf       	out	0x3d, r28	; 61
    2b76:	98 87       	std	Y+8, r25	; 0x08
    2b78:	8f 83       	std	Y+7, r24	; 0x07
    2b7a:	7a 87       	std	Y+10, r23	; 0x0a
    2b7c:	69 87       	std	Y+9, r22	; 0x09
    uint32_t time_stamp = get_time_ms() + time_to_wait_ms;
    2b7e:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    2b82:	6b 87       	std	Y+11, r22	; 0x0b
    2b84:	7c 87       	std	Y+12, r23	; 0x0c
    2b86:	8d 87       	std	Y+13, r24	; 0x0d
    2b88:	9e 87       	std	Y+14, r25	; 0x0e
    2b8a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b8c:	98 85       	ldd	r25, Y+8	; 0x08
    2b8e:	cc 01       	movw	r24, r24
    2b90:	a0 e0       	ldi	r26, 0x00	; 0
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	2b 85       	ldd	r18, Y+11	; 0x0b
    2b96:	3c 85       	ldd	r19, Y+12	; 0x0c
    2b98:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b9a:	5e 85       	ldd	r21, Y+14	; 0x0e
    2b9c:	82 0f       	add	r24, r18
    2b9e:	93 1f       	adc	r25, r19
    2ba0:	a4 1f       	adc	r26, r20
    2ba2:	b5 1f       	adc	r27, r21
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	ab 83       	std	Y+3, r26	; 0x03
    2baa:	bc 83       	std	Y+4, r27	; 0x04
    char *ptr;

    while(1)
    {
        while(get_message_from_mdm()==0)
    2bac:	19 c0       	rjmp	.+50     	; 0x2be0 <mdm_wait_cmd_ms+0x7e>
        {
            if((get_time_ms() > time_stamp))
    2bae:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    2bb2:	6f 87       	std	Y+15, r22	; 0x0f
    2bb4:	78 8b       	std	Y+16, r23	; 0x10
    2bb6:	89 8b       	std	Y+17, r24	; 0x11
    2bb8:	9a 8b       	std	Y+18, r25	; 0x12
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbe:	ab 81       	ldd	r26, Y+3	; 0x03
    2bc0:	bc 81       	ldd	r27, Y+4	; 0x04
    2bc2:	2f 85       	ldd	r18, Y+15	; 0x0f
    2bc4:	38 89       	ldd	r19, Y+16	; 0x10
    2bc6:	49 89       	ldd	r20, Y+17	; 0x11
    2bc8:	5a 89       	ldd	r21, Y+18	; 0x12
    2bca:	82 17       	cp	r24, r18
    2bcc:	93 07       	cpc	r25, r19
    2bce:	a4 07       	cpc	r26, r20
    2bd0:	b5 07       	cpc	r27, r21
    2bd2:	30 f4       	brcc	.+12     	; 0x2be0 <mdm_wait_cmd_ms+0x7e>
            {
                softuart_puts_p(PSTR( "cmd time end" ));
    2bd4:	8e e7       	ldi	r24, 0x7E	; 126
    2bd6:	94 e0       	ldi	r25, 0x04	; 4
    2bd8:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
                return 0;
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	21 c0       	rjmp	.+66     	; 0x2c22 <mdm_wait_cmd_ms+0xc0>
        while(get_message_from_mdm()==0)
    2be0:	0e 94 40 1a 	call	0x3480	; 0x3480 <get_message_from_mdm>
    2be4:	88 23       	and	r24, r24
    2be6:	19 f3       	breq	.-58     	; 0x2bae <mdm_wait_cmd_ms+0x4c>
            }
        }
        ptr = strstr(mdm_data, (const char*)_answer);
    2be8:	89 85       	ldd	r24, Y+9	; 0x09
    2bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bec:	bc 01       	movw	r22, r24
    2bee:	8b e1       	ldi	r24, 0x1B	; 27
    2bf0:	92 e0       	ldi	r25, 0x02	; 2
    2bf2:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <strstr>
    2bf6:	9e 83       	std	Y+6, r25	; 0x06
    2bf8:	8d 83       	std	Y+5, r24	; 0x05
        //print_freeRam();
        if(ptr)
    2bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfe:	89 2b       	or	r24, r25
    2c00:	11 f0       	breq	.+4      	; 0x2c06 <mdm_wait_cmd_ms+0xa4>
            return 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	0e c0       	rjmp	.+28     	; 0x2c22 <mdm_wait_cmd_ms+0xc0>
        ptr = strstr_P(mdm_data, PSTR("ERROR"));
    2c06:	8b e8       	ldi	r24, 0x8B	; 139
    2c08:	94 e0       	ldi	r25, 0x04	; 4
    2c0a:	bc 01       	movw	r22, r24
    2c0c:	8b e1       	ldi	r24, 0x1B	; 27
    2c0e:	92 e0       	ldi	r25, 0x02	; 2
    2c10:	0e 94 87 34 	call	0x690e	; 0x690e <strstr_P>
    2c14:	9e 83       	std	Y+6, r25	; 0x06
    2c16:	8d 83       	std	Y+5, r24	; 0x05
        if(ptr)
    2c18:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c1c:	89 2b       	or	r24, r25
    2c1e:	01 f3       	breq	.-64     	; 0x2be0 <mdm_wait_cmd_ms+0x7e>
            return 0;
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    2c22:	62 96       	adiw	r28, 0x12	; 18
    2c24:	0f b6       	in	r0, 0x3f	; 63
    2c26:	f8 94       	cli
    2c28:	de bf       	out	0x3e, r29	; 62
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	cd bf       	out	0x3d, r28	; 61
    2c2e:	df 91       	pop	r29
    2c30:	cf 91       	pop	r28
    2c32:	08 95       	ret

00002c34 <registration_status_ms>:

// //*******************************************************************************************************************
//
static char registration_status_ms(uint32_t time_to_wait_ms)
{
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	cd b7       	in	r28, 0x3d	; 61
    2c3a:	de b7       	in	r29, 0x3e	; 62
    2c3c:	6a 97       	sbiw	r28, 0x1a	; 26
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	6b 87       	std	Y+11, r22	; 0x0b
    2c4a:	7c 87       	std	Y+12, r23	; 0x0c
    2c4c:	8d 87       	std	Y+13, r24	; 0x0d
    2c4e:	9e 87       	std	Y+14, r25	; 0x0e
    uint32_t time_stamp = get_time_ms() + time_to_wait_ms;
    2c50:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    2c54:	6f 87       	std	Y+15, r22	; 0x0f
    2c56:	78 8b       	std	Y+16, r23	; 0x10
    2c58:	89 8b       	std	Y+17, r24	; 0x11
    2c5a:	9a 8b       	std	Y+18, r25	; 0x12
    2c5c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c5e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c60:	ad 85       	ldd	r26, Y+13	; 0x0d
    2c62:	be 85       	ldd	r27, Y+14	; 0x0e
    2c64:	2f 85       	ldd	r18, Y+15	; 0x0f
    2c66:	38 89       	ldd	r19, Y+16	; 0x10
    2c68:	49 89       	ldd	r20, Y+17	; 0x11
    2c6a:	5a 89       	ldd	r21, Y+18	; 0x12
    2c6c:	82 0f       	add	r24, r18
    2c6e:	93 1f       	adc	r25, r19
    2c70:	a4 1f       	adc	r26, r20
    2c72:	b5 1f       	adc	r27, r21
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	9a 83       	std	Y+2, r25	; 0x02
    2c78:	ab 83       	std	Y+3, r26	; 0x03
    2c7a:	bc 83       	std	Y+4, r27	; 0x04
    char *ptr;
    delay_ms(200);
    2c7c:	88 ec       	ldi	r24, 0xC8	; 200
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
    uart_flush();
    2c84:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
    uart_send_str_p(PSTR("AT+CREG?\r\n"));
    2c88:	81 e9       	ldi	r24, 0x91	; 145
    2c8a:	94 e0       	ldi	r25, 0x04	; 4
    2c8c:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
    while(1)
    {
        while(get_message_from_mdm()==0)
    2c90:	15 c0       	rjmp	.+42     	; 0x2cbc <registration_status_ms+0x88>
        {
            if(get_time_ms() > time_stamp)
    2c92:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    2c96:	6b 8b       	std	Y+19, r22	; 0x13
    2c98:	7c 8b       	std	Y+20, r23	; 0x14
    2c9a:	8d 8b       	std	Y+21, r24	; 0x15
    2c9c:	9e 8b       	std	Y+22, r25	; 0x16
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	ab 81       	ldd	r26, Y+3	; 0x03
    2ca4:	bc 81       	ldd	r27, Y+4	; 0x04
    2ca6:	2b 89       	ldd	r18, Y+19	; 0x13
    2ca8:	3c 89       	ldd	r19, Y+20	; 0x14
    2caa:	4d 89       	ldd	r20, Y+21	; 0x15
    2cac:	5e 89       	ldd	r21, Y+22	; 0x16
    2cae:	82 17       	cp	r24, r18
    2cb0:	93 07       	cpc	r25, r19
    2cb2:	a4 07       	cpc	r26, r20
    2cb4:	b5 07       	cpc	r27, r21
    2cb6:	10 f4       	brcc	.+4      	; 0x2cbc <registration_status_ms+0x88>
                return 0;
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	4e c0       	rjmp	.+156    	; 0x2d58 <registration_status_ms+0x124>
        while(get_message_from_mdm()==0)
    2cbc:	0e 94 40 1a 	call	0x3480	; 0x3480 <get_message_from_mdm>
    2cc0:	88 23       	and	r24, r24
    2cc2:	39 f3       	breq	.-50     	; 0x2c92 <registration_status_ms+0x5e>
        }
        ptr = strstr_P(mdm_data, PSTR("+CREG:")); // статус регистрации в сети
    2cc4:	8c e9       	ldi	r24, 0x9C	; 156
    2cc6:	94 e0       	ldi	r25, 0x04	; 4
    2cc8:	bc 01       	movw	r22, r24
    2cca:	8b e1       	ldi	r24, 0x1B	; 27
    2ccc:	92 e0       	ldi	r25, 0x02	; 2
    2cce:	0e 94 87 34 	call	0x690e	; 0x690e <strstr_P>
    2cd2:	9e 83       	std	Y+6, r25	; 0x06
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
        if(ptr)
    2cd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cda:	89 2b       	or	r24, r25
    2cdc:	79 f3       	breq	.-34     	; 0x2cbc <registration_status_ms+0x88>
        {
            ptr = strchr(ptr, ',');
    2cde:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce2:	6c e2       	ldi	r22, 0x2C	; 44
    2ce4:	70 e0       	ldi	r23, 0x00	; 0
    2ce6:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    2cea:	9e 83       	std	Y+6, r25	; 0x06
    2cec:	8d 83       	std	Y+5, r24	; 0x05
            if(ptr)
    2cee:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf2:	89 2b       	or	r24, r25
    2cf4:	19 f3       	breq	.-58     	; 0x2cbc <registration_status_ms+0x88>
            {
                uint32_t n = strtoul(++ptr, 0, 10);
    2cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfa:	01 96       	adiw	r24, 0x01	; 1
    2cfc:	9e 83       	std	Y+6, r25	; 0x06
    2cfe:	8d 83       	std	Y+5, r24	; 0x05
    2d00:	8d 81       	ldd	r24, Y+5	; 0x05
    2d02:	9e 81       	ldd	r25, Y+6	; 0x06
    2d04:	4a e0       	ldi	r20, 0x0A	; 10
    2d06:	50 e0       	ldi	r21, 0x00	; 0
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	70 e0       	ldi	r23, 0x00	; 0
    2d0c:	0e 94 00 33 	call	0x6600	; 0x6600 <strtoul>
    2d10:	6f 8b       	std	Y+23, r22	; 0x17
    2d12:	78 8f       	std	Y+24, r23	; 0x18
    2d14:	89 8f       	std	Y+25, r24	; 0x19
    2d16:	9a 8f       	std	Y+26, r25	; 0x1a
    2d18:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1c:	a9 8d       	ldd	r26, Y+25	; 0x19
    2d1e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2d20:	8f 83       	std	Y+7, r24	; 0x07
    2d22:	98 87       	std	Y+8, r25	; 0x08
    2d24:	a9 87       	std	Y+9, r26	; 0x09
    2d26:	ba 87       	std	Y+10, r27	; 0x0a
                if((n==1)||(n==5)) // регистрация в домашней сети, или роуминге
    2d28:	8f 81       	ldd	r24, Y+7	; 0x07
    2d2a:	98 85       	ldd	r25, Y+8	; 0x08
    2d2c:	a9 85       	ldd	r26, Y+9	; 0x09
    2d2e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	a1 05       	cpc	r26, r1
    2d34:	b1 05       	cpc	r27, r1
    2d36:	41 f0       	breq	.+16     	; 0x2d48 <registration_status_ms+0x114>
    2d38:	8f 81       	ldd	r24, Y+7	; 0x07
    2d3a:	98 85       	ldd	r25, Y+8	; 0x08
    2d3c:	a9 85       	ldd	r26, Y+9	; 0x09
    2d3e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2d40:	05 97       	sbiw	r24, 0x05	; 5
    2d42:	a1 05       	cpc	r26, r1
    2d44:	b1 05       	cpc	r27, r1
    2d46:	29 f4       	brne	.+10     	; 0x2d52 <registration_status_ms+0x11e>
                {
                    registered_in_gsm_network = 1;
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <registered_in_gsm_network>
                    return 1;
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	03 c0       	rjmp	.+6      	; 0x2d58 <registration_status_ms+0x124>
                }
                else
                {
                    registered_in_gsm_network = 0;
    2d52:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <registered_in_gsm_network>
                    return 0;
    2d56:	80 e0       	ldi	r24, 0x00	; 0
                }
            }
        }
    }
    return 0;
}
    2d58:	6a 96       	adiw	r28, 0x1a	; 26
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	08 95       	ret

00002d6a <check_registration>:
///////////////////////////////////
uint8_t check_registration(void)
{
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	cd b7       	in	r28, 0x3d	; 61
    2d70:	de b7       	in	r29, 0x3e	; 62
    2d72:	2c 97       	sbiw	r28, 0x0c	; 12
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    static uint32_t time_of_last_check = 0;
    static char cnt=0;

    if(get_time_s() > (time_of_last_check + TIME_CHECK_REG))
    2d7e:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    2d82:	69 83       	std	Y+1, r22	; 0x01
    2d84:	7a 83       	std	Y+2, r23	; 0x02
    2d86:	8b 83       	std	Y+3, r24	; 0x03
    2d88:	9c 83       	std	Y+4, r25	; 0x04
    2d8a:	80 91 82 03 	lds	r24, 0x0382	; 0x800382 <time_of_last_check.32>
    2d8e:	90 91 83 03 	lds	r25, 0x0383	; 0x800383 <time_of_last_check.32+0x1>
    2d92:	a0 91 84 03 	lds	r26, 0x0384	; 0x800384 <time_of_last_check.32+0x2>
    2d96:	b0 91 85 03 	lds	r27, 0x0385	; 0x800385 <time_of_last_check.32+0x3>
    2d9a:	84 5d       	subi	r24, 0xD4	; 212
    2d9c:	9e 4f       	sbci	r25, 0xFE	; 254
    2d9e:	af 4f       	sbci	r26, 0xFF	; 255
    2da0:	bf 4f       	sbci	r27, 0xFF	; 255
    2da2:	29 81       	ldd	r18, Y+1	; 0x01
    2da4:	3a 81       	ldd	r19, Y+2	; 0x02
    2da6:	4b 81       	ldd	r20, Y+3	; 0x03
    2da8:	5c 81       	ldd	r21, Y+4	; 0x04
    2daa:	82 17       	cp	r24, r18
    2dac:	93 07       	cpc	r25, r19
    2dae:	a4 07       	cpc	r26, r20
    2db0:	b5 07       	cpc	r27, r21
    2db2:	08 f0       	brcs	.+2      	; 0x2db6 <check_registration+0x4c>
    2db4:	42 c0       	rjmp	.+132    	; 0x2e3a <check_registration+0xd0>
    {
        if(registration_status_ms(2000) == 0)
    2db6:	60 ed       	ldi	r22, 0xD0	; 208
    2db8:	77 e0       	ldi	r23, 0x07	; 7
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <registration_status_ms>
    2dc2:	88 23       	and	r24, r24
    2dc4:	81 f4       	brne	.+32     	; 0x2de6 <check_registration+0x7c>
        {
            cnt++;
    2dc6:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <cnt.31>
    2dca:	8f 5f       	subi	r24, 0xFF	; 255
    2dcc:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <cnt.31>
            softuart_puts_p(PSTR("not reg gsm"));
    2dd0:	83 ea       	ldi	r24, 0xA3	; 163
    2dd2:	94 e0       	ldi	r25, 0x04	; 4
    2dd4:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            if(cnt >= 5)
    2dd8:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <cnt.31>
    2ddc:	85 30       	cpi	r24, 0x05	; 5
    2dde:	cc f0       	brlt	.+50     	; 0x2e12 <check_registration+0xa8>
            {
//                softuart_puts_p(PSTR("reset_\r\n"));
//                config.reset_not_reg++;
                reset_mcu();
    2de0:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <reset_mcu>
    2de4:	16 c0       	rjmp	.+44     	; 0x2e12 <check_registration+0xa8>
            }
        }
        else
        {
            cnt=0;
    2de6:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <cnt.31>
            time_of_last_check = get_time_s();
    2dea:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    2dee:	6d 83       	std	Y+5, r22	; 0x05
    2df0:	7e 83       	std	Y+6, r23	; 0x06
    2df2:	8f 83       	std	Y+7, r24	; 0x07
    2df4:	98 87       	std	Y+8, r25	; 0x08
    2df6:	8d 81       	ldd	r24, Y+5	; 0x05
    2df8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfa:	af 81       	ldd	r26, Y+7	; 0x07
    2dfc:	b8 85       	ldd	r27, Y+8	; 0x08
    2dfe:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <time_of_last_check.32>
    2e02:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <time_of_last_check.32+0x1>
    2e06:	a0 93 84 03 	sts	0x0384, r26	; 0x800384 <time_of_last_check.32+0x2>
    2e0a:	b0 93 85 03 	sts	0x0385, r27	; 0x800385 <time_of_last_check.32+0x3>
            return 1;
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	15 c0       	rjmp	.+42     	; 0x2e3c <check_registration+0xd2>
        }
        time_of_last_check = get_time_s();
    2e12:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    2e16:	69 87       	std	Y+9, r22	; 0x09
    2e18:	7a 87       	std	Y+10, r23	; 0x0a
    2e1a:	8b 87       	std	Y+11, r24	; 0x0b
    2e1c:	9c 87       	std	Y+12, r25	; 0x0c
    2e1e:	29 85       	ldd	r18, Y+9	; 0x09
    2e20:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e22:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e24:	5c 85       	ldd	r21, Y+12	; 0x0c
    2e26:	20 93 82 03 	sts	0x0382, r18	; 0x800382 <time_of_last_check.32>
    2e2a:	30 93 83 03 	sts	0x0383, r19	; 0x800383 <time_of_last_check.32+0x1>
    2e2e:	40 93 84 03 	sts	0x0384, r20	; 0x800384 <time_of_last_check.32+0x2>
    2e32:	50 93 85 03 	sts	0x0385, r21	; 0x800385 <time_of_last_check.32+0x3>
        send_unsent_sms();
    2e36:	0e 94 a3 1b 	call	0x3746	; 0x3746 <send_unsent_sms>
    }
    return 0;
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
}
    2e3c:	2c 96       	adiw	r28, 0x0c	; 12
    2e3e:	0f b6       	in	r0, 0x3f	; 63
    2e40:	f8 94       	cli
    2e42:	de bf       	out	0x3e, r29	; 62
    2e44:	0f be       	out	0x3f, r0	; 63
    2e46:	cd bf       	out	0x3d, r28	; 61
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	08 95       	ret

00002e4e <check_deposit>:
//---------------------------------------------------
void check_deposit(void)
{
    2e4e:	cf 93       	push	r28
    2e50:	df 93       	push	r29
    2e52:	cd b7       	in	r28, 0x3d	; 61
    2e54:	de b7       	in	r29, 0x3e	; 62
    2e56:	28 97       	sbiw	r28, 0x08	; 8
    2e58:	0f b6       	in	r0, 0x3f	; 63
    2e5a:	f8 94       	cli
    2e5c:	de bf       	out	0x3e, r29	; 62
    2e5e:	0f be       	out	0x3f, r0	; 63
    2e60:	cd bf       	out	0x3d, r28	; 61
    static uint32_t last_check_balance = 0;
    if(get_time_m() > (last_check_balance + 1440))//1440 min = 24h
    2e62:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <get_time_m>
    2e66:	69 83       	std	Y+1, r22	; 0x01
    2e68:	7a 83       	std	Y+2, r23	; 0x02
    2e6a:	8b 83       	std	Y+3, r24	; 0x03
    2e6c:	9c 83       	std	Y+4, r25	; 0x04
    2e6e:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <last_check_balance.29>
    2e72:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <last_check_balance.29+0x1>
    2e76:	a0 91 89 03 	lds	r26, 0x0389	; 0x800389 <last_check_balance.29+0x2>
    2e7a:	b0 91 8a 03 	lds	r27, 0x038A	; 0x80038a <last_check_balance.29+0x3>
    2e7e:	80 56       	subi	r24, 0x60	; 96
    2e80:	9a 4f       	sbci	r25, 0xFA	; 250
    2e82:	af 4f       	sbci	r26, 0xFF	; 255
    2e84:	bf 4f       	sbci	r27, 0xFF	; 255
    2e86:	29 81       	ldd	r18, Y+1	; 0x01
    2e88:	3a 81       	ldd	r19, Y+2	; 0x02
    2e8a:	4b 81       	ldd	r20, Y+3	; 0x03
    2e8c:	5c 81       	ldd	r21, Y+4	; 0x04
    2e8e:	82 17       	cp	r24, r18
    2e90:	93 07       	cpc	r25, r19
    2e92:	a4 07       	cpc	r26, r20
    2e94:	b5 07       	cpc	r27, r21
    2e96:	60 f5       	brcc	.+88     	; 0x2ef0 <check_deposit+0xa2>
    {
        if(send_USSD("*101#") == 0)
    2e98:	81 e5       	ldi	r24, 0x51	; 81
    2e9a:	91 e0       	ldi	r25, 0x01	; 1
    2e9c:	0e 94 75 1f 	call	0x3eea	; 0x3eea <send_USSD>
    2ea0:	88 23       	and	r24, r24
    2ea2:	a1 f4       	brne	.+40     	; 0x2ecc <check_deposit+0x7e>
        {
            last_check_balance += 60;
    2ea4:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <last_check_balance.29>
    2ea8:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <last_check_balance.29+0x1>
    2eac:	a0 91 89 03 	lds	r26, 0x0389	; 0x800389 <last_check_balance.29+0x2>
    2eb0:	b0 91 8a 03 	lds	r27, 0x038A	; 0x80038a <last_check_balance.29+0x3>
    2eb4:	cc 96       	adiw	r24, 0x3c	; 60
    2eb6:	a1 1d       	adc	r26, r1
    2eb8:	b1 1d       	adc	r27, r1
    2eba:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <last_check_balance.29>
    2ebe:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <last_check_balance.29+0x1>
    2ec2:	a0 93 89 03 	sts	0x0389, r26	; 0x800389 <last_check_balance.29+0x2>
    2ec6:	b0 93 8a 03 	sts	0x038A, r27	; 0x80038a <last_check_balance.29+0x3>
            return;
    2eca:	12 c0       	rjmp	.+36     	; 0x2ef0 <check_deposit+0xa2>
        }
        last_check_balance = get_time_m();
    2ecc:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <get_time_m>
    2ed0:	6d 83       	std	Y+5, r22	; 0x05
    2ed2:	7e 83       	std	Y+6, r23	; 0x06
    2ed4:	8f 83       	std	Y+7, r24	; 0x07
    2ed6:	98 87       	std	Y+8, r25	; 0x08
    2ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eda:	9e 81       	ldd	r25, Y+6	; 0x06
    2edc:	af 81       	ldd	r26, Y+7	; 0x07
    2ede:	b8 85       	ldd	r27, Y+8	; 0x08
    2ee0:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <last_check_balance.29>
    2ee4:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <last_check_balance.29+0x1>
    2ee8:	a0 93 89 03 	sts	0x0389, r26	; 0x800389 <last_check_balance.29+0x2>
    2eec:	b0 93 8a 03 	sts	0x038A, r27	; 0x80038a <last_check_balance.29+0x3>
    }
}
    2ef0:	28 96       	adiw	r28, 0x08	; 8
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	df 91       	pop	r29
    2efe:	cf 91       	pop	r28
    2f00:	08 95       	ret

00002f02 <map_s>:

// //*******************************************************************************************************************
//
uint8_t map_s(uint16_t x, uint16_t in_min, uint16_t in_max, uint8_t out_min, uint8_t out_max)
{
    2f02:	0f 93       	push	r16
    2f04:	cf 93       	push	r28
    2f06:	df 93       	push	r29
    2f08:	cd b7       	in	r28, 0x3d	; 61
    2f0a:	de b7       	in	r29, 0x3e	; 62
    2f0c:	28 97       	sbiw	r28, 0x08	; 8
    2f0e:	0f b6       	in	r0, 0x3f	; 63
    2f10:	f8 94       	cli
    2f12:	de bf       	out	0x3e, r29	; 62
    2f14:	0f be       	out	0x3f, r0	; 63
    2f16:	cd bf       	out	0x3d, r28	; 61
    2f18:	9a 83       	std	Y+2, r25	; 0x02
    2f1a:	89 83       	std	Y+1, r24	; 0x01
    2f1c:	7c 83       	std	Y+4, r23	; 0x04
    2f1e:	6b 83       	std	Y+3, r22	; 0x03
    2f20:	5e 83       	std	Y+6, r21	; 0x06
    2f22:	4d 83       	std	Y+5, r20	; 0x05
    2f24:	2f 83       	std	Y+7, r18	; 0x07
    2f26:	08 87       	std	Y+8, r16	; 0x08
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    2f28:	29 81       	ldd	r18, Y+1	; 0x01
    2f2a:	3a 81       	ldd	r19, Y+2	; 0x02
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f30:	a9 01       	movw	r20, r18
    2f32:	48 1b       	sub	r20, r24
    2f34:	59 0b       	sbc	r21, r25
    2f36:	ca 01       	movw	r24, r20
    2f38:	28 85       	ldd	r18, Y+8	; 0x08
    2f3a:	42 2f       	mov	r20, r18
    2f3c:	50 e0       	ldi	r21, 0x00	; 0
    2f3e:	2f 81       	ldd	r18, Y+7	; 0x07
    2f40:	22 2f       	mov	r18, r18
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	ba 01       	movw	r22, r20
    2f46:	62 1b       	sub	r22, r18
    2f48:	73 0b       	sbc	r23, r19
    2f4a:	9b 01       	movw	r18, r22
    2f4c:	82 9f       	mul	r24, r18
    2f4e:	a0 01       	movw	r20, r0
    2f50:	83 9f       	mul	r24, r19
    2f52:	50 0d       	add	r21, r0
    2f54:	92 9f       	mul	r25, r18
    2f56:	50 0d       	add	r21, r0
    2f58:	11 24       	eor	r1, r1
    2f5a:	2d 81       	ldd	r18, Y+5	; 0x05
    2f5c:	3e 81       	ldd	r19, Y+6	; 0x06
    2f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f60:	9c 81       	ldd	r25, Y+4	; 0x04
    2f62:	28 1b       	sub	r18, r24
    2f64:	39 0b       	sbc	r19, r25
    2f66:	ca 01       	movw	r24, r20
    2f68:	b9 01       	movw	r22, r18
    2f6a:	0e 94 63 31 	call	0x62c6	; 0x62c6 <__udivmodhi4>
    2f6e:	cb 01       	movw	r24, r22
    2f70:	98 2f       	mov	r25, r24
    2f72:	8f 81       	ldd	r24, Y+7	; 0x07
    2f74:	89 0f       	add	r24, r25
}
    2f76:	28 96       	adiw	r28, 0x08	; 8
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	df 91       	pop	r29
    2f84:	cf 91       	pop	r28
    2f86:	0f 91       	pop	r16
    2f88:	08 95       	ret

00002f8a <mdm_get_signal_strength>:

uint8_t mdm_get_signal_strength(void)
{
    2f8a:	0f 93       	push	r16
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
    2f94:	2a 97       	sbiw	r28, 0x0a	; 10
    2f96:	0f b6       	in	r0, 0x3f	; 63
    2f98:	f8 94       	cli
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	0f be       	out	0x3f, r0	; 63
    2f9e:	cd bf       	out	0x3d, r28	; 61
    char *ptr;
    unsigned long level;
    delay_ms(50);
    2fa0:	82 e3       	ldi	r24, 0x32	; 50
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
    uart_flush();
    2fa8:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
    uart_send_str_p(PSTR("AT+CSQ\r"));
    2fac:	8f ea       	ldi	r24, 0xAF	; 175
    2fae:	94 e0       	ldi	r25, 0x04	; 4
    2fb0:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
    if(mdm_wait_cmd_ms(2000, (const char*)RESPON_OK_CSQ) == 0)
    2fb4:	67 e5       	ldi	r22, 0x57	; 87
    2fb6:	71 e0       	ldi	r23, 0x01	; 1
    2fb8:	80 ed       	ldi	r24, 0xD0	; 208
    2fba:	97 e0       	ldi	r25, 0x07	; 7
    2fbc:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    2fc0:	88 23       	and	r24, r24
    2fc2:	11 f4       	brne	.+4      	; 0x2fc8 <mdm_get_signal_strength+0x3e>
    {
        return 0;
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	47 c0       	rjmp	.+142    	; 0x3056 <mdm_get_signal_strength+0xcc>
    }
    ptr = strchr(mdm_data, ':');
    2fc8:	6a e3       	ldi	r22, 0x3A	; 58
    2fca:	70 e0       	ldi	r23, 0x00	; 0
    2fcc:	8b e1       	ldi	r24, 0x1B	; 27
    2fce:	92 e0       	ldi	r25, 0x02	; 2
    2fd0:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    2fd4:	9a 83       	std	Y+2, r25	; 0x02
    2fd6:	89 83       	std	Y+1, r24	; 0x01
    if(!ptr)
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	9a 81       	ldd	r25, Y+2	; 0x02
    2fdc:	89 2b       	or	r24, r25
    2fde:	11 f4       	brne	.+4      	; 0x2fe4 <mdm_get_signal_strength+0x5a>
    {
        return 0;
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	39 c0       	rjmp	.+114    	; 0x3056 <mdm_get_signal_strength+0xcc>
    }
    ptr+=2;
    2fe4:	89 81       	ldd	r24, Y+1	; 0x01
    2fe6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe8:	02 96       	adiw	r24, 0x02	; 2
    2fea:	9a 83       	std	Y+2, r25	; 0x02
    2fec:	89 83       	std	Y+1, r24	; 0x01
    if(isdigit(*ptr) == FALSE)
    2fee:	89 81       	ldd	r24, Y+1	; 0x01
    2ff0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	8c 91       	ld	r24, X
    2ff6:	08 2e       	mov	r0, r24
    2ff8:	00 0c       	add	r0, r0
    2ffa:	99 0b       	sbc	r25, r25
    2ffc:	c0 97       	sbiw	r24, 0x30	; 48
    2ffe:	0a 97       	sbiw	r24, 0x0a	; 10
    3000:	10 f0       	brcs	.+4      	; 0x3006 <mdm_get_signal_strength+0x7c>
    {
        return 0;
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	28 c0       	rjmp	.+80     	; 0x3056 <mdm_get_signal_strength+0xcc>
    }
    level = strtoul(ptr, 0, 10);
    3006:	89 81       	ldd	r24, Y+1	; 0x01
    3008:	9a 81       	ldd	r25, Y+2	; 0x02
    300a:	4a e0       	ldi	r20, 0x0A	; 10
    300c:	50 e0       	ldi	r21, 0x00	; 0
    300e:	60 e0       	ldi	r22, 0x00	; 0
    3010:	70 e0       	ldi	r23, 0x00	; 0
    3012:	0e 94 00 33 	call	0x6600	; 0x6600 <strtoul>
    3016:	6f 83       	std	Y+7, r22	; 0x07
    3018:	78 87       	std	Y+8, r23	; 0x08
    301a:	89 87       	std	Y+9, r24	; 0x09
    301c:	9a 87       	std	Y+10, r25	; 0x0a
    301e:	8f 81       	ldd	r24, Y+7	; 0x07
    3020:	98 85       	ldd	r25, Y+8	; 0x08
    3022:	a9 85       	ldd	r26, Y+9	; 0x09
    3024:	ba 85       	ldd	r27, Y+10	; 0x0a
    3026:	8b 83       	std	Y+3, r24	; 0x03
    3028:	9c 83       	std	Y+4, r25	; 0x04
    302a:	ad 83       	std	Y+5, r26	; 0x05
    302c:	be 83       	std	Y+6, r27	; 0x06
    if(level>=32)
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	ad 81       	ldd	r26, Y+5	; 0x05
    3034:	be 81       	ldd	r27, Y+6	; 0x06
    3036:	80 97       	sbiw	r24, 0x20	; 32
    3038:	a1 05       	cpc	r26, r1
    303a:	b1 05       	cpc	r27, r1
    303c:	10 f0       	brcs	.+4      	; 0x3042 <mdm_get_signal_strength+0xb8>
    {
        return 0;
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	0a c0       	rjmp	.+20     	; 0x3056 <mdm_get_signal_strength+0xcc>
    }
    else
    {
        return map_s(level, 2, 31, 0, 100);
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	9c 81       	ldd	r25, Y+4	; 0x04
    3046:	04 e6       	ldi	r16, 0x64	; 100
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	4f e1       	ldi	r20, 0x1F	; 31
    304c:	50 e0       	ldi	r21, 0x00	; 0
    304e:	62 e0       	ldi	r22, 0x02	; 2
    3050:	70 e0       	ldi	r23, 0x00	; 0
    3052:	0e 94 81 17 	call	0x2f02	; 0x2f02 <map_s>
    }
    return 0;
}
    3056:	2a 96       	adiw	r28, 0x0a	; 10
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	f8 94       	cli
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	cd bf       	out	0x3d, r28	; 61
    3062:	df 91       	pop	r29
    3064:	cf 91       	pop	r28
    3066:	0f 91       	pop	r16
    3068:	08 95       	ret

0000306a <send_sms>:

// //*******************************************************************************************************************
//
uint8_t send_sms(char *str, char *phone)
{
    306a:	cf 93       	push	r28
    306c:	df 93       	push	r29
    306e:	00 d0       	rcall	.+0      	; 0x3070 <send_sms+0x6>
    3070:	00 d0       	rcall	.+0      	; 0x3072 <send_sms+0x8>
    3072:	0f 92       	push	r0
    3074:	cd b7       	in	r28, 0x3d	; 61
    3076:	de b7       	in	r29, 0x3e	; 62
    3078:	9b 83       	std	Y+3, r25	; 0x03
    307a:	8a 83       	std	Y+2, r24	; 0x02
    307c:	7d 83       	std	Y+5, r23	; 0x05
    307e:	6c 83       	std	Y+4, r22	; 0x04
    char rez;
    if(registration_status_ms(2000) == 0)
    3080:	60 ed       	ldi	r22, 0xD0	; 208
    3082:	77 e0       	ldi	r23, 0x07	; 7
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <registration_status_ms>
    308c:	88 23       	and	r24, r24
    308e:	c1 f4       	brne	.+48     	; 0x30c0 <send_sms+0x56>
    {
        if(error_gsm < 0xFFFF)
    3090:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <error_gsm>
    3094:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <error_gsm+0x1>
    3098:	01 96       	adiw	r24, 0x01	; 1
    309a:	49 f0       	breq	.+18     	; 0x30ae <send_sms+0x44>
        {
            error_gsm++;
    309c:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <error_gsm>
    30a0:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <error_gsm+0x1>
    30a4:	01 96       	adiw	r24, 0x01	; 1
    30a6:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <error_gsm+0x1>
    30aa:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <error_gsm>
        }
        save_sms_sim(str, phone);
    30ae:	2c 81       	ldd	r18, Y+4	; 0x04
    30b0:	3d 81       	ldd	r19, Y+5	; 0x05
    30b2:	8a 81       	ldd	r24, Y+2	; 0x02
    30b4:	9b 81       	ldd	r25, Y+3	; 0x03
    30b6:	b9 01       	movw	r22, r18
    30b8:	0e 94 bf 18 	call	0x317e	; 0x317e <save_sms_sim>
        return 0;
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	57 c0       	rjmp	.+174    	; 0x316e <send_sms+0x104>
    }
    if(deposit < 1)
    30c0:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <deposit>
    30c4:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <deposit+0x1>
    30c8:	18 16       	cp	r1, r24
    30ca:	19 06       	cpc	r1, r25
    30cc:	14 f0       	brlt	.+4      	; 0x30d2 <send_sms+0x68>
        return 0;
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	4e c0       	rjmp	.+156    	; 0x316e <send_sms+0x104>
    delay_ms(200);
    30d2:	88 ec       	ldi	r24, 0xC8	; 200
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
    sprintf_P(mdm_data, PSTR("AT+CMGS=\"%s\"\r\n"), phone);
    30da:	87 eb       	ldi	r24, 0xB7	; 183
    30dc:	94 e0       	ldi	r25, 0x04	; 4
    30de:	2d 81       	ldd	r18, Y+5	; 0x05
    30e0:	2f 93       	push	r18
    30e2:	2c 81       	ldd	r18, Y+4	; 0x04
    30e4:	2f 93       	push	r18
    30e6:	29 2f       	mov	r18, r25
    30e8:	2f 93       	push	r18
    30ea:	8f 93       	push	r24
    30ec:	8b e1       	ldi	r24, 0x1B	; 27
    30ee:	92 e0       	ldi	r25, 0x02	; 2
    30f0:	89 2f       	mov	r24, r25
    30f2:	8f 93       	push	r24
    30f4:	8b e1       	ldi	r24, 0x1B	; 27
    30f6:	92 e0       	ldi	r25, 0x02	; 2
    30f8:	8f 93       	push	r24
    30fa:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    30fe:	0f 90       	pop	r0
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    uart_flush();
    310a:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
    uart_send_str(mdm_data);
    310e:	8b e1       	ldi	r24, 0x1B	; 27
    3110:	92 e0       	ldi	r25, 0x02	; 2
    3112:	0e 94 8c 30 	call	0x6118	; 0x6118 <uart_send_str>
    if(mdm_wait_prompt_ms(1000) == 0)
    3116:	88 ee       	ldi	r24, 0xE8	; 232
    3118:	93 e0       	ldi	r25, 0x03	; 3
    311a:	0e 94 57 15 	call	0x2aae	; 0x2aae <mdm_wait_prompt_ms>
    311e:	88 23       	and	r24, r24
    3120:	49 f4       	brne	.+18     	; 0x3134 <send_sms+0xca>
    {
        save_sms_sim(str, phone);
    3122:	2c 81       	ldd	r18, Y+4	; 0x04
    3124:	3d 81       	ldd	r19, Y+5	; 0x05
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	9b 81       	ldd	r25, Y+3	; 0x03
    312a:	b9 01       	movw	r22, r18
    312c:	0e 94 bf 18 	call	0x317e	; 0x317e <save_sms_sim>
        return 0;
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	1d c0       	rjmp	.+58     	; 0x316e <send_sms+0x104>
    }
    uart_send_str(str);
    3134:	8a 81       	ldd	r24, Y+2	; 0x02
    3136:	9b 81       	ldd	r25, Y+3	; 0x03
    3138:	0e 94 8c 30 	call	0x6118	; 0x6118 <uart_send_str>
    delay_ms(100);
    313c:	84 e6       	ldi	r24, 0x64	; 100
    313e:	90 e0       	ldi	r25, 0x00	; 0
    3140:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
    uart_send_byte(0x1A);
    3144:	8a e1       	ldi	r24, 0x1A	; 26
    3146:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <uart_send_byte>
    rez = mdm_wait_cmd_ms(60000, (const char*)RESPON_CMGS);
    314a:	6d e5       	ldi	r22, 0x5D	; 93
    314c:	71 e0       	ldi	r23, 0x01	; 1
    314e:	80 e6       	ldi	r24, 0x60	; 96
    3150:	9a ee       	ldi	r25, 0xEA	; 234
    3152:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3156:	89 83       	std	Y+1, r24	; 0x01
    if(!rez)
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	88 23       	and	r24, r24
    315c:	39 f4       	brne	.+14     	; 0x316c <send_sms+0x102>
    {
        save_sms_sim(str, phone);
    315e:	2c 81       	ldd	r18, Y+4	; 0x04
    3160:	3d 81       	ldd	r19, Y+5	; 0x05
    3162:	8a 81       	ldd	r24, Y+2	; 0x02
    3164:	9b 81       	ldd	r25, Y+3	; 0x03
    3166:	b9 01       	movw	r22, r18
    3168:	0e 94 bf 18 	call	0x317e	; 0x317e <save_sms_sim>
        //softuart_puts_p(PSTR( "save sms"));
    }
    return rez;
    316c:	89 81       	ldd	r24, Y+1	; 0x01
}
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	0f 90       	pop	r0
    3178:	df 91       	pop	r29
    317a:	cf 91       	pop	r28
    317c:	08 95       	ret

0000317e <save_sms_sim>:

static uint8_t save_sms_sim(char *_msg, char *_phone)
{
    317e:	cf 93       	push	r28
    3180:	df 93       	push	r29
    3182:	00 d0       	rcall	.+0      	; 0x3184 <save_sms_sim+0x6>
    3184:	00 d0       	rcall	.+0      	; 0x3186 <save_sms_sim+0x8>
    3186:	00 d0       	rcall	.+0      	; 0x3188 <save_sms_sim+0xa>
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	9c 83       	std	Y+4, r25	; 0x04
    318e:	8b 83       	std	Y+3, r24	; 0x03
    3190:	7e 83       	std	Y+6, r23	; 0x06
    3192:	6d 83       	std	Y+5, r22	; 0x05

    uint8_t rez = 0;
    3194:	19 82       	std	Y+1, r1	; 0x01
    sprintf_P(mdm_data, PSTR("AT+CMGW=\"%s\"\r\n"), _phone);
    3196:	86 ec       	ldi	r24, 0xC6	; 198
    3198:	94 e0       	ldi	r25, 0x04	; 4
    319a:	2e 81       	ldd	r18, Y+6	; 0x06
    319c:	2f 93       	push	r18
    319e:	2d 81       	ldd	r18, Y+5	; 0x05
    31a0:	2f 93       	push	r18
    31a2:	29 2f       	mov	r18, r25
    31a4:	2f 93       	push	r18
    31a6:	8f 93       	push	r24
    31a8:	8b e1       	ldi	r24, 0x1B	; 27
    31aa:	92 e0       	ldi	r25, 0x02	; 2
    31ac:	89 2f       	mov	r24, r25
    31ae:	8f 93       	push	r24
    31b0:	8b e1       	ldi	r24, 0x1B	; 27
    31b2:	92 e0       	ldi	r25, 0x02	; 2
    31b4:	8f 93       	push	r24
    31b6:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    for(uint8_t i = 0; i < 10; i++)
    31c6:	1a 82       	std	Y+2, r1	; 0x02
    31c8:	32 c0       	rjmp	.+100    	; 0x322e <save_sms_sim+0xb0>
    {
        if(i!=0)
    31ca:	8a 81       	ldd	r24, Y+2	; 0x02
    31cc:	88 23       	and	r24, r24
    31ce:	21 f0       	breq	.+8      	; 0x31d8 <save_sms_sim+0x5a>
            delay_ms(300);
    31d0:	8c e2       	ldi	r24, 0x2C	; 44
    31d2:	91 e0       	ldi	r25, 0x01	; 1
    31d4:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        uart_flush();
    31d8:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
        uart_send_str(mdm_data);
    31dc:	8b e1       	ldi	r24, 0x1B	; 27
    31de:	92 e0       	ldi	r25, 0x02	; 2
    31e0:	0e 94 8c 30 	call	0x6118	; 0x6118 <uart_send_str>
        if(mdm_wait_prompt_ms(3000) == FALSE)
    31e4:	88 eb       	ldi	r24, 0xB8	; 184
    31e6:	9b e0       	ldi	r25, 0x0B	; 11
    31e8:	0e 94 57 15 	call	0x2aae	; 0x2aae <mdm_wait_prompt_ms>
    31ec:	88 23       	and	r24, r24
    31ee:	d9 f0       	breq	.+54     	; 0x3226 <save_sms_sim+0xa8>
        {
            continue;
        }
        uart_flush();
    31f0:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
        uart_send_str(_msg);
    31f4:	8b 81       	ldd	r24, Y+3	; 0x03
    31f6:	9c 81       	ldd	r25, Y+4	; 0x04
    31f8:	0e 94 8c 30 	call	0x6118	; 0x6118 <uart_send_str>
        delay_ms(20);
    31fc:	84 e1       	ldi	r24, 0x14	; 20
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        uart_send_byte(0x1A);
    3204:	8a e1       	ldi	r24, 0x1A	; 26
    3206:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <uart_send_byte>
        rez = mdm_wait_cmd_ms(2000, (const char*)RESPON_OK);
    320a:	6e e4       	ldi	r22, 0x4E	; 78
    320c:	71 e0       	ldi	r23, 0x01	; 1
    320e:	80 ed       	ldi	r24, 0xD0	; 208
    3210:	97 e0       	ldi	r25, 0x07	; 7
    3212:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3216:	89 83       	std	Y+1, r24	; 0x01
        if(rez == 1)
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	81 30       	cpi	r24, 0x01	; 1
    321c:	29 f4       	brne	.+10     	; 0x3228 <save_sms_sim+0xaa>
        {
            unsent_sms = 1;
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <unsent_sms>
            break;
    3224:	07 c0       	rjmp	.+14     	; 0x3234 <save_sms_sim+0xb6>
            continue;
    3226:	00 00       	nop
    for(uint8_t i = 0; i < 10; i++)
    3228:	8a 81       	ldd	r24, Y+2	; 0x02
    322a:	8f 5f       	subi	r24, 0xFF	; 255
    322c:	8a 83       	std	Y+2, r24	; 0x02
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	8a 30       	cpi	r24, 0x0A	; 10
    3232:	58 f2       	brcs	.-106    	; 0x31ca <save_sms_sim+0x4c>
        }
    }
    return rez;
    3234:	89 81       	ldd	r24, Y+1	; 0x01
}
    3236:	26 96       	adiw	r28, 0x06	; 6
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	f8 94       	cli
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	df 91       	pop	r29
    3244:	cf 91       	pop	r28
    3246:	08 95       	ret

00003248 <send_sms_p>:

uint8_t send_sms_p(const char *str, char *phone)
{
    3248:	cf 93       	push	r28
    324a:	df 93       	push	r29
    324c:	00 d0       	rcall	.+0      	; 0x324e <send_sms_p+0x6>
    324e:	00 d0       	rcall	.+0      	; 0x3250 <send_sms_p+0x8>
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	9b 83       	std	Y+3, r25	; 0x03
    3258:	8a 83       	std	Y+2, r24	; 0x02
    325a:	7d 83       	std	Y+5, r23	; 0x05
    325c:	6c 83       	std	Y+4, r22	; 0x04
    char rez;
    if(registration_status_ms(2000) == FALSE)
    325e:	60 ed       	ldi	r22, 0xD0	; 208
    3260:	77 e0       	ldi	r23, 0x07	; 7
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <registration_status_ms>
    326a:	88 23       	and	r24, r24
    326c:	49 f4       	brne	.+18     	; 0x3280 <send_sms_p+0x38>
    {
        save_sms_sim((char*)str, phone);
    326e:	2c 81       	ldd	r18, Y+4	; 0x04
    3270:	3d 81       	ldd	r19, Y+5	; 0x05
    3272:	8a 81       	ldd	r24, Y+2	; 0x02
    3274:	9b 81       	ldd	r25, Y+3	; 0x03
    3276:	b9 01       	movw	r22, r18
    3278:	0e 94 bf 18 	call	0x317e	; 0x317e <save_sms_sim>
        return FALSE;
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	57 c0       	rjmp	.+174    	; 0x332e <send_sms_p+0xe6>
    }
    if(deposit < 1)
    3280:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <deposit>
    3284:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <deposit+0x1>
    3288:	18 16       	cp	r1, r24
    328a:	19 06       	cpc	r1, r25
    328c:	14 f0       	brlt	.+4      	; 0x3292 <send_sms_p+0x4a>
        return 0;
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	4e c0       	rjmp	.+156    	; 0x332e <send_sms_p+0xe6>
    delay_ms(200);
    3292:	88 ec       	ldi	r24, 0xC8	; 200
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
    sprintf_P(mdm_data, PSTR("AT+CMGS=\"%s\"\r\n"), phone);
    329a:	85 ed       	ldi	r24, 0xD5	; 213
    329c:	94 e0       	ldi	r25, 0x04	; 4
    329e:	2d 81       	ldd	r18, Y+5	; 0x05
    32a0:	2f 93       	push	r18
    32a2:	2c 81       	ldd	r18, Y+4	; 0x04
    32a4:	2f 93       	push	r18
    32a6:	29 2f       	mov	r18, r25
    32a8:	2f 93       	push	r18
    32aa:	8f 93       	push	r24
    32ac:	8b e1       	ldi	r24, 0x1B	; 27
    32ae:	92 e0       	ldi	r25, 0x02	; 2
    32b0:	89 2f       	mov	r24, r25
    32b2:	8f 93       	push	r24
    32b4:	8b e1       	ldi	r24, 0x1B	; 27
    32b6:	92 e0       	ldi	r25, 0x02	; 2
    32b8:	8f 93       	push	r24
    32ba:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    uart_flush();
    32ca:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
    uart_send_str(mdm_data);
    32ce:	8b e1       	ldi	r24, 0x1B	; 27
    32d0:	92 e0       	ldi	r25, 0x02	; 2
    32d2:	0e 94 8c 30 	call	0x6118	; 0x6118 <uart_send_str>
    if(mdm_wait_prompt_ms(1000) == FALSE)
    32d6:	88 ee       	ldi	r24, 0xE8	; 232
    32d8:	93 e0       	ldi	r25, 0x03	; 3
    32da:	0e 94 57 15 	call	0x2aae	; 0x2aae <mdm_wait_prompt_ms>
    32de:	88 23       	and	r24, r24
    32e0:	49 f4       	brne	.+18     	; 0x32f4 <send_sms_p+0xac>
    {
        save_sms_sim((char *)str, phone);
    32e2:	2c 81       	ldd	r18, Y+4	; 0x04
    32e4:	3d 81       	ldd	r19, Y+5	; 0x05
    32e6:	8a 81       	ldd	r24, Y+2	; 0x02
    32e8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ea:	b9 01       	movw	r22, r18
    32ec:	0e 94 bf 18 	call	0x317e	; 0x317e <save_sms_sim>
        return FALSE;
    32f0:	80 e0       	ldi	r24, 0x00	; 0
    32f2:	1d c0       	rjmp	.+58     	; 0x332e <send_sms_p+0xe6>
    }
    uart_send_str_p((const char*)str);
    32f4:	8a 81       	ldd	r24, Y+2	; 0x02
    32f6:	9b 81       	ldd	r25, Y+3	; 0x03
    32f8:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
    delay_ms(100);
    32fc:	84 e6       	ldi	r24, 0x64	; 100
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
    uart_send_byte(0x1A);
    3304:	8a e1       	ldi	r24, 0x1A	; 26
    3306:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <uart_send_byte>
    rez = mdm_wait_cmd_ms(60000, (const char*)RESPON_CMGS);
    330a:	6d e5       	ldi	r22, 0x5D	; 93
    330c:	71 e0       	ldi	r23, 0x01	; 1
    330e:	80 e6       	ldi	r24, 0x60	; 96
    3310:	9a ee       	ldi	r25, 0xEA	; 234
    3312:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3316:	89 83       	std	Y+1, r24	; 0x01
    if(!rez)
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	88 23       	and	r24, r24
    331c:	39 f4       	brne	.+14     	; 0x332c <send_sms_p+0xe4>
    {
        save_sms_sim((char*)str, phone);
    331e:	2c 81       	ldd	r18, Y+4	; 0x04
    3320:	3d 81       	ldd	r19, Y+5	; 0x05
    3322:	8a 81       	ldd	r24, Y+2	; 0x02
    3324:	9b 81       	ldd	r25, Y+3	; 0x03
    3326:	b9 01       	movw	r22, r18
    3328:	0e 94 bf 18 	call	0x317e	; 0x317e <save_sms_sim>
    }
    return rez;
    332c:	89 81       	ldd	r24, Y+1	; 0x01
}
    332e:	0f 90       	pop	r0
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	df 91       	pop	r29
    333a:	cf 91       	pop	r28
    333c:	08 95       	ret

0000333e <send_sms_admins>:
//
// //*******************************************************************************************************************
//
void send_sms_admins(const char *_msg)
{
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
    3342:	00 d0       	rcall	.+0      	; 0x3344 <send_sms_admins+0x6>
    3344:	0f 92       	push	r0
    3346:	cd b7       	in	r28, 0x3d	; 61
    3348:	de b7       	in	r29, 0x3e	; 62
    334a:	9b 83       	std	Y+3, r25	; 0x03
    334c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
    334e:	19 82       	std	Y+1, r1	; 0x01
    if(deposit < 1)
    3350:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <deposit>
    3354:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <deposit+0x1>
    3358:	18 16       	cp	r1, r24
    335a:	19 06       	cpc	r1, r25
    335c:	d4 f5       	brge	.+116    	; 0x33d2 <send_sms_admins+0x94>
        return;
    while(config.admin_phone[i][0]=='+' && i<TOTAL_ADMIN_NUMBER)
    335e:	21 c0       	rjmp	.+66     	; 0x33a2 <send_sms_admins+0x64>
    {
        if(i != 0)
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	88 23       	and	r24, r24
    3364:	21 f0       	breq	.+8      	; 0x336e <send_sms_admins+0x30>
            delay_ms(1000);
    3366:	88 ee       	ldi	r24, 0xE8	; 232
    3368:	93 e0       	ldi	r25, 0x03	; 3
    336a:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        send_sms_p(_msg, &config.admin_phone[i][0]);
    336e:	89 81       	ldd	r24, Y+1	; 0x01
    3370:	28 2f       	mov	r18, r24
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	c9 01       	movw	r24, r18
    3376:	88 0f       	add	r24, r24
    3378:	99 1f       	adc	r25, r25
    337a:	88 0f       	add	r24, r24
    337c:	99 1f       	adc	r25, r25
    337e:	88 0f       	add	r24, r24
    3380:	99 1f       	adc	r25, r25
    3382:	82 1b       	sub	r24, r18
    3384:	93 0b       	sbc	r25, r19
    3386:	88 0f       	add	r24, r24
    3388:	99 1f       	adc	r25, r25
    338a:	05 96       	adiw	r24, 0x05	; 5
    338c:	9c 01       	movw	r18, r24
    338e:	29 53       	subi	r18, 0x39	; 57
    3390:	3e 4f       	sbci	r19, 0xFE	; 254
    3392:	8a 81       	ldd	r24, Y+2	; 0x02
    3394:	9b 81       	ldd	r25, Y+3	; 0x03
    3396:	b9 01       	movw	r22, r18
    3398:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
        i++;
    339c:	89 81       	ldd	r24, Y+1	; 0x01
    339e:	8f 5f       	subi	r24, 0xFF	; 255
    33a0:	89 83       	std	Y+1, r24	; 0x01
    while(config.admin_phone[i][0]=='+' && i<TOTAL_ADMIN_NUMBER)
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	28 2f       	mov	r18, r24
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	c9 01       	movw	r24, r18
    33aa:	88 0f       	add	r24, r24
    33ac:	99 1f       	adc	r25, r25
    33ae:	88 0f       	add	r24, r24
    33b0:	99 1f       	adc	r25, r25
    33b2:	88 0f       	add	r24, r24
    33b4:	99 1f       	adc	r25, r25
    33b6:	82 1b       	sub	r24, r18
    33b8:	93 0b       	sbc	r25, r19
    33ba:	88 0f       	add	r24, r24
    33bc:	99 1f       	adc	r25, r25
    33be:	84 53       	subi	r24, 0x34	; 52
    33c0:	9e 4f       	sbci	r25, 0xFE	; 254
    33c2:	fc 01       	movw	r30, r24
    33c4:	80 81       	ld	r24, Z
    33c6:	8b 32       	cpi	r24, 0x2B	; 43
    33c8:	29 f4       	brne	.+10     	; 0x33d4 <send_sms_admins+0x96>
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	85 30       	cpi	r24, 0x05	; 5
    33ce:	40 f2       	brcs	.-112    	; 0x3360 <send_sms_admins+0x22>
    33d0:	01 c0       	rjmp	.+2      	; 0x33d4 <send_sms_admins+0x96>
        return;
    33d2:	00 00       	nop
    }
}
    33d4:	0f 90       	pop	r0
    33d6:	0f 90       	pop	r0
    33d8:	0f 90       	pop	r0
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	08 95       	ret

000033e0 <alarm_play_file>:
//****************************************************************************
void alarm_play_file(char * file)
{
    33e0:	cf 93       	push	r28
    33e2:	df 93       	push	r29
    33e4:	00 d0       	rcall	.+0      	; 0x33e6 <alarm_play_file+0x6>
    33e6:	0f 92       	push	r0
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	9b 83       	std	Y+3, r25	; 0x03
    33ee:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
    33f0:	19 82       	std	Y+1, r1	; 0x01
    if(deposit < 1)
    33f2:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <deposit>
    33f6:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <deposit+0x1>
    33fa:	18 16       	cp	r1, r24
    33fc:	19 06       	cpc	r1, r25
    33fe:	cc f5       	brge	.+114    	; 0x3472 <alarm_play_file+0x92>
        return;
    while(config.admin_phone[i][0]=='+' && i<TOTAL_ADMIN_NUMBER)
    3400:	20 c0       	rjmp	.+64     	; 0x3442 <alarm_play_file+0x62>
    {
        if(i != 0)
    3402:	89 81       	ldd	r24, Y+1	; 0x01
    3404:	88 23       	and	r24, r24
    3406:	21 f0       	breq	.+8      	; 0x3410 <alarm_play_file+0x30>
            delay_ms(1000);
    3408:	88 ee       	ldi	r24, 0xE8	; 232
    340a:	93 e0       	ldi	r25, 0x03	; 3
    340c:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        call_to(&config.admin_phone[i][0], file);
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	28 2f       	mov	r18, r24
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	c9 01       	movw	r24, r18
    3418:	88 0f       	add	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	88 0f       	add	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	88 0f       	add	r24, r24
    3422:	99 1f       	adc	r25, r25
    3424:	82 1b       	sub	r24, r18
    3426:	93 0b       	sbc	r25, r19
    3428:	88 0f       	add	r24, r24
    342a:	99 1f       	adc	r25, r25
    342c:	05 96       	adiw	r24, 0x05	; 5
    342e:	89 53       	subi	r24, 0x39	; 57
    3430:	9e 4f       	sbci	r25, 0xFE	; 254
    3432:	2a 81       	ldd	r18, Y+2	; 0x02
    3434:	3b 81       	ldd	r19, Y+3	; 0x03
    3436:	b9 01       	movw	r22, r18
    3438:	0e 94 0d 14 	call	0x281a	; 0x281a <call_to>
        i++;
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	8f 5f       	subi	r24, 0xFF	; 255
    3440:	89 83       	std	Y+1, r24	; 0x01
    while(config.admin_phone[i][0]=='+' && i<TOTAL_ADMIN_NUMBER)
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	28 2f       	mov	r18, r24
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	c9 01       	movw	r24, r18
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	88 0f       	add	r24, r24
    3450:	99 1f       	adc	r25, r25
    3452:	88 0f       	add	r24, r24
    3454:	99 1f       	adc	r25, r25
    3456:	82 1b       	sub	r24, r18
    3458:	93 0b       	sbc	r25, r19
    345a:	88 0f       	add	r24, r24
    345c:	99 1f       	adc	r25, r25
    345e:	84 53       	subi	r24, 0x34	; 52
    3460:	9e 4f       	sbci	r25, 0xFE	; 254
    3462:	fc 01       	movw	r30, r24
    3464:	80 81       	ld	r24, Z
    3466:	8b 32       	cpi	r24, 0x2B	; 43
    3468:	29 f4       	brne	.+10     	; 0x3474 <alarm_play_file+0x94>
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	85 30       	cpi	r24, 0x05	; 5
    346e:	48 f2       	brcs	.-110    	; 0x3402 <alarm_play_file+0x22>
    3470:	01 c0       	rjmp	.+2      	; 0x3474 <alarm_play_file+0x94>
        return;
    3472:	00 00       	nop
    }
}
    3474:	0f 90       	pop	r0
    3476:	0f 90       	pop	r0
    3478:	0f 90       	pop	r0
    347a:	df 91       	pop	r29
    347c:	cf 91       	pop	r28
    347e:	08 95       	ret

00003480 <get_message_from_mdm>:
//***************************************************
uint8_t get_message_from_mdm()
{
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	00 d0       	rcall	.+0      	; 0x3486 <get_message_from_mdm+0x6>
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
    char *ptr;
    ptr = gsm_poll_for_string();
    348a:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <gsm_poll_for_string>
    348e:	9a 83       	std	Y+2, r25	; 0x02
    3490:	89 83       	std	Y+1, r24	; 0x01

    if(ptr)
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	9a 81       	ldd	r25, Y+2	; 0x02
    3496:	89 2b       	or	r24, r25
    3498:	09 f4       	brne	.+2      	; 0x349c <get_message_from_mdm+0x1c>
    349a:	b9 c0       	rjmp	.+370    	; 0x360e <get_message_from_mdm+0x18e>
    {
        //softuart_puts_ln(ptr);
        if(strstr_P(ptr, PSTR("+CMTI:"))) // пришла асинхронная индикация о принятой СМСке
    349c:	24 ee       	ldi	r18, 0xE4	; 228
    349e:	34 e0       	ldi	r19, 0x04	; 4
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	9a 81       	ldd	r25, Y+2	; 0x02
    34a4:	b9 01       	movw	r22, r18
    34a6:	0e 94 87 34 	call	0x690e	; 0x690e <strstr_P>
    34aa:	89 2b       	or	r24, r25
    34ac:	29 f0       	breq	.+10     	; 0x34b8 <get_message_from_mdm+0x38>
        {
            unread_sms = 1;
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <unread_sms>
            return 1;
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	ac c0       	rjmp	.+344    	; 0x3610 <get_message_from_mdm+0x190>
        }

        else if(strstr_P(ptr, PSTR("+CLIP:")))   // пришла асинхронная индикация о звонке
    34b8:	2b ee       	ldi	r18, 0xEB	; 235
    34ba:	34 e0       	ldi	r19, 0x04	; 4
    34bc:	89 81       	ldd	r24, Y+1	; 0x01
    34be:	9a 81       	ldd	r25, Y+2	; 0x02
    34c0:	b9 01       	movw	r22, r18
    34c2:	0e 94 87 34 	call	0x690e	; 0x690e <strstr_P>
    34c6:	89 2b       	or	r24, r25
    34c8:	29 f1       	breq	.+74     	; 0x3514 <get_message_from_mdm+0x94>
        {
            ptr += 6;
    34ca:	89 81       	ldd	r24, Y+1	; 0x01
    34cc:	9a 81       	ldd	r25, Y+2	; 0x02
    34ce:	06 96       	adiw	r24, 0x06	; 6
    34d0:	9a 83       	std	Y+2, r25	; 0x02
    34d2:	89 83       	std	Y+1, r24	; 0x01
            ptr = strchr(ptr, '+');
    34d4:	89 81       	ldd	r24, Y+1	; 0x01
    34d6:	9a 81       	ldd	r25, Y+2	; 0x02
    34d8:	6b e2       	ldi	r22, 0x2B	; 43
    34da:	70 e0       	ldi	r23, 0x00	; 0
    34dc:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    34e0:	9a 83       	std	Y+2, r25	; 0x02
    34e2:	89 83       	std	Y+1, r24	; 0x01
            //memcpy(phone_of_incomong_call, ptr, 13);
            if(find_phone_in_phone_list(ptr, ADMIN_LIST)) // ищем телефон в списке юзеров
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	9a 81       	ldd	r25, Y+2	; 0x02
    34e8:	61 e0       	ldi	r22, 0x01	; 1
    34ea:	0e 94 bd 24 	call	0x497a	; 0x497a <find_phone_in_phone_list>
    34ee:	88 23       	and	r24, r24
    34f0:	61 f0       	breq	.+24     	; 0x350a <get_message_from_mdm+0x8a>
            {
                call_from_user = 1;
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <call_from_user>
                memcpy(rec_phone_number, ptr, 13); // сохраняем номер телефона, с которого произошел звонок
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
    34fa:	9a 81       	ldd	r25, Y+2	; 0x02
    34fc:	4d e0       	ldi	r20, 0x0D	; 13
    34fe:	50 e0       	ldi	r21, 0x00	; 0
    3500:	bc 01       	movw	r22, r24
    3502:	8b e5       	ldi	r24, 0x5B	; 91
    3504:	93 e0       	ldi	r25, 0x03	; 3
    3506:	0e 94 b3 34 	call	0x6966	; 0x6966 <memcpy>
//            {
//                call_from_user = 1;
//                memcpy(rec_phone_number, ptr, 13);
//                softuart_puts_p(PSTR("test user ok"));
//            }
            incoming_call = 1; // вызов будет сброшен в основном цикле программы
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	80 93 6c 03 	sts	0x036C, r24	; 0x80036c <incoming_call>
            return 1;
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	7e c0       	rjmp	.+252    	; 0x3610 <get_message_from_mdm+0x190>
        }

        else if(strstr_P(ptr, PSTR("+DTMF:")))   // DTFM msg
    3514:	22 ef       	ldi	r18, 0xF2	; 242
    3516:	34 e0       	ldi	r19, 0x04	; 4
    3518:	89 81       	ldd	r24, Y+1	; 0x01
    351a:	9a 81       	ldd	r25, Y+2	; 0x02
    351c:	b9 01       	movw	r22, r18
    351e:	0e 94 87 34 	call	0x690e	; 0x690e <strstr_P>
    3522:	89 2b       	or	r24, r25
    3524:	09 f4       	brne	.+2      	; 0x3528 <get_message_from_mdm+0xa8>
    3526:	71 c0       	rjmp	.+226    	; 0x360a <get_message_from_mdm+0x18a>
        {
            ptr += 6;
    3528:	89 81       	ldd	r24, Y+1	; 0x01
    352a:	9a 81       	ldd	r25, Y+2	; 0x02
    352c:	06 96       	adiw	r24, 0x06	; 6
    352e:	9a 83       	std	Y+2, r25	; 0x02
    3530:	89 83       	std	Y+1, r24	; 0x01
            if(isdigit(*++ptr))
    3532:	89 81       	ldd	r24, Y+1	; 0x01
    3534:	9a 81       	ldd	r25, Y+2	; 0x02
    3536:	01 96       	adiw	r24, 0x01	; 1
    3538:	9a 83       	std	Y+2, r25	; 0x02
    353a:	89 83       	std	Y+1, r24	; 0x01
    353c:	89 81       	ldd	r24, Y+1	; 0x01
    353e:	9a 81       	ldd	r25, Y+2	; 0x02
    3540:	fc 01       	movw	r30, r24
    3542:	80 81       	ld	r24, Z
    3544:	08 2e       	mov	r0, r24
    3546:	00 0c       	add	r0, r0
    3548:	99 0b       	sbc	r25, r25
    354a:	c0 97       	sbiw	r24, 0x30	; 48
    354c:	0a 97       	sbiw	r24, 0x0a	; 10
    354e:	08 f0       	brcs	.+2      	; 0x3552 <get_message_from_mdm+0xd2>
    3550:	5a c0       	rjmp	.+180    	; 0x3606 <get_message_from_mdm+0x186>
            {
                switch( ptr[0]) 																													//	Получаем значение состояния вызова.
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	9a 81       	ldd	r25, Y+2	; 0x02
    3556:	fc 01       	movw	r30, r24
    3558:	80 81       	ld	r24, Z
    355a:	08 2e       	mov	r0, r24
    355c:	00 0c       	add	r0, r0
    355e:	99 0b       	sbc	r25, r25
    3560:	aa 0b       	sbc	r26, r26
    3562:	bb 0b       	sbc	r27, r27
    3564:	c0 97       	sbiw	r24, 0x30	; 48
    3566:	a1 09       	sbc	r26, r1
    3568:	b1 09       	sbc	r27, r1
    356a:	88 30       	cpi	r24, 0x08	; 8
    356c:	91 05       	cpc	r25, r1
    356e:	a1 05       	cpc	r26, r1
    3570:	b1 05       	cpc	r27, r1
    3572:	08 f0       	brcs	.+2      	; 0x3576 <get_message_from_mdm+0xf6>
    3574:	45 c0       	rjmp	.+138    	; 0x3600 <get_message_from_mdm+0x180>
    3576:	84 55       	subi	r24, 0x54	; 84
    3578:	97 4c       	sbci	r25, 0xC7	; 199
    357a:	fc 01       	movw	r30, r24
    357c:	0c 94 b8 31 	jmp	0x6370	; 0x6370 <__tablejump2__>
                {
                case '0':          // press 0
//                    play_amr(END_CALL,'0');
//                    delay_ms(3000);
                    hang_up_call();
    3580:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <hang_up_call>
                    break;
    3584:	40 c0       	rjmp	.+128    	; 0x3606 <get_message_from_mdm+0x186>
                case '1':           //press 1
                    set_mode_gsm(GSM_ON_CHAPEKA);
    3586:	82 e0       	ldi	r24, 0x02	; 2
    3588:	0e 94 16 11 	call	0x222c	; 0x222c <set_mode_gsm>
                    play_amr(CHAPEKA_ON,'0');
    358c:	60 e3       	ldi	r22, 0x30	; 48
    358e:	84 e3       	ldi	r24, 0x34	; 52
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <play_amr>
                    EEPROM_update();
    3596:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
                    break;
    359a:	35 c0       	rjmp	.+106    	; 0x3606 <get_message_from_mdm+0x186>
                case '2':
                    set_mode_gsm(GSM_ON_UTKINA);
    359c:	81 e0       	ldi	r24, 0x01	; 1
    359e:	0e 94 16 11 	call	0x222c	; 0x222c <set_mode_gsm>
                    play_amr(UTKINA_ON,'0');
    35a2:	60 e3       	ldi	r22, 0x30	; 48
    35a4:	8a e3       	ldi	r24, 0x3A	; 58
    35a6:	91 e0       	ldi	r25, 0x01	; 1
    35a8:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <play_amr>
                    EEPROM_update();
    35ac:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
                    break;
    35b0:	2a c0       	rjmp	.+84     	; 0x3606 <get_message_from_mdm+0x186>
                case '3':
                    if(deposit < 1)
    35b2:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <deposit>
    35b6:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <deposit+0x1>
    35ba:	18 16       	cp	r1, r24
    35bc:	19 06       	cpc	r1, r25
    35be:	14 f0       	brlt	.+4      	; 0x35c4 <get_message_from_mdm+0x144>
                        return 0;
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	26 c0       	rjmp	.+76     	; 0x3610 <get_message_from_mdm+0x190>
                    play_amr(REPORT_SEND,'0');
    35c4:	60 e3       	ldi	r22, 0x30	; 48
    35c6:	80 e4       	ldi	r24, 0x40	; 64
    35c8:	91 e0       	ldi	r25, 0x01	; 1
    35ca:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <play_amr>
                    delay_ms(2000);
    35ce:	80 ed       	ldi	r24, 0xD0	; 208
    35d0:	97 e0       	ldi	r25, 0x07	; 7
    35d2:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
                    hang_up_call();
    35d6:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <hang_up_call>
                    delay_ms(1000);
    35da:	88 ee       	ldi	r24, 0xE8	; 232
    35dc:	93 e0       	ldi	r25, 0x03	; 3
    35de:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
                    send_sms_report(rec_phone_number);
    35e2:	8b e5       	ldi	r24, 0x5B	; 91
    35e4:	93 e0       	ldi	r25, 0x03	; 3
    35e6:	0e 94 b1 08 	call	0x1162	; 0x1162 <send_sms_report>
                    break;
    35ea:	0d c0       	rjmp	.+26     	; 0x3606 <get_message_from_mdm+0x186>
                case '4':
                    play_amr(RST_LAN,'0');
    35ec:	60 e3       	ldi	r22, 0x30	; 48
    35ee:	87 e4       	ldi	r24, 0x47	; 71
    35f0:	91 e0       	ldi	r25, 0x01	; 1
    35f2:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <play_amr>
                    delay_ms(3000);
    35f6:	88 eb       	ldi	r24, 0xB8	; 184
    35f8:	9b e0       	ldi	r25, 0x0B	; 11
    35fa:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
                    //set_mode_gsm(GSM_REBOOT_LAN);
                    break;
    35fe:	03 c0       	rjmp	.+6      	; 0x3606 <get_message_from_mdm+0x186>
                case '6':
                    break;
                case '7':
                    break;
                default:
                    break;	//	Состояние текущего вызова
    3600:	00 00       	nop
    3602:	01 c0       	rjmp	.+2      	; 0x3606 <get_message_from_mdm+0x186>
                    break;
    3604:	00 00       	nop
                }
            }
            return 1;
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	03 c0       	rjmp	.+6      	; 0x3610 <get_message_from_mdm+0x190>
        }
        return 1;
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	01 c0       	rjmp	.+2      	; 0x3610 <get_message_from_mdm+0x190>
    }
    return 0;
    360e:	80 e0       	ldi	r24, 0x00	; 0
}
    3610:	0f 90       	pop	r0
    3612:	0f 90       	pop	r0
    3614:	df 91       	pop	r29
    3616:	cf 91       	pop	r28
    3618:	08 95       	ret

0000361a <check_phone_string>:
//
//
// //*******************************************************************************************************************
// // проверка строки, содержащей телефонный номер.
uint8_t check_phone_string(char *ptr)
{
    361a:	cf 93       	push	r28
    361c:	df 93       	push	r29
    361e:	00 d0       	rcall	.+0      	; 0x3620 <check_phone_string+0x6>
    3620:	0f 92       	push	r0
    3622:	cd b7       	in	r28, 0x3d	; 61
    3624:	de b7       	in	r29, 0x3e	; 62
    3626:	9b 83       	std	Y+3, r25	; 0x03
    3628:	8a 83       	std	Y+2, r24	; 0x02
    char i;

    if(*ptr++ != '+')
    362a:	8a 81       	ldd	r24, Y+2	; 0x02
    362c:	9b 81       	ldd	r25, Y+3	; 0x03
    362e:	9c 01       	movw	r18, r24
    3630:	2f 5f       	subi	r18, 0xFF	; 255
    3632:	3f 4f       	sbci	r19, 0xFF	; 255
    3634:	3b 83       	std	Y+3, r19	; 0x03
    3636:	2a 83       	std	Y+2, r18	; 0x02
    3638:	fc 01       	movw	r30, r24
    363a:	80 81       	ld	r24, Z
    363c:	8b 32       	cpi	r24, 0x2B	; 43
    363e:	11 f0       	breq	.+4      	; 0x3644 <check_phone_string+0x2a>
        return FALSE;
    3640:	80 e0       	ldi	r24, 0x00	; 0
    3642:	1a c0       	rjmp	.+52     	; 0x3678 <check_phone_string+0x5e>
    for(i=0; i<12; i++)
    3644:	19 82       	std	Y+1, r1	; 0x01
    3646:	14 c0       	rjmp	.+40     	; 0x3670 <check_phone_string+0x56>
    {
        if(!isdigit(*ptr++))
    3648:	8a 81       	ldd	r24, Y+2	; 0x02
    364a:	9b 81       	ldd	r25, Y+3	; 0x03
    364c:	9c 01       	movw	r18, r24
    364e:	2f 5f       	subi	r18, 0xFF	; 255
    3650:	3f 4f       	sbci	r19, 0xFF	; 255
    3652:	3b 83       	std	Y+3, r19	; 0x03
    3654:	2a 83       	std	Y+2, r18	; 0x02
    3656:	fc 01       	movw	r30, r24
    3658:	80 81       	ld	r24, Z
    365a:	08 2e       	mov	r0, r24
    365c:	00 0c       	add	r0, r0
    365e:	99 0b       	sbc	r25, r25
    3660:	c0 97       	sbiw	r24, 0x30	; 48
    3662:	0a 97       	sbiw	r24, 0x0a	; 10
    3664:	10 f0       	brcs	.+4      	; 0x366a <check_phone_string+0x50>
        {
            return FALSE;
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	07 c0       	rjmp	.+14     	; 0x3678 <check_phone_string+0x5e>
    for(i=0; i<12; i++)
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	8f 5f       	subi	r24, 0xFF	; 255
    366e:	89 83       	std	Y+1, r24	; 0x01
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	8c 30       	cpi	r24, 0x0C	; 12
    3674:	4c f3       	brlt	.-46     	; 0x3648 <check_phone_string+0x2e>
        }
    }
    return TRUE;
    3676:	81 e0       	ldi	r24, 0x01	; 1
}
    3678:	0f 90       	pop	r0
    367a:	0f 90       	pop	r0
    367c:	0f 90       	pop	r0
    367e:	df 91       	pop	r29
    3680:	cf 91       	pop	r28
    3682:	08 95       	ret

00003684 <wait_the_end_of_flow_from_mdm_ms>:
//

static void wait_the_end_of_flow_from_mdm_ms(uint16_t time_to_wait_ms)
{
    3684:	cf 93       	push	r28
    3686:	df 93       	push	r29
    3688:	cd b7       	in	r28, 0x3d	; 61
    368a:	de b7       	in	r29, 0x3e	; 62
    368c:	63 97       	sbiw	r28, 0x13	; 19
    368e:	0f b6       	in	r0, 0x3f	; 63
    3690:	f8 94       	cli
    3692:	de bf       	out	0x3e, r29	; 62
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	cd bf       	out	0x3d, r28	; 61
    3698:	9f 83       	std	Y+7, r25	; 0x07
    369a:	8e 83       	std	Y+6, r24	; 0x06
    uint32_t time_stamp = get_time_ms() + time_to_wait_ms;
    369c:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    36a0:	68 87       	std	Y+8, r22	; 0x08
    36a2:	79 87       	std	Y+9, r23	; 0x09
    36a4:	8a 87       	std	Y+10, r24	; 0x0a
    36a6:	9b 87       	std	Y+11, r25	; 0x0b
    36a8:	8e 81       	ldd	r24, Y+6	; 0x06
    36aa:	9f 81       	ldd	r25, Y+7	; 0x07
    36ac:	cc 01       	movw	r24, r24
    36ae:	a0 e0       	ldi	r26, 0x00	; 0
    36b0:	b0 e0       	ldi	r27, 0x00	; 0
    36b2:	28 85       	ldd	r18, Y+8	; 0x08
    36b4:	39 85       	ldd	r19, Y+9	; 0x09
    36b6:	4a 85       	ldd	r20, Y+10	; 0x0a
    36b8:	5b 85       	ldd	r21, Y+11	; 0x0b
    36ba:	82 0f       	add	r24, r18
    36bc:	93 1f       	adc	r25, r19
    36be:	a4 1f       	adc	r26, r20
    36c0:	b5 1f       	adc	r27, r21
    36c2:	89 83       	std	Y+1, r24	; 0x01
    36c4:	9a 83       	std	Y+2, r25	; 0x02
    36c6:	ab 83       	std	Y+3, r26	; 0x03
    36c8:	bc 83       	std	Y+4, r27	; 0x04
    volatile char dummy;

    while(1)
    {
        if(get_time_ms() < time_stamp) // интервал после последнего принятого байта
    36ca:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    36ce:	6c 87       	std	Y+12, r22	; 0x0c
    36d0:	7d 87       	std	Y+13, r23	; 0x0d
    36d2:	8e 87       	std	Y+14, r24	; 0x0e
    36d4:	9f 87       	std	Y+15, r25	; 0x0f
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	9a 81       	ldd	r25, Y+2	; 0x02
    36da:	ab 81       	ldd	r26, Y+3	; 0x03
    36dc:	bc 81       	ldd	r27, Y+4	; 0x04
    36de:	2c 85       	ldd	r18, Y+12	; 0x0c
    36e0:	3d 85       	ldd	r19, Y+13	; 0x0d
    36e2:	4e 85       	ldd	r20, Y+14	; 0x0e
    36e4:	5f 85       	ldd	r21, Y+15	; 0x0f
    36e6:	28 17       	cp	r18, r24
    36e8:	39 07       	cpc	r19, r25
    36ea:	4a 07       	cpc	r20, r26
    36ec:	5b 07       	cpc	r21, r27
    36ee:	08 f1       	brcs	.+66     	; 0x3732 <wait_the_end_of_flow_from_mdm_ms+0xae>
            return;
        if(is_queue_not_empty())
    36f0:	0e 94 4c 30 	call	0x6098	; 0x6098 <is_queue_not_empty>
    36f4:	88 23       	and	r24, r24
    36f6:	49 f3       	breq	.-46     	; 0x36ca <wait_the_end_of_flow_from_mdm_ms+0x46>
        {
            dummy = get_byte_from_queue();
    36f8:	0e 94 33 30 	call	0x6066	; 0x6066 <get_byte_from_queue>
    36fc:	8d 83       	std	Y+5, r24	; 0x05
            dummy = dummy;
    36fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3700:	8d 83       	std	Y+5, r24	; 0x05
            time_stamp = get_time_ms() + time_to_wait_ms;
    3702:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    3706:	68 8b       	std	Y+16, r22	; 0x10
    3708:	79 8b       	std	Y+17, r23	; 0x11
    370a:	8a 8b       	std	Y+18, r24	; 0x12
    370c:	9b 8b       	std	Y+19, r25	; 0x13
    370e:	8e 81       	ldd	r24, Y+6	; 0x06
    3710:	9f 81       	ldd	r25, Y+7	; 0x07
    3712:	cc 01       	movw	r24, r24
    3714:	a0 e0       	ldi	r26, 0x00	; 0
    3716:	b0 e0       	ldi	r27, 0x00	; 0
    3718:	28 89       	ldd	r18, Y+16	; 0x10
    371a:	39 89       	ldd	r19, Y+17	; 0x11
    371c:	4a 89       	ldd	r20, Y+18	; 0x12
    371e:	5b 89       	ldd	r21, Y+19	; 0x13
    3720:	82 0f       	add	r24, r18
    3722:	93 1f       	adc	r25, r19
    3724:	a4 1f       	adc	r26, r20
    3726:	b5 1f       	adc	r27, r21
    3728:	89 83       	std	Y+1, r24	; 0x01
    372a:	9a 83       	std	Y+2, r25	; 0x02
    372c:	ab 83       	std	Y+3, r26	; 0x03
    372e:	bc 83       	std	Y+4, r27	; 0x04
        if(get_time_ms() < time_stamp) // интервал после последнего принятого байта
    3730:	cc cf       	rjmp	.-104    	; 0x36ca <wait_the_end_of_flow_from_mdm_ms+0x46>
            return;
    3732:	00 00       	nop
        }
    }
}
    3734:	63 96       	adiw	r28, 0x13	; 19
    3736:	0f b6       	in	r0, 0x3f	; 63
    3738:	f8 94       	cli
    373a:	de bf       	out	0x3e, r29	; 62
    373c:	0f be       	out	0x3f, r0	; 63
    373e:	cd bf       	out	0x3d, r28	; 61
    3740:	df 91       	pop	r29
    3742:	cf 91       	pop	r28
    3744:	08 95       	ret

00003746 <send_unsent_sms>:
// //*******************************************************************************************************************
//

static uint8_t send_unsent_sms(void)
{
    3746:	cf 93       	push	r28
    3748:	df 93       	push	r29
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	2c 97       	sbiw	r28, 0x0c	; 12
    3750:	0f b6       	in	r0, 0x3f	; 63
    3752:	f8 94       	cli
    3754:	de bf       	out	0x3e, r29	; 62
    3756:	0f be       	out	0x3f, r0	; 63
    3758:	cd bf       	out	0x3d, r28	; 61
    if(unsent_sms == 0)
    375a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <unsent_sms>
    375e:	88 23       	and	r24, r24
    3760:	11 f4       	brne	.+4      	; 0x3766 <send_unsent_sms+0x20>
    {
        return 0;
    3762:	80 e0       	ldi	r24, 0x00	; 0
    3764:	1c c1       	rjmp	.+568    	; 0x399e <send_unsent_sms+0x258>
    }
    uint8_t rez, i;
    char *ptr;
    unsigned long index = 0;
    3766:	1c 82       	std	Y+4, r1	; 0x04
    3768:	1d 82       	std	Y+5, r1	; 0x05
    376a:	1e 82       	std	Y+6, r1	; 0x06
    376c:	1f 82       	std	Y+7, r1	; 0x07

    delay_ms(100);
    376e:	84 e6       	ldi	r24, 0x64	; 100
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
    uart_flush();
    3776:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
    uart_send_str_p(PSTR("AT+CMGL=\"STO UNSENT\"\r\n")); // запрашиваем список всех СМСок
    377a:	89 ef       	ldi	r24, 0xF9	; 249
    377c:	94 e0       	ldi	r25, 0x04	; 4
    377e:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>

    rez = mdm_wait_cmd_ms(5000, (const char*)RESPON_OK_CMGL);
    3782:	64 e6       	ldi	r22, 0x64	; 100
    3784:	71 e0       	ldi	r23, 0x01	; 1
    3786:	88 e8       	ldi	r24, 0x88	; 136
    3788:	93 e1       	ldi	r25, 0x13	; 19
    378a:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    378e:	88 87       	std	Y+8, r24	; 0x08
    if(rez==1)
    3790:	88 85       	ldd	r24, Y+8	; 0x08
    3792:	81 30       	cpi	r24, 0x01	; 1
    3794:	09 f0       	breq	.+2      	; 0x3798 <send_unsent_sms+0x52>
    3796:	00 c1       	rjmp	.+512    	; 0x3998 <send_unsent_sms+0x252>
    {
        ptr = strchr(mdm_data, ':');
    3798:	6a e3       	ldi	r22, 0x3A	; 58
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	8b e1       	ldi	r24, 0x1B	; 27
    379e:	92 e0       	ldi	r25, 0x02	; 2
    37a0:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    37a4:	9b 83       	std	Y+3, r25	; 0x03
    37a6:	8a 83       	std	Y+2, r24	; 0x02
        if(ptr)
    37a8:	8a 81       	ldd	r24, Y+2	; 0x02
    37aa:	9b 81       	ldd	r25, Y+3	; 0x03
    37ac:	89 2b       	or	r24, r25
    37ae:	09 f4       	brne	.+2      	; 0x37b2 <send_unsent_sms+0x6c>
    37b0:	46 c0       	rjmp	.+140    	; 0x383e <send_unsent_sms+0xf8>
        {
            for(i=0; i<5; i++)
    37b2:	19 82       	std	Y+1, r1	; 0x01
    37b4:	12 c0       	rjmp	.+36     	; 0x37da <send_unsent_sms+0x94>
            {
                if(isdigit(*++ptr))
    37b6:	8a 81       	ldd	r24, Y+2	; 0x02
    37b8:	9b 81       	ldd	r25, Y+3	; 0x03
    37ba:	01 96       	adiw	r24, 0x01	; 1
    37bc:	9b 83       	std	Y+3, r25	; 0x03
    37be:	8a 83       	std	Y+2, r24	; 0x02
    37c0:	8a 81       	ldd	r24, Y+2	; 0x02
    37c2:	9b 81       	ldd	r25, Y+3	; 0x03
    37c4:	dc 01       	movw	r26, r24
    37c6:	8c 91       	ld	r24, X
    37c8:	08 2e       	mov	r0, r24
    37ca:	00 0c       	add	r0, r0
    37cc:	99 0b       	sbc	r25, r25
    37ce:	c0 97       	sbiw	r24, 0x30	; 48
    37d0:	0a 97       	sbiw	r24, 0x0a	; 10
    37d2:	38 f0       	brcs	.+14     	; 0x37e2 <send_unsent_sms+0x9c>
            for(i=0; i<5; i++)
    37d4:	89 81       	ldd	r24, Y+1	; 0x01
    37d6:	8f 5f       	subi	r24, 0xFF	; 255
    37d8:	89 83       	std	Y+1, r24	; 0x01
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	85 30       	cpi	r24, 0x05	; 5
    37de:	58 f3       	brcs	.-42     	; 0x37b6 <send_unsent_sms+0x70>
    37e0:	01 c0       	rjmp	.+2      	; 0x37e4 <send_unsent_sms+0x9e>
                    break;
    37e2:	00 00       	nop
            }
            if(i==5)
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	85 30       	cpi	r24, 0x05	; 5
    37e8:	21 f4       	brne	.+8      	; 0x37f2 <send_unsent_sms+0xac>
            {
                unsent_sms = 0;
    37ea:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <unsent_sms>
                return 0;
    37ee:	80 e0       	ldi	r24, 0x00	; 0
    37f0:	d6 c0       	rjmp	.+428    	; 0x399e <send_unsent_sms+0x258>
            }

            index = strtoul(ptr, 0, 10);
    37f2:	8a 81       	ldd	r24, Y+2	; 0x02
    37f4:	9b 81       	ldd	r25, Y+3	; 0x03
    37f6:	4a e0       	ldi	r20, 0x0A	; 10
    37f8:	50 e0       	ldi	r21, 0x00	; 0
    37fa:	60 e0       	ldi	r22, 0x00	; 0
    37fc:	70 e0       	ldi	r23, 0x00	; 0
    37fe:	0e 94 00 33 	call	0x6600	; 0x6600 <strtoul>
    3802:	69 87       	std	Y+9, r22	; 0x09
    3804:	7a 87       	std	Y+10, r23	; 0x0a
    3806:	8b 87       	std	Y+11, r24	; 0x0b
    3808:	9c 87       	std	Y+12, r25	; 0x0c
    380a:	89 85       	ldd	r24, Y+9	; 0x09
    380c:	9a 85       	ldd	r25, Y+10	; 0x0a
    380e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3810:	bc 85       	ldd	r27, Y+12	; 0x0c
    3812:	8c 83       	std	Y+4, r24	; 0x04
    3814:	9d 83       	std	Y+5, r25	; 0x05
    3816:	ae 83       	std	Y+6, r26	; 0x06
    3818:	bf 83       	std	Y+7, r27	; 0x07
            if((uint16_t)index>0xFFFF)
                return 0;
            if((uint16_t)index > 3) //max sms save sim
    381a:	8c 81       	ldd	r24, Y+4	; 0x04
    381c:	9d 81       	ldd	r25, Y+5	; 0x05
    381e:	04 97       	sbiw	r24, 0x04	; 4
    3820:	10 f0       	brcs	.+4      	; 0x3826 <send_unsent_sms+0xe0>
            {
                delete_all_sms();
    3822:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <delete_all_sms>
            }
            if(index < 1)
    3826:	8c 81       	ldd	r24, Y+4	; 0x04
    3828:	9d 81       	ldd	r25, Y+5	; 0x05
    382a:	ae 81       	ldd	r26, Y+6	; 0x06
    382c:	bf 81       	ldd	r27, Y+7	; 0x07
    382e:	89 2b       	or	r24, r25
    3830:	8a 2b       	or	r24, r26
    3832:	8b 2b       	or	r24, r27
    3834:	41 f4       	brne	.+16     	; 0x3846 <send_unsent_sms+0x100>
            {
                unsent_sms = 0;
    3836:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <unsent_sms>
                return 0;
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	b0 c0       	rjmp	.+352    	; 0x399e <send_unsent_sms+0x258>
            }
        }
        else
        {
            unsent_sms = 0;
    383e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <unsent_sms>
            return 0;
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	ac c0       	rjmp	.+344    	; 0x399e <send_unsent_sms+0x258>
        }
        ptr = strchr(ptr, ','); // ищем первую запятую в строке
    3846:	8a 81       	ldd	r24, Y+2	; 0x02
    3848:	9b 81       	ldd	r25, Y+3	; 0x03
    384a:	6c e2       	ldi	r22, 0x2C	; 44
    384c:	70 e0       	ldi	r23, 0x00	; 0
    384e:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    3852:	9b 83       	std	Y+3, r25	; 0x03
    3854:	8a 83       	std	Y+2, r24	; 0x02
        if(ptr)
    3856:	8a 81       	ldd	r24, Y+2	; 0x02
    3858:	9b 81       	ldd	r25, Y+3	; 0x03
    385a:	89 2b       	or	r24, r25
    385c:	49 f1       	breq	.+82     	; 0x38b0 <send_unsent_sms+0x16a>
        {
            ptr = strchr(ptr, ','); // ищем вторую запятую в строке
    385e:	8a 81       	ldd	r24, Y+2	; 0x02
    3860:	9b 81       	ldd	r25, Y+3	; 0x03
    3862:	6c e2       	ldi	r22, 0x2C	; 44
    3864:	70 e0       	ldi	r23, 0x00	; 0
    3866:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    386a:	9b 83       	std	Y+3, r25	; 0x03
    386c:	8a 83       	std	Y+2, r24	; 0x02
            if(ptr)
    386e:	8a 81       	ldd	r24, Y+2	; 0x02
    3870:	9b 81       	ldd	r25, Y+3	; 0x03
    3872:	89 2b       	or	r24, r25
    3874:	e9 f0       	breq	.+58     	; 0x38b0 <send_unsent_sms+0x16a>
            {
                ptr = strchr(ptr, '+');
    3876:	8a 81       	ldd	r24, Y+2	; 0x02
    3878:	9b 81       	ldd	r25, Y+3	; 0x03
    387a:	6b e2       	ldi	r22, 0x2B	; 43
    387c:	70 e0       	ldi	r23, 0x00	; 0
    387e:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    3882:	9b 83       	std	Y+3, r25	; 0x03
    3884:	8a 83       	std	Y+2, r24	; 0x02
                if(ptr)
    3886:	8a 81       	ldd	r24, Y+2	; 0x02
    3888:	9b 81       	ldd	r25, Y+3	; 0x03
    388a:	89 2b       	or	r24, r25
    388c:	89 f0       	breq	.+34     	; 0x38b0 <send_unsent_sms+0x16a>
                {
                    if(check_phone_string(ptr))
    388e:	8a 81       	ldd	r24, Y+2	; 0x02
    3890:	9b 81       	ldd	r25, Y+3	; 0x03
    3892:	0e 94 0d 1b 	call	0x361a	; 0x361a <check_phone_string>
    3896:	88 23       	and	r24, r24
    3898:	59 f0       	breq	.+22     	; 0x38b0 <send_unsent_sms+0x16a>
                    {
                        memcpy(rec_phone_number, ptr, 13);
    389a:	8a 81       	ldd	r24, Y+2	; 0x02
    389c:	9b 81       	ldd	r25, Y+3	; 0x03
    389e:	4d e0       	ldi	r20, 0x0D	; 13
    38a0:	50 e0       	ldi	r21, 0x00	; 0
    38a2:	bc 01       	movw	r22, r24
    38a4:	8b e5       	ldi	r24, 0x5B	; 91
    38a6:	93 e0       	ldi	r25, 0x03	; 3
    38a8:	0e 94 b3 34 	call	0x6966	; 0x6966 <memcpy>

                        rec_phone_number[13] = 0;
    38ac:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <rec_phone_number+0xd>
//                        softuart_puts_ln(rec_phone_number);
                    }
                }
            }
        }
        delay_ms(3000);
    38b0:	88 eb       	ldi	r24, 0xB8	; 184
    38b2:	9b e0       	ldi	r25, 0x0B	; 11
    38b4:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        sprintf_P(mdm_data, PSTR("AT+CMSS=%d,\"%s\"\r\n"), (uint16_t)index, rec_phone_number);
    38b8:	2c 81       	ldd	r18, Y+4	; 0x04
    38ba:	3d 81       	ldd	r19, Y+5	; 0x05
    38bc:	80 e1       	ldi	r24, 0x10	; 16
    38be:	95 e0       	ldi	r25, 0x05	; 5
    38c0:	4b e5       	ldi	r20, 0x5B	; 91
    38c2:	53 e0       	ldi	r21, 0x03	; 3
    38c4:	45 2f       	mov	r20, r21
    38c6:	4f 93       	push	r20
    38c8:	4b e5       	ldi	r20, 0x5B	; 91
    38ca:	53 e0       	ldi	r21, 0x03	; 3
    38cc:	4f 93       	push	r20
    38ce:	43 2f       	mov	r20, r19
    38d0:	4f 93       	push	r20
    38d2:	2f 93       	push	r18
    38d4:	29 2f       	mov	r18, r25
    38d6:	2f 93       	push	r18
    38d8:	8f 93       	push	r24
    38da:	8b e1       	ldi	r24, 0x1B	; 27
    38dc:	92 e0       	ldi	r25, 0x02	; 2
    38de:	89 2f       	mov	r24, r25
    38e0:	8f 93       	push	r24
    38e2:	8b e1       	ldi	r24, 0x1B	; 27
    38e4:	92 e0       	ldi	r25, 0x02	; 2
    38e6:	8f 93       	push	r24
    38e8:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    38ec:	ad b7       	in	r26, 0x3d	; 61
    38ee:	be b7       	in	r27, 0x3e	; 62
    38f0:	18 96       	adiw	r26, 0x08	; 8
    38f2:	0f b6       	in	r0, 0x3f	; 63
    38f4:	f8 94       	cli
    38f6:	de bf       	out	0x3e, r29	; 62
    38f8:	0f be       	out	0x3f, r0	; 63
    38fa:	cd bf       	out	0x3d, r28	; 61
        uart_flush();
    38fc:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
        uart_send_str(mdm_data);
    3900:	8b e1       	ldi	r24, 0x1B	; 27
    3902:	92 e0       	ldi	r25, 0x02	; 2
    3904:	0e 94 8c 30 	call	0x6118	; 0x6118 <uart_send_str>
        rez = mdm_wait_cmd_ms(60000, (const char*)RESPON_CMSS);
    3908:	6b e6       	ldi	r22, 0x6B	; 107
    390a:	71 e0       	ldi	r23, 0x01	; 1
    390c:	80 e6       	ldi	r24, 0x60	; 96
    390e:	9a ee       	ldi	r25, 0xEA	; 234
    3910:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3914:	88 87       	std	Y+8, r24	; 0x08
        if(rez==1)
    3916:	88 85       	ldd	r24, Y+8	; 0x08
    3918:	81 30       	cpi	r24, 0x01	; 1
    391a:	e1 f5       	brne	.+120    	; 0x3994 <send_unsent_sms+0x24e>
        {
            for(i=0; i<3; i++)
    391c:	19 82       	std	Y+1, r1	; 0x01
    391e:	36 c0       	rjmp	.+108    	; 0x398c <send_unsent_sms+0x246>
            {
                delay_ms(100);
    3920:	84 e6       	ldi	r24, 0x64	; 100
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
                sprintf_P(mdm_data, PSTR("AT+CMGD=%d\r\n"), (uint16_t)index); // удаляем обработанную СМСку
    3928:	2c 81       	ldd	r18, Y+4	; 0x04
    392a:	3d 81       	ldd	r19, Y+5	; 0x05
    392c:	82 e2       	ldi	r24, 0x22	; 34
    392e:	95 e0       	ldi	r25, 0x05	; 5
    3930:	43 2f       	mov	r20, r19
    3932:	4f 93       	push	r20
    3934:	2f 93       	push	r18
    3936:	29 2f       	mov	r18, r25
    3938:	2f 93       	push	r18
    393a:	8f 93       	push	r24
    393c:	8b e1       	ldi	r24, 0x1B	; 27
    393e:	92 e0       	ldi	r25, 0x02	; 2
    3940:	89 2f       	mov	r24, r25
    3942:	8f 93       	push	r24
    3944:	8b e1       	ldi	r24, 0x1B	; 27
    3946:	92 e0       	ldi	r25, 0x02	; 2
    3948:	8f 93       	push	r24
    394a:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    394e:	0f 90       	pop	r0
    3950:	0f 90       	pop	r0
    3952:	0f 90       	pop	r0
    3954:	0f 90       	pop	r0
    3956:	0f 90       	pop	r0
    3958:	0f 90       	pop	r0
                softuart_puts_p(PSTR("del_sms_ind"));
    395a:	8f e2       	ldi	r24, 0x2F	; 47
    395c:	95 e0       	ldi	r25, 0x05	; 5
    395e:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
                uart_flush();
    3962:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
                uart_send_str(mdm_data);
    3966:	8b e1       	ldi	r24, 0x1B	; 27
    3968:	92 e0       	ldi	r25, 0x02	; 2
    396a:	0e 94 8c 30 	call	0x6118	; 0x6118 <uart_send_str>
                rez = mdm_wait_cmd_ms(6000, (const char*)RESPON_OK);
    396e:	6e e4       	ldi	r22, 0x4E	; 78
    3970:	71 e0       	ldi	r23, 0x01	; 1
    3972:	80 e7       	ldi	r24, 0x70	; 112
    3974:	97 e1       	ldi	r25, 0x17	; 23
    3976:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    397a:	88 87       	std	Y+8, r24	; 0x08
                if(rez == TRUE)
    397c:	88 85       	ldd	r24, Y+8	; 0x08
    397e:	81 30       	cpi	r24, 0x01	; 1
    3980:	11 f4       	brne	.+4      	; 0x3986 <send_unsent_sms+0x240>
                    return 1;
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	0c c0       	rjmp	.+24     	; 0x399e <send_unsent_sms+0x258>
            for(i=0; i<3; i++)
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	8f 5f       	subi	r24, 0xFF	; 255
    398a:	89 83       	std	Y+1, r24	; 0x01
    398c:	89 81       	ldd	r24, Y+1	; 0x01
    398e:	83 30       	cpi	r24, 0x03	; 3
    3990:	38 f2       	brcs	.-114    	; 0x3920 <send_unsent_sms+0x1da>
    3992:	04 c0       	rjmp	.+8      	; 0x399c <send_unsent_sms+0x256>
            }
        }
        else return 0;
    3994:	80 e0       	ldi	r24, 0x00	; 0
    3996:	03 c0       	rjmp	.+6      	; 0x399e <send_unsent_sms+0x258>
    }
    else unsent_sms = 0;
    3998:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <unsent_sms>
    return 0;
    399c:	80 e0       	ldi	r24, 0x00	; 0
}
    399e:	2c 96       	adiw	r28, 0x0c	; 12
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	f8 94       	cli
    39a4:	de bf       	out	0x3e, r29	; 62
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	cd bf       	out	0x3d, r28	; 61
    39aa:	df 91       	pop	r29
    39ac:	cf 91       	pop	r28
    39ae:	08 95       	ret

000039b0 <get_sms>:
//////////////////////////////////////////////////////////////////////
uint8_t get_sms(void)
{
    39b0:	cf 93       	push	r28
    39b2:	df 93       	push	r29
    39b4:	cd b7       	in	r28, 0x3d	; 61
    39b6:	de b7       	in	r29, 0x3e	; 62
    39b8:	2c 97       	sbiw	r28, 0x0c	; 12
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	f8 94       	cli
    39be:	de bf       	out	0x3e, r29	; 62
    39c0:	0f be       	out	0x3f, r0	; 63
    39c2:	cd bf       	out	0x3d, r28	; 61
    uint8_t rez, i;
    char *ptr;
    unsigned long index;

    if(unread_sms == 0)
    39c4:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <unread_sms>
    39c8:	88 23       	and	r24, r24
    39ca:	11 f4       	brne	.+4      	; 0x39d0 <get_sms+0x20>
    {
        //softuart_puts_ln("unread_sms == 0");
        return 0;
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	fa c0       	rjmp	.+500    	; 0x3bc4 <get_sms+0x214>
    }
    delay_ms(100);
    39d0:	84 e6       	ldi	r24, 0x64	; 100
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
    uart_flush();
    39d8:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
    uart_send_str_p(PSTR("AT+CMGL=\"REC UNREAD\"\r\n")); // запрашиваем список всех СМСок
    39dc:	8b e3       	ldi	r24, 0x3B	; 59
    39de:	95 e0       	ldi	r25, 0x05	; 5
    39e0:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>

    while(1)
    {
        rez = mdm_wait_cmd_ms(5000, (const char*)RESPON_OK_CMGL);
    39e4:	64 e6       	ldi	r22, 0x64	; 100
    39e6:	71 e0       	ldi	r23, 0x01	; 1
    39e8:	88 e8       	ldi	r24, 0x88	; 136
    39ea:	93 e1       	ldi	r25, 0x13	; 19
    39ec:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    39f0:	8c 83       	std	Y+4, r24	; 0x04
        if(rez==1)
    39f2:	8c 81       	ldd	r24, Y+4	; 0x04
    39f4:	81 30       	cpi	r24, 0x01	; 1
    39f6:	09 f0       	breq	.+2      	; 0x39fa <get_sms+0x4a>
    39f8:	d3 c0       	rjmp	.+422    	; 0x3ba0 <get_sms+0x1f0>
        {
            ptr = strchr(mdm_data, ':');
    39fa:	6a e3       	ldi	r22, 0x3A	; 58
    39fc:	70 e0       	ldi	r23, 0x00	; 0
    39fe:	8b e1       	ldi	r24, 0x1B	; 27
    3a00:	92 e0       	ldi	r25, 0x02	; 2
    3a02:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    3a06:	9b 83       	std	Y+3, r25	; 0x03
    3a08:	8a 83       	std	Y+2, r24	; 0x02
            if(ptr)
    3a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a0e:	89 2b       	or	r24, r25
    3a10:	09 f4       	brne	.+2      	; 0x3a14 <get_sms+0x64>
    3a12:	cc c0       	rjmp	.+408    	; 0x3bac <get_sms+0x1fc>
            {
                for(i=0; i<5; i++)
    3a14:	19 82       	std	Y+1, r1	; 0x01
    3a16:	12 c0       	rjmp	.+36     	; 0x3a3c <get_sms+0x8c>
                {
                    if(isdigit(*++ptr))
    3a18:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a1c:	01 96       	adiw	r24, 0x01	; 1
    3a1e:	9b 83       	std	Y+3, r25	; 0x03
    3a20:	8a 83       	std	Y+2, r24	; 0x02
    3a22:	8a 81       	ldd	r24, Y+2	; 0x02
    3a24:	9b 81       	ldd	r25, Y+3	; 0x03
    3a26:	dc 01       	movw	r26, r24
    3a28:	8c 91       	ld	r24, X
    3a2a:	08 2e       	mov	r0, r24
    3a2c:	00 0c       	add	r0, r0
    3a2e:	99 0b       	sbc	r25, r25
    3a30:	c0 97       	sbiw	r24, 0x30	; 48
    3a32:	0a 97       	sbiw	r24, 0x0a	; 10
    3a34:	38 f0       	brcs	.+14     	; 0x3a44 <get_sms+0x94>
                for(i=0; i<5; i++)
    3a36:	89 81       	ldd	r24, Y+1	; 0x01
    3a38:	8f 5f       	subi	r24, 0xFF	; 255
    3a3a:	89 83       	std	Y+1, r24	; 0x01
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
    3a3e:	85 30       	cpi	r24, 0x05	; 5
    3a40:	58 f3       	brcs	.-42     	; 0x3a18 <get_sms+0x68>
    3a42:	01 c0       	rjmp	.+2      	; 0x3a46 <get_sms+0x96>
                        break;
    3a44:	00 00       	nop
                }
                if(i==5)
    3a46:	89 81       	ldd	r24, Y+1	; 0x01
    3a48:	85 30       	cpi	r24, 0x05	; 5
    3a4a:	09 f4       	brne	.+2      	; 0x3a4e <get_sms+0x9e>
    3a4c:	b1 c0       	rjmp	.+354    	; 0x3bb0 <get_sms+0x200>
                    continue;
                index = strtoul(ptr, 0, 10);
    3a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a50:	9b 81       	ldd	r25, Y+3	; 0x03
    3a52:	4a e0       	ldi	r20, 0x0A	; 10
    3a54:	50 e0       	ldi	r21, 0x00	; 0
    3a56:	60 e0       	ldi	r22, 0x00	; 0
    3a58:	70 e0       	ldi	r23, 0x00	; 0
    3a5a:	0e 94 00 33 	call	0x6600	; 0x6600 <strtoul>
    3a5e:	69 87       	std	Y+9, r22	; 0x09
    3a60:	7a 87       	std	Y+10, r23	; 0x0a
    3a62:	8b 87       	std	Y+11, r24	; 0x0b
    3a64:	9c 87       	std	Y+12, r25	; 0x0c
    3a66:	89 85       	ldd	r24, Y+9	; 0x09
    3a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a6a:	ab 85       	ldd	r26, Y+11	; 0x0b
    3a6c:	bc 85       	ldd	r27, Y+12	; 0x0c
    3a6e:	8d 83       	std	Y+5, r24	; 0x05
    3a70:	9e 83       	std	Y+6, r25	; 0x06
    3a72:	af 83       	std	Y+7, r26	; 0x07
    3a74:	b8 87       	std	Y+8, r27	; 0x08
                if(index>0xFFFF)
    3a76:	8d 81       	ldd	r24, Y+5	; 0x05
    3a78:	9e 81       	ldd	r25, Y+6	; 0x06
    3a7a:	af 81       	ldd	r26, Y+7	; 0x07
    3a7c:	b8 85       	ldd	r27, Y+8	; 0x08
    3a7e:	00 97       	sbiw	r24, 0x00	; 0
    3a80:	a1 40       	sbci	r26, 0x01	; 1
    3a82:	b1 05       	cpc	r27, r1
    3a84:	08 f0       	brcs	.+2      	; 0x3a88 <get_sms+0xd8>
    3a86:	96 c0       	rjmp	.+300    	; 0x3bb4 <get_sms+0x204>
                    continue;
            }
            else
                continue;
            ptr = strchr(ptr, ','); // ищем первую запятую в строке
    3a88:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a8c:	6c e2       	ldi	r22, 0x2C	; 44
    3a8e:	70 e0       	ldi	r23, 0x00	; 0
    3a90:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    3a94:	9b 83       	std	Y+3, r25	; 0x03
    3a96:	8a 83       	std	Y+2, r24	; 0x02
            if(ptr)
    3a98:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a9c:	89 2b       	or	r24, r25
    3a9e:	09 f4       	brne	.+2      	; 0x3aa2 <get_sms+0xf2>
    3aa0:	8b c0       	rjmp	.+278    	; 0x3bb8 <get_sms+0x208>
            {
                ptr = strchr(ptr, ','); // ищем вторую запятую в строке
    3aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa6:	6c e2       	ldi	r22, 0x2C	; 44
    3aa8:	70 e0       	ldi	r23, 0x00	; 0
    3aaa:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    3aae:	9b 83       	std	Y+3, r25	; 0x03
    3ab0:	8a 83       	std	Y+2, r24	; 0x02
                if(ptr)
    3ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab6:	89 2b       	or	r24, r25
    3ab8:	09 f4       	brne	.+2      	; 0x3abc <get_sms+0x10c>
    3aba:	80 c0       	rjmp	.+256    	; 0x3bbc <get_sms+0x20c>
                {
                    ptr = strchr(ptr, '+');
    3abc:	8a 81       	ldd	r24, Y+2	; 0x02
    3abe:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac0:	6b e2       	ldi	r22, 0x2B	; 43
    3ac2:	70 e0       	ldi	r23, 0x00	; 0
    3ac4:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    3ac8:	9b 83       	std	Y+3, r25	; 0x03
    3aca:	8a 83       	std	Y+2, r24	; 0x02
                    if(ptr)
    3acc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ace:	9b 81       	ldd	r25, Y+3	; 0x03
    3ad0:	89 2b       	or	r24, r25
    3ad2:	91 f0       	breq	.+36     	; 0x3af8 <get_sms+0x148>
                    {
                        if(check_phone_string(ptr))
    3ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ad8:	0e 94 0d 1b 	call	0x361a	; 0x361a <check_phone_string>
    3adc:	88 23       	and	r24, r24
    3ade:	09 f4       	brne	.+2      	; 0x3ae2 <get_sms+0x132>
    3ae0:	6f c0       	rjmp	.+222    	; 0x3bc0 <get_sms+0x210>
                        {
                            memcpy(rec_phone_number, ptr, 13);
    3ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae6:	4d e0       	ldi	r20, 0x0D	; 13
    3ae8:	50 e0       	ldi	r21, 0x00	; 0
    3aea:	bc 01       	movw	r22, r24
    3aec:	8b e5       	ldi	r24, 0x5B	; 91
    3aee:	93 e0       	ldi	r25, 0x03	; 3
    3af0:	0e 94 b3 34 	call	0x6966	; 0x6966 <memcpy>

                            rec_phone_number[13] = 0;
    3af4:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <rec_phone_number+0xd>
                else
                    continue;
            }
            else
                continue;
            rez = mdm_wait_str(5000);
    3af8:	88 e8       	ldi	r24, 0x88	; 136
    3afa:	93 e1       	ldi	r25, 0x13	; 19
    3afc:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <mdm_wait_str>
    3b00:	8c 83       	std	Y+4, r24	; 0x04
            if(rez==1)
    3b02:	8c 81       	ldd	r24, Y+4	; 0x04
    3b04:	81 30       	cpi	r24, 0x01	; 1
    3b06:	09 f0       	breq	.+2      	; 0x3b0a <get_sms+0x15a>
    3b08:	45 c0       	rjmp	.+138    	; 0x3b94 <get_sms+0x1e4>
            {
                wait_the_end_of_flow_from_mdm_ms(1000); // ждем окончания потока данных от модема, иными словами, flush
    3b0a:	88 ee       	ldi	r24, 0xE8	; 232
    3b0c:	93 e0       	ldi	r25, 0x03	; 3
    3b0e:	0e 94 42 1b 	call	0x3684	; 0x3684 <wait_the_end_of_flow_from_mdm_ms>
                process_sms_body(mdm_data);
    3b12:	8b e1       	ldi	r24, 0x1B	; 27
    3b14:	92 e0       	ldi	r25, 0x02	; 2
    3b16:	0e 94 12 25 	call	0x4a24	; 0x4a24 <process_sms_body>
                for(i=0; i<3; i++)
    3b1a:	19 82       	std	Y+1, r1	; 0x01
    3b1c:	30 c0       	rjmp	.+96     	; 0x3b7e <get_sms+0x1ce>
                {
                    delay_ms(100);
    3b1e:	84 e6       	ldi	r24, 0x64	; 100
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
                    sprintf_P(mdm_data, PSTR("AT+CMGD=%d\r\n"), (uint16_t)index); // удаляем обработанную СМСку
    3b26:	2d 81       	ldd	r18, Y+5	; 0x05
    3b28:	3e 81       	ldd	r19, Y+6	; 0x06
    3b2a:	82 e5       	ldi	r24, 0x52	; 82
    3b2c:	95 e0       	ldi	r25, 0x05	; 5
    3b2e:	43 2f       	mov	r20, r19
    3b30:	4f 93       	push	r20
    3b32:	2f 93       	push	r18
    3b34:	29 2f       	mov	r18, r25
    3b36:	2f 93       	push	r18
    3b38:	8f 93       	push	r24
    3b3a:	8b e1       	ldi	r24, 0x1B	; 27
    3b3c:	92 e0       	ldi	r25, 0x02	; 2
    3b3e:	89 2f       	mov	r24, r25
    3b40:	8f 93       	push	r24
    3b42:	8b e1       	ldi	r24, 0x1B	; 27
    3b44:	92 e0       	ldi	r25, 0x02	; 2
    3b46:	8f 93       	push	r24
    3b48:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    3b4c:	0f 90       	pop	r0
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	0f 90       	pop	r0
    3b54:	0f 90       	pop	r0
    3b56:	0f 90       	pop	r0
                    uart_flush();
    3b58:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
                    uart_send_str(mdm_data);
    3b5c:	8b e1       	ldi	r24, 0x1B	; 27
    3b5e:	92 e0       	ldi	r25, 0x02	; 2
    3b60:	0e 94 8c 30 	call	0x6118	; 0x6118 <uart_send_str>
                    rez = mdm_wait_cmd_ms(10000, (const char*)RESPON_OK);
    3b64:	6e e4       	ldi	r22, 0x4E	; 78
    3b66:	71 e0       	ldi	r23, 0x01	; 1
    3b68:	80 e1       	ldi	r24, 0x10	; 16
    3b6a:	97 e2       	ldi	r25, 0x27	; 39
    3b6c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3b70:	8c 83       	std	Y+4, r24	; 0x04
                    if(rez == TRUE)
    3b72:	8c 81       	ldd	r24, Y+4	; 0x04
    3b74:	81 30       	cpi	r24, 0x01	; 1
    3b76:	39 f0       	breq	.+14     	; 0x3b86 <get_sms+0x1d6>
                for(i=0; i<3; i++)
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	8f 5f       	subi	r24, 0xFF	; 255
    3b7c:	89 83       	std	Y+1, r24	; 0x01
    3b7e:	89 81       	ldd	r24, Y+1	; 0x01
    3b80:	83 30       	cpi	r24, 0x03	; 3
    3b82:	68 f2       	brcs	.-102    	; 0x3b1e <get_sms+0x16e>
    3b84:	01 c0       	rjmp	.+2      	; 0x3b88 <get_sms+0x1d8>
                        break;
    3b86:	00 00       	nop
                }
                delay_ms(100);
    3b88:	84 e6       	ldi	r24, 0x64	; 100
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
                return 1;
    3b90:	81 e0       	ldi	r24, 0x01	; 1
    3b92:	18 c0       	rjmp	.+48     	; 0x3bc4 <get_sms+0x214>
            }
            else
            {
                delete_all_sms();
    3b94:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <delete_all_sms>
                unread_sms = 0;
    3b98:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <unread_sms>
                return 1;
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	12 c0       	rjmp	.+36     	; 0x3bc4 <get_sms+0x214>
            }
        }
        else
        {
            delete_all_sms(); // попытка обойти глюк модема
    3ba0:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <delete_all_sms>
            unread_sms = 0;
    3ba4:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <unread_sms>
            return 0;
    3ba8:	80 e0       	ldi	r24, 0x00	; 0
    3baa:	0c c0       	rjmp	.+24     	; 0x3bc4 <get_sms+0x214>
                continue;
    3bac:	00 00       	nop
    3bae:	1a cf       	rjmp	.-460    	; 0x39e4 <get_sms+0x34>
                    continue;
    3bb0:	00 00       	nop
    3bb2:	18 cf       	rjmp	.-464    	; 0x39e4 <get_sms+0x34>
                    continue;
    3bb4:	00 00       	nop
    3bb6:	16 cf       	rjmp	.-468    	; 0x39e4 <get_sms+0x34>
                continue;
    3bb8:	00 00       	nop
    3bba:	14 cf       	rjmp	.-472    	; 0x39e4 <get_sms+0x34>
                    continue;
    3bbc:	00 00       	nop
    3bbe:	12 cf       	rjmp	.-476    	; 0x39e4 <get_sms+0x34>
                            continue;
    3bc0:	00 00       	nop
        rez = mdm_wait_cmd_ms(5000, (const char*)RESPON_OK_CMGL);
    3bc2:	10 cf       	rjmp	.-480    	; 0x39e4 <get_sms+0x34>
        }
    }
}
    3bc4:	2c 96       	adiw	r28, 0x0c	; 12
    3bc6:	0f b6       	in	r0, 0x3f	; 63
    3bc8:	f8 94       	cli
    3bca:	de bf       	out	0x3e, r29	; 62
    3bcc:	0f be       	out	0x3f, r0	; 63
    3bce:	cd bf       	out	0x3d, r28	; 61
    3bd0:	df 91       	pop	r29
    3bd2:	cf 91       	pop	r28
    3bd4:	08 95       	ret

00003bd6 <delete_all_sms>:
//
// //*******************************************************************************************************************
//
char delete_all_sms(void)
{
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	0f 92       	push	r0
    3bdc:	cd b7       	in	r28, 0x3d	; 61
    3bde:	de b7       	in	r29, 0x3e	; 62
    char rez;
    delay_ms(100);
    3be0:	84 e6       	ldi	r24, 0x64	; 100
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
    uart_flush();
    3be8:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
    uart_send_str_p(PSTR("AT+CMGDA=\"DEL ALL\"\r\n"));
    3bec:	8f e5       	ldi	r24, 0x5F	; 95
    3bee:	95 e0       	ldi	r25, 0x05	; 5
    3bf0:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
    rez = mdm_wait_cmd_ms(25000, (const char*)RESPON_OK);
    3bf4:	6e e4       	ldi	r22, 0x4E	; 78
    3bf6:	71 e0       	ldi	r23, 0x01	; 1
    3bf8:	88 ea       	ldi	r24, 0xA8	; 168
    3bfa:	91 e6       	ldi	r25, 0x61	; 97
    3bfc:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3c00:	89 83       	std	Y+1, r24	; 0x01
    //  softuart_puts_p(PSTR("del_all_sms"));
    return rez;
    3c02:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c04:	0f 90       	pop	r0
    3c06:	df 91       	pop	r29
    3c08:	cf 91       	pop	r28
    3c0a:	08 95       	ret

00003c0c <incoming_call_processing>:

//*******************************************************************************************************************
void incoming_call_processing(void)
{
    3c0c:	cf 93       	push	r28
    3c0e:	df 93       	push	r29
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
    3c14:	28 97       	sbiw	r28, 0x08	; 8
    3c16:	0f b6       	in	r0, 0x3f	; 63
    3c18:	f8 94       	cli
    3c1a:	de bf       	out	0x3e, r29	; 62
    3c1c:	0f be       	out	0x3f, r0	; 63
    3c1e:	cd bf       	out	0x3d, r28	; 61
    static uint32_t duration_call_s = 0;
//    static uint8_t flag_call = 0;
    if(incoming_call == 0)
    3c20:	80 91 6c 03 	lds	r24, 0x036C	; 0x80036c <incoming_call>
    3c24:	88 23       	and	r24, r24
    3c26:	09 f4       	brne	.+2      	; 0x3c2a <incoming_call_processing+0x1e>
    3c28:	52 c0       	rjmp	.+164    	; 0x3cce <incoming_call_processing+0xc2>
//        }
        return;
    }
//    delay_ms(500);
//    flag_call = 1;
    incoming_call = 0;
    3c2a:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <incoming_call>
    if(call_from_user)
    3c2e:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <call_from_user>
    3c32:	88 23       	and	r24, r24
    3c34:	09 f4       	brne	.+2      	; 0x3c38 <incoming_call_processing+0x2c>
    3c36:	48 c0       	rjmp	.+144    	; 0x3cc8 <incoming_call_processing+0xbc>
    {
        //uart_flush();
        uart_send_str_p(PSTR("ATA\r\n"));
    3c38:	84 e7       	ldi	r24, 0x74	; 116
    3c3a:	95 e0       	ldi	r25, 0x05	; 5
    3c3c:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
        delay_ms(1000);
    3c40:	88 ee       	ldi	r24, 0xE8	; 232
    3c42:	93 e0       	ldi	r25, 0x03	; 3
    3c44:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        play_amr(MENU, '0');
    3c48:	60 e3       	ldi	r22, 0x30	; 48
    3c4a:	82 e7       	ldi	r24, 0x72	; 114
    3c4c:	91 e0       	ldi	r25, 0x01	; 1
    3c4e:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <play_amr>
        call_from_user = 0;
    3c52:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <call_from_user>
        duration_call_s = get_time_s() + 40;
    3c56:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    3c5a:	69 83       	std	Y+1, r22	; 0x01
    3c5c:	7a 83       	std	Y+2, r23	; 0x02
    3c5e:	8b 83       	std	Y+3, r24	; 0x03
    3c60:	9c 83       	std	Y+4, r25	; 0x04
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	9a 81       	ldd	r25, Y+2	; 0x02
    3c66:	ab 81       	ldd	r26, Y+3	; 0x03
    3c68:	bc 81       	ldd	r27, Y+4	; 0x04
    3c6a:	88 96       	adiw	r24, 0x28	; 40
    3c6c:	a1 1d       	adc	r26, r1
    3c6e:	b1 1d       	adc	r27, r1
    3c70:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <duration_call_s.13>
    3c74:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <duration_call_s.13+0x1>
    3c78:	a0 93 8d 03 	sts	0x038D, r26	; 0x80038d <duration_call_s.13+0x2>
    3c7c:	b0 93 8e 03 	sts	0x038E, r27	; 0x80038e <duration_call_s.13+0x3>
        while(call_status() == GSM_CALL_ACTIVE)
    3c80:	1e c0       	rjmp	.+60     	; 0x3cbe <incoming_call_processing+0xb2>
        {
            delay_ms(3000);
    3c82:	88 eb       	ldi	r24, 0xB8	; 184
    3c84:	9b e0       	ldi	r25, 0x0B	; 11
    3c86:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
            if(get_time_s() > duration_call_s)
    3c8a:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    3c8e:	6d 83       	std	Y+5, r22	; 0x05
    3c90:	7e 83       	std	Y+6, r23	; 0x06
    3c92:	8f 83       	std	Y+7, r24	; 0x07
    3c94:	98 87       	std	Y+8, r25	; 0x08
    3c96:	80 91 8b 03 	lds	r24, 0x038B	; 0x80038b <duration_call_s.13>
    3c9a:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <duration_call_s.13+0x1>
    3c9e:	a0 91 8d 03 	lds	r26, 0x038D	; 0x80038d <duration_call_s.13+0x2>
    3ca2:	b0 91 8e 03 	lds	r27, 0x038E	; 0x80038e <duration_call_s.13+0x3>
    3ca6:	2d 81       	ldd	r18, Y+5	; 0x05
    3ca8:	3e 81       	ldd	r19, Y+6	; 0x06
    3caa:	4f 81       	ldd	r20, Y+7	; 0x07
    3cac:	58 85       	ldd	r21, Y+8	; 0x08
    3cae:	82 17       	cp	r24, r18
    3cb0:	93 07       	cpc	r25, r19
    3cb2:	a4 07       	cpc	r26, r20
    3cb4:	b5 07       	cpc	r27, r21
    3cb6:	18 f4       	brcc	.+6      	; 0x3cbe <incoming_call_processing+0xb2>
            {
                hang_up_call();
    3cb8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <hang_up_call>
                break;
    3cbc:	09 c0       	rjmp	.+18     	; 0x3cd0 <incoming_call_processing+0xc4>
        while(call_status() == GSM_CALL_ACTIVE)
    3cbe:	0e 94 b9 12 	call	0x2572	; 0x2572 <call_status>
    3cc2:	82 30       	cpi	r24, 0x02	; 2
    3cc4:	f1 f2       	breq	.-68     	; 0x3c82 <incoming_call_processing+0x76>
    3cc6:	04 c0       	rjmp	.+8      	; 0x3cd0 <incoming_call_processing+0xc4>
            }
        }
    }
    else
    {
        hang_up_call();
    3cc8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <hang_up_call>
    3ccc:	01 c0       	rjmp	.+2      	; 0x3cd0 <incoming_call_processing+0xc4>
        return;
    3cce:	00 00       	nop
    }
}
    3cd0:	28 96       	adiw	r28, 0x08	; 8
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	f8 94       	cli
    3cd6:	de bf       	out	0x3e, r29	; 62
    3cd8:	0f be       	out	0x3f, r0	; 63
    3cda:	cd bf       	out	0x3d, r28	; 61
    3cdc:	df 91       	pop	r29
    3cde:	cf 91       	pop	r28
    3ce0:	08 95       	ret

00003ce2 <reset_mcu>:
//////////////////////////////////
void reset_mcu(void)
{
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	00 d0       	rcall	.+0      	; 0x3ce8 <reset_mcu+0x6>
    3ce8:	00 d0       	rcall	.+0      	; 0x3cea <reset_mcu+0x8>
    3cea:	cd b7       	in	r28, 0x3d	; 61
    3cec:	de b7       	in	r29, 0x3e	; 62
    if(get_reset_count_mcu() < 10000000)
    3cee:	0e 94 58 11 	call	0x22b0	; 0x22b0 <get_reset_count_mcu>
    3cf2:	69 83       	std	Y+1, r22	; 0x01
    3cf4:	7a 83       	std	Y+2, r23	; 0x02
    3cf6:	8b 83       	std	Y+3, r24	; 0x03
    3cf8:	9c 83       	std	Y+4, r25	; 0x04
    3cfa:	89 81       	ldd	r24, Y+1	; 0x01
    3cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cfe:	ab 81       	ldd	r26, Y+3	; 0x03
    3d00:	bc 81       	ldd	r27, Y+4	; 0x04
    3d02:	80 38       	cpi	r24, 0x80	; 128
    3d04:	96 49       	sbci	r25, 0x96	; 150
    3d06:	a8 49       	sbci	r26, 0x98	; 152
    3d08:	b1 05       	cpc	r27, r1
    3d0a:	10 f4       	brcc	.+4      	; 0x3d10 <reset_mcu+0x2e>
        inc_reset_count_mcu();
    3d0c:	0e 94 76 11 	call	0x22ec	; 0x22ec <inc_reset_count_mcu>
    EEPROM_update();
    3d10:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
    DigitalWrite(PWR_GSM, HIGH);
    3d14:	8b e2       	ldi	r24, 0x2B	; 43
    3d16:	90 e0       	ldi	r25, 0x00	; 0
    3d18:	dc 01       	movw	r26, r24
    3d1a:	2c 91       	ld	r18, X
    3d1c:	8b e2       	ldi	r24, 0x2B	; 43
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	20 68       	ori	r18, 0x80	; 128
    3d22:	fc 01       	movw	r30, r24
    3d24:	20 83       	st	Z, r18
    delay_s(3);
    3d26:	83 e0       	ldi	r24, 0x03	; 3
    3d28:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <delay_s>
    DigitalWrite(PWR_GSM, LOW);
    3d2c:	8b e2       	ldi	r24, 0x2B	; 43
    3d2e:	90 e0       	ldi	r25, 0x00	; 0
    3d30:	dc 01       	movw	r26, r24
    3d32:	2c 91       	ld	r18, X
    3d34:	8b e2       	ldi	r24, 0x2B	; 43
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	2f 77       	andi	r18, 0x7F	; 127
    3d3a:	fc 01       	movw	r30, r24
    3d3c:	20 83       	st	Z, r18
    cli(); // запрещаем прерывания и ждем перезагрузки по сторожевому таймеру
    3d3e:	f8 94       	cli
    while(1);
    3d40:	ff cf       	rjmp	.-2      	; 0x3d40 <reset_mcu+0x5e>

00003d42 <setup_init>:
}

//////////////////////////////////////
uint8_t setup_init()
{
    3d42:	cf 93       	push	r28
    3d44:	df 93       	push	r29
    3d46:	cd b7       	in	r28, 0x3d	; 61
    3d48:	de b7       	in	r29, 0x3e	; 62
    3d4a:	2d 97       	sbiw	r28, 0x0d	; 13
    3d4c:	0f b6       	in	r0, 0x3f	; 63
    3d4e:	f8 94       	cli
    3d50:	de bf       	out	0x3e, r29	; 62
    3d52:	0f be       	out	0x3f, r0	; 63
    3d54:	cd bf       	out	0x3d, r28	; 61
    uint8_t respons;
    uint32_t time_stamp = get_time_s() + 600; // 600 sec init modem
    3d56:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    3d5a:	6e 83       	std	Y+6, r22	; 0x06
    3d5c:	7f 83       	std	Y+7, r23	; 0x07
    3d5e:	88 87       	std	Y+8, r24	; 0x08
    3d60:	99 87       	std	Y+9, r25	; 0x09
    3d62:	8e 81       	ldd	r24, Y+6	; 0x06
    3d64:	9f 81       	ldd	r25, Y+7	; 0x07
    3d66:	a8 85       	ldd	r26, Y+8	; 0x08
    3d68:	b9 85       	ldd	r27, Y+9	; 0x09
    3d6a:	88 5a       	subi	r24, 0xA8	; 168
    3d6c:	9d 4f       	sbci	r25, 0xFD	; 253
    3d6e:	af 4f       	sbci	r26, 0xFF	; 255
    3d70:	bf 4f       	sbci	r27, 0xFF	; 255
    3d72:	89 83       	std	Y+1, r24	; 0x01
    3d74:	9a 83       	std	Y+2, r25	; 0x02
    3d76:	ab 83       	std	Y+3, r26	; 0x03
    3d78:	bc 83       	std	Y+4, r27	; 0x04

    for(;;)
    {
        for(;;)
        {
            uart_flush();
    3d7a:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
            uart_send_str_p(PSTR("AT\r\n"));
    3d7e:	8a e7       	ldi	r24, 0x7A	; 122
    3d80:	95 e0       	ldi	r25, 0x05	; 5
    3d82:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
            if ((respons = mdm_wait_cmd_ms(1000, (const char*)RESPON_OK)))
    3d86:	6e e4       	ldi	r22, 0x4E	; 78
    3d88:	71 e0       	ldi	r23, 0x01	; 1
    3d8a:	88 ee       	ldi	r24, 0xE8	; 232
    3d8c:	93 e0       	ldi	r25, 0x03	; 3
    3d8e:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3d92:	8d 83       	std	Y+5, r24	; 0x05
    3d94:	8d 81       	ldd	r24, Y+5	; 0x05
    3d96:	88 23       	and	r24, r24
    3d98:	d1 f4       	brne	.+52     	; 0x3dce <setup_init+0x8c>
            {
                break;
            }
            if((get_time_s() > time_stamp))
    3d9a:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    3d9e:	6a 87       	std	Y+10, r22	; 0x0a
    3da0:	7b 87       	std	Y+11, r23	; 0x0b
    3da2:	8c 87       	std	Y+12, r24	; 0x0c
    3da4:	9d 87       	std	Y+13, r25	; 0x0d
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	9a 81       	ldd	r25, Y+2	; 0x02
    3daa:	ab 81       	ldd	r26, Y+3	; 0x03
    3dac:	bc 81       	ldd	r27, Y+4	; 0x04
    3dae:	2a 85       	ldd	r18, Y+10	; 0x0a
    3db0:	3b 85       	ldd	r19, Y+11	; 0x0b
    3db2:	4c 85       	ldd	r20, Y+12	; 0x0c
    3db4:	5d 85       	ldd	r21, Y+13	; 0x0d
    3db6:	82 17       	cp	r24, r18
    3db8:	93 07       	cpc	r25, r19
    3dba:	a4 07       	cpc	r26, r20
    3dbc:	b5 07       	cpc	r27, r21
    3dbe:	10 f4       	brcc	.+4      	; 0x3dc4 <setup_init+0x82>
            {
                reset_mcu();
    3dc0:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <reset_mcu>
            }
            delay_ms(1000);
    3dc4:	88 ee       	ldi	r24, 0xE8	; 232
    3dc6:	93 e0       	ldi	r25, 0x03	; 3
    3dc8:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
            uart_flush();
    3dcc:	d6 cf       	rjmp	.-84     	; 0x3d7a <setup_init+0x38>
                break;
    3dce:	00 00       	nop
        }
        delay_ms(500);
    3dd0:	84 ef       	ldi	r24, 0xF4	; 244
    3dd2:	91 e0       	ldi	r25, 0x01	; 1
    3dd4:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        uart_flush();
    3dd8:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
        uart_send_str_p(PSTR("ATE0\r\n"));
    3ddc:	8f e7       	ldi	r24, 0x7F	; 127
    3dde:	95 e0       	ldi	r25, 0x05	; 5
    3de0:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
        delay_ms(2000);
    3de4:	80 ed       	ldi	r24, 0xD0	; 208
    3de6:	97 e0       	ldi	r25, 0x07	; 7
    3de8:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
//        uart_send_str_p(PSTR("AT+CSCS=\"HEX\"\r\n"));
//        delay_ms(1000);
        uart_flush();
    3dec:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
        uart_send_str_p(PSTR("AT+CMGF=1\r\n"));
    3df0:	86 e8       	ldi	r24, 0x86	; 134
    3df2:	95 e0       	ldi	r25, 0x05	; 5
    3df4:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
        if ((respons = mdm_wait_cmd_ms(3000, (const char*)RESPON_OK)))
    3df8:	6e e4       	ldi	r22, 0x4E	; 78
    3dfa:	71 e0       	ldi	r23, 0x01	; 1
    3dfc:	88 eb       	ldi	r24, 0xB8	; 184
    3dfe:	9b e0       	ldi	r25, 0x0B	; 11
    3e00:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3e04:	8d 83       	std	Y+5, r24	; 0x05
    3e06:	8d 81       	ldd	r24, Y+5	; 0x05
    3e08:	88 23       	and	r24, r24
    3e0a:	09 f4       	brne	.+2      	; 0x3e0e <setup_init+0xcc>
    3e0c:	52 c0       	rjmp	.+164    	; 0x3eb2 <setup_init+0x170>
        {
            delay_ms(500);
    3e0e:	84 ef       	ldi	r24, 0xF4	; 244
    3e10:	91 e0       	ldi	r25, 0x01	; 1
    3e12:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
            uart_flush();
    3e16:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
            uart_send_str_p(PSTR("AT+CNMI=2,1,0,1,0\r\n"));
    3e1a:	82 e9       	ldi	r24, 0x92	; 146
    3e1c:	95 e0       	ldi	r25, 0x05	; 5
    3e1e:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
            if ((respons = mdm_wait_cmd_ms(3000, (const char*)RESPON_OK)))
    3e22:	6e e4       	ldi	r22, 0x4E	; 78
    3e24:	71 e0       	ldi	r23, 0x01	; 1
    3e26:	88 eb       	ldi	r24, 0xB8	; 184
    3e28:	9b e0       	ldi	r25, 0x0B	; 11
    3e2a:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3e2e:	8d 83       	std	Y+5, r24	; 0x05
    3e30:	8d 81       	ldd	r24, Y+5	; 0x05
    3e32:	88 23       	and	r24, r24
    3e34:	09 f4       	brne	.+2      	; 0x3e38 <setup_init+0xf6>
    3e36:	3f c0       	rjmp	.+126    	; 0x3eb6 <setup_init+0x174>
            {
                delay_ms(500);
    3e38:	84 ef       	ldi	r24, 0xF4	; 244
    3e3a:	91 e0       	ldi	r25, 0x01	; 1
    3e3c:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
//                uart_flush();
//                uart_send_str_p(PSTR("AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n"));
//                delay_ms(2000);
                uart_flush();
    3e40:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
                uart_send_str_p(PSTR("AT+CLIP=1\r\n"));
    3e44:	86 ea       	ldi	r24, 0xA6	; 166
    3e46:	95 e0       	ldi	r25, 0x05	; 5
    3e48:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
                if ((respons = mdm_wait_cmd_ms(3000, (const char*)RESPON_OK)))
    3e4c:	6e e4       	ldi	r22, 0x4E	; 78
    3e4e:	71 e0       	ldi	r23, 0x01	; 1
    3e50:	88 eb       	ldi	r24, 0xB8	; 184
    3e52:	9b e0       	ldi	r25, 0x0B	; 11
    3e54:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3e58:	8d 83       	std	Y+5, r24	; 0x05
    3e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e5c:	88 23       	and	r24, r24
    3e5e:	69 f1       	breq	.+90     	; 0x3eba <setup_init+0x178>
                {
                    delay_ms(500);
    3e60:	84 ef       	ldi	r24, 0xF4	; 244
    3e62:	91 e0       	ldi	r25, 0x01	; 1
    3e64:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
                    uart_flush();
    3e68:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
                    uart_send_str_p(PSTR("AT+CPMS=\"SM\",\"SM\",\"SM\"\r\n"));
    3e6c:	82 eb       	ldi	r24, 0xB2	; 178
    3e6e:	95 e0       	ldi	r25, 0x05	; 5
    3e70:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
                    if ((respons = mdm_wait_cmd_ms(3000, (const char*)RESPON_OK)))
    3e74:	6e e4       	ldi	r22, 0x4E	; 78
    3e76:	71 e0       	ldi	r23, 0x01	; 1
    3e78:	88 eb       	ldi	r24, 0xB8	; 184
    3e7a:	9b e0       	ldi	r25, 0x0B	; 11
    3e7c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3e80:	8d 83       	std	Y+5, r24	; 0x05
    3e82:	8d 81       	ldd	r24, Y+5	; 0x05
    3e84:	88 23       	and	r24, r24
    3e86:	d9 f0       	breq	.+54     	; 0x3ebe <setup_init+0x17c>
                    {
                        delay_ms(500);
    3e88:	84 ef       	ldi	r24, 0xF4	; 244
    3e8a:	91 e0       	ldi	r25, 0x01	; 1
    3e8c:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
                        uart_flush();
    3e90:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
                        uart_send_str_p(PSTR("AT+DDET=1\r\n"));
    3e94:	8b ec       	ldi	r24, 0xCB	; 203
    3e96:	95 e0       	ldi	r25, 0x05	; 5
    3e98:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
                        if ((respons = mdm_wait_cmd_ms(3000, (const char*)RESPON_OK)))
    3e9c:	6e e4       	ldi	r22, 0x4E	; 78
    3e9e:	71 e0       	ldi	r23, 0x01	; 1
    3ea0:	88 eb       	ldi	r24, 0xB8	; 184
    3ea2:	9b e0       	ldi	r25, 0x0B	; 11
    3ea4:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3ea8:	8d 83       	std	Y+5, r24	; 0x05
    3eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3eac:	88 23       	and	r24, r24
    3eae:	49 f4       	brne	.+18     	; 0x3ec2 <setup_init+0x180>
                        {
                            break;
                        }
                        else continue;
    3eb0:	07 c0       	rjmp	.+14     	; 0x3ec0 <setup_init+0x17e>
                }
                else continue;
            }
            else continue;
        }
        else continue;
    3eb2:	00 00       	nop
    3eb4:	62 cf       	rjmp	.-316    	; 0x3d7a <setup_init+0x38>
            else continue;
    3eb6:	00 00       	nop
    3eb8:	60 cf       	rjmp	.-320    	; 0x3d7a <setup_init+0x38>
                else continue;
    3eba:	00 00       	nop
    3ebc:	5e cf       	rjmp	.-324    	; 0x3d7a <setup_init+0x38>
                    else continue;
    3ebe:	00 00       	nop
    for(;;)
    3ec0:	5c cf       	rjmp	.-328    	; 0x3d7a <setup_init+0x38>
                            break;
    3ec2:	00 00       	nop
    }
    registration_status_ms(2000);
    3ec4:	60 ed       	ldi	r22, 0xD0	; 208
    3ec6:	77 e0       	ldi	r23, 0x07	; 7
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	90 e0       	ldi	r25, 0x00	; 0
    3ecc:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <registration_status_ms>
    delay_s(3);
    3ed0:	83 e0       	ldi	r24, 0x03	; 3
    3ed2:	0e 94 55 2f 	call	0x5eaa	; 0x5eaa <delay_s>
    return respons;
    3ed6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3ed8:	2d 96       	adiw	r28, 0x0d	; 13
    3eda:	0f b6       	in	r0, 0x3f	; 63
    3edc:	f8 94       	cli
    3ede:	de bf       	out	0x3e, r29	; 62
    3ee0:	0f be       	out	0x3f, r0	; 63
    3ee2:	cd bf       	out	0x3d, r28	; 61
    3ee4:	df 91       	pop	r29
    3ee6:	cf 91       	pop	r28
    3ee8:	08 95       	ret

00003eea <send_USSD>:
//}
//
// //*******************************************************************************************************************

char send_USSD(char * ussd)
{
    3eea:	cf 93       	push	r28
    3eec:	df 93       	push	r29
    3eee:	cd b7       	in	r28, 0x3d	; 61
    3ef0:	de b7       	in	r29, 0x3e	; 62
    3ef2:	cf 56       	subi	r28, 0x6F	; 111
    3ef4:	d1 09       	sbc	r29, r1
    3ef6:	0f b6       	in	r0, 0x3f	; 63
    3ef8:	f8 94       	cli
    3efa:	de bf       	out	0x3e, r29	; 62
    3efc:	0f be       	out	0x3f, r0	; 63
    3efe:	cd bf       	out	0x3d, r28	; 61
    3f00:	9e 01       	movw	r18, r28
    3f02:	2a 59       	subi	r18, 0x9A	; 154
    3f04:	3f 4f       	sbci	r19, 0xFF	; 255
    3f06:	f9 01       	movw	r30, r18
    3f08:	91 83       	std	Z+1, r25	; 0x01
    3f0a:	80 83       	st	Z, r24
    uint32_t timeout = 0;
    3f0c:	19 82       	std	Y+1, r1	; 0x01
    3f0e:	1a 82       	std	Y+2, r1	; 0x02
    3f10:	1b 82       	std	Y+3, r1	; 0x03
    3f12:	1c 82       	std	Y+4, r1	; 0x04
    char *ptr;
    uint8_t i;
    char temp_ussd[93];
    for(i = 0; i < 3; i++)
    3f14:	1d 82       	std	Y+5, r1	; 0x05
    3f16:	3e c0       	rjmp	.+124    	; 0x3f94 <send_USSD+0xaa>
    {
        if(i != 0)
    3f18:	8d 81       	ldd	r24, Y+5	; 0x05
    3f1a:	88 23       	and	r24, r24
    3f1c:	21 f0       	breq	.+8      	; 0x3f26 <send_USSD+0x3c>
            delay_ms(500);
    3f1e:	84 ef       	ldi	r24, 0xF4	; 244
    3f20:	91 e0       	ldi	r25, 0x01	; 1
    3f22:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <delay_ms>
        uart_flush();
    3f26:	0e 94 0c 31 	call	0x6218	; 0x6218 <uart_flush>
        uart_send_str_p(PSTR("AT+CUSD=1,\""));
    3f2a:	87 ed       	ldi	r24, 0xD7	; 215
    3f2c:	95 e0       	ldi	r25, 0x05	; 5
    3f2e:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
        uart_send_str((char *)ussd);
    3f32:	ce 01       	movw	r24, r28
    3f34:	8a 59       	subi	r24, 0x9A	; 154
    3f36:	9f 4f       	sbci	r25, 0xFF	; 255
    3f38:	fc 01       	movw	r30, r24
    3f3a:	80 81       	ld	r24, Z
    3f3c:	91 81       	ldd	r25, Z+1	; 0x01
    3f3e:	0e 94 8c 30 	call	0x6118	; 0x6118 <uart_send_str>
        uart_send_str_p(PSTR("\"\r\n"));
    3f42:	83 ee       	ldi	r24, 0xE3	; 227
    3f44:	95 e0       	ldi	r25, 0x05	; 5
    3f46:	0e 94 b9 30 	call	0x6172	; 0x6172 <uart_send_str_p>
        if(mdm_wait_cmd_ms(10000, (const char*)RESPON_OK) == 1)
    3f4a:	6e e4       	ldi	r22, 0x4E	; 78
    3f4c:	71 e0       	ldi	r23, 0x01	; 1
    3f4e:	80 e1       	ldi	r24, 0x10	; 16
    3f50:	97 e2       	ldi	r25, 0x27	; 39
    3f52:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <mdm_wait_cmd_ms>
    3f56:	81 30       	cpi	r24, 0x01	; 1
    3f58:	d1 f4       	brne	.+52     	; 0x3f8e <send_USSD+0xa4>
        {
            timeout = get_time_s() + 10;
    3f5a:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    3f5e:	ac 96       	adiw	r28, 0x2c	; 44
    3f60:	6c af       	std	Y+60, r22	; 0x3c
    3f62:	7d af       	std	Y+61, r23	; 0x3d
    3f64:	8e af       	std	Y+62, r24	; 0x3e
    3f66:	9f af       	std	Y+63, r25	; 0x3f
    3f68:	ac 97       	sbiw	r28, 0x2c	; 44
    3f6a:	ac 96       	adiw	r28, 0x2c	; 44
    3f6c:	8c ad       	ldd	r24, Y+60	; 0x3c
    3f6e:	9d ad       	ldd	r25, Y+61	; 0x3d
    3f70:	ae ad       	ldd	r26, Y+62	; 0x3e
    3f72:	bf ad       	ldd	r27, Y+63	; 0x3f
    3f74:	ac 97       	sbiw	r28, 0x2c	; 44
    3f76:	0a 96       	adiw	r24, 0x0a	; 10
    3f78:	a1 1d       	adc	r26, r1
    3f7a:	b1 1d       	adc	r27, r1
    3f7c:	89 83       	std	Y+1, r24	; 0x01
    3f7e:	9a 83       	std	Y+2, r25	; 0x02
    3f80:	ab 83       	std	Y+3, r26	; 0x03
    3f82:	bc 83       	std	Y+4, r27	; 0x04
            softuart_puts_ln("ussd send ok");
    3f84:	87 e7       	ldi	r24, 0x77	; 119
    3f86:	91 e0       	ldi	r25, 0x01	; 1
    3f88:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <softuart_puts_ln>
            break;
    3f8c:	07 c0       	rjmp	.+14     	; 0x3f9c <send_USSD+0xb2>
    for(i = 0; i < 3; i++)
    3f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f90:	8f 5f       	subi	r24, 0xFF	; 255
    3f92:	8d 83       	std	Y+5, r24	; 0x05
    3f94:	8d 81       	ldd	r24, Y+5	; 0x05
    3f96:	83 30       	cpi	r24, 0x03	; 3
    3f98:	08 f4       	brcc	.+2      	; 0x3f9c <send_USSD+0xb2>
    3f9a:	be cf       	rjmp	.-132    	; 0x3f18 <send_USSD+0x2e>
        }
    }
    if(i == 3)
    3f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f9e:	83 30       	cpi	r24, 0x03	; 3
    3fa0:	09 f0       	breq	.+2      	; 0x3fa4 <send_USSD+0xba>
    3fa2:	c8 c0       	rjmp	.+400    	; 0x4134 <send_USSD+0x24a>
        return 0;
    3fa4:	80 e0       	ldi	r24, 0x00	; 0
    3fa6:	df c0       	rjmp	.+446    	; 0x4166 <send_USSD+0x27c>


    while(get_time_s() < timeout)
    {
        ptr = gsm_poll_for_string();
    3fa8:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <gsm_poll_for_string>
    3fac:	9f 83       	std	Y+7, r25	; 0x07
    3fae:	8e 83       	std	Y+6, r24	; 0x06
        if(ptr)
    3fb0:	8e 81       	ldd	r24, Y+6	; 0x06
    3fb2:	9f 81       	ldd	r25, Y+7	; 0x07
    3fb4:	89 2b       	or	r24, r25
    3fb6:	09 f4       	brne	.+2      	; 0x3fba <send_USSD+0xd0>
    3fb8:	bd c0       	rjmp	.+378    	; 0x4134 <send_USSD+0x24a>
        {
            if(strstr(ptr, "+CUSD:")) //
    3fba:	8e 81       	ldd	r24, Y+6	; 0x06
    3fbc:	9f 81       	ldd	r25, Y+7	; 0x07
    3fbe:	64 e8       	ldi	r22, 0x84	; 132
    3fc0:	71 e0       	ldi	r23, 0x01	; 1
    3fc2:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <strstr>
    3fc6:	89 2b       	or	r24, r25
    3fc8:	09 f4       	brne	.+2      	; 0x3fcc <send_USSD+0xe2>
    3fca:	b2 c0       	rjmp	.+356    	; 0x4130 <send_USSD+0x246>
            {
                uint8_t cnt_ch;
                ptr += 6;
    3fcc:	8e 81       	ldd	r24, Y+6	; 0x06
    3fce:	9f 81       	ldd	r25, Y+7	; 0x07
    3fd0:	06 96       	adiw	r24, 0x06	; 6
    3fd2:	9f 83       	std	Y+7, r25	; 0x07
    3fd4:	8e 83       	std	Y+6, r24	; 0x06
                ptr = strchr(ptr, '"');
    3fd6:	8e 81       	ldd	r24, Y+6	; 0x06
    3fd8:	9f 81       	ldd	r25, Y+7	; 0x07
    3fda:	62 e2       	ldi	r22, 0x22	; 34
    3fdc:	70 e0       	ldi	r23, 0x00	; 0
    3fde:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    3fe2:	9f 83       	std	Y+7, r25	; 0x07
    3fe4:	8e 83       	std	Y+6, r24	; 0x06
                if(!ptr)
    3fe6:	8e 81       	ldd	r24, Y+6	; 0x06
    3fe8:	9f 81       	ldd	r25, Y+7	; 0x07
    3fea:	89 2b       	or	r24, r25
    3fec:	11 f4       	brne	.+4      	; 0x3ff2 <send_USSD+0x108>
                    return 0;
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	ba c0       	rjmp	.+372    	; 0x4166 <send_USSD+0x27c>
                ptr++;
    3ff2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ff4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ff6:	01 96       	adiw	r24, 0x01	; 1
    3ff8:	9f 83       	std	Y+7, r25	; 0x07
    3ffa:	8e 83       	std	Y+6, r24	; 0x06
                //strncpy(temp_ussd, ptr, 92);
                memmove(temp_ussd, ptr, 92);
    3ffc:	2e 81       	ldd	r18, Y+6	; 0x06
    3ffe:	3f 81       	ldd	r19, Y+7	; 0x07
    4000:	ce 01       	movw	r24, r28
    4002:	09 96       	adiw	r24, 0x09	; 9
    4004:	4c e5       	ldi	r20, 0x5C	; 92
    4006:	50 e0       	ldi	r21, 0x00	; 0
    4008:	b9 01       	movw	r22, r18
    400a:	0e 94 bc 34 	call	0x6978	; 0x6978 <memmove>
                SMSdecodUCS2(ptr, temp_ussd, 48, 0);
    400e:	be 01       	movw	r22, r28
    4010:	67 5f       	subi	r22, 0xF7	; 247
    4012:	7f 4f       	sbci	r23, 0xFF	; 255
    4014:	8e 81       	ldd	r24, Y+6	; 0x06
    4016:	9f 81       	ldd	r25, Y+7	; 0x07
    4018:	20 e0       	ldi	r18, 0x00	; 0
    401a:	30 e0       	ldi	r19, 0x00	; 0
    401c:	40 e3       	ldi	r20, 0x30	; 48
    401e:	50 e0       	ldi	r21, 0x00	; 0
    4020:	0e 94 6f 21 	call	0x42de	; 0x42de <SMSdecodUCS2>
                //ptr = UCS2_to_string(ptr);
                ptr = strchr(ptr, ' ');
    4024:	8e 81       	ldd	r24, Y+6	; 0x06
    4026:	9f 81       	ldd	r25, Y+7	; 0x07
    4028:	60 e2       	ldi	r22, 0x20	; 32
    402a:	70 e0       	ldi	r23, 0x00	; 0
    402c:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    4030:	9f 83       	std	Y+7, r25	; 0x07
    4032:	8e 83       	std	Y+6, r24	; 0x06
                if(ptr)
    4034:	8e 81       	ldd	r24, Y+6	; 0x06
    4036:	9f 81       	ldd	r25, Y+7	; 0x07
    4038:	89 2b       	or	r24, r25
    403a:	51 f1       	breq	.+84     	; 0x4090 <send_USSD+0x1a6>
                {
                    ptr++;
    403c:	8e 81       	ldd	r24, Y+6	; 0x06
    403e:	9f 81       	ldd	r25, Y+7	; 0x07
    4040:	01 96       	adiw	r24, 0x01	; 1
    4042:	9f 83       	std	Y+7, r25	; 0x07
    4044:	8e 83       	std	Y+6, r24	; 0x06
                    ptr = strchr(ptr, ' ');
    4046:	8e 81       	ldd	r24, Y+6	; 0x06
    4048:	9f 81       	ldd	r25, Y+7	; 0x07
    404a:	60 e2       	ldi	r22, 0x20	; 32
    404c:	70 e0       	ldi	r23, 0x00	; 0
    404e:	0e 94 d5 34 	call	0x69aa	; 0x69aa <strchr>
    4052:	9f 83       	std	Y+7, r25	; 0x07
    4054:	8e 83       	std	Y+6, r24	; 0x06
                    if(ptr)
    4056:	8e 81       	ldd	r24, Y+6	; 0x06
    4058:	9f 81       	ldd	r25, Y+7	; 0x07
    405a:	89 2b       	or	r24, r25
    405c:	79 f0       	breq	.+30     	; 0x407c <send_USSD+0x192>
                    {
                        ptr++;
    405e:	8e 81       	ldd	r24, Y+6	; 0x06
    4060:	9f 81       	ldd	r25, Y+7	; 0x07
    4062:	01 96       	adiw	r24, 0x01	; 1
    4064:	9f 83       	std	Y+7, r25	; 0x07
    4066:	8e 83       	std	Y+6, r24	; 0x06
                        cnt_ch = len_to_char(ptr, ' ');
    4068:	8e 81       	ldd	r24, Y+6	; 0x06
    406a:	9f 81       	ldd	r25, Y+7	; 0x07
    406c:	60 e2       	ldi	r22, 0x20	; 32
    406e:	0e 94 9b 22 	call	0x4536	; 0x4536 <len_to_char>
    4072:	88 87       	std	Y+8, r24	; 0x08
                {
                    //strcpy(arr_dep, "err");
                    memcpy(arr_dep, "err", 3);
                    return 0;
                }
                if(cnt_ch > 7)
    4074:	88 85       	ldd	r24, Y+8	; 0x08
    4076:	88 30       	cpi	r24, 0x08	; 8
    4078:	f8 f0       	brcs	.+62     	; 0x40b8 <send_USSD+0x1ce>
    407a:	14 c0       	rjmp	.+40     	; 0x40a4 <send_USSD+0x1ba>
                        memcpy(arr_dep, "err", 3);
    407c:	43 e0       	ldi	r20, 0x03	; 3
    407e:	50 e0       	ldi	r21, 0x00	; 0
    4080:	6b e8       	ldi	r22, 0x8B	; 139
    4082:	71 e0       	ldi	r23, 0x01	; 1
    4084:	80 e7       	ldi	r24, 0x70	; 112
    4086:	93 e0       	ldi	r25, 0x03	; 3
    4088:	0e 94 b3 34 	call	0x6966	; 0x6966 <memcpy>
                        return 0;
    408c:	80 e0       	ldi	r24, 0x00	; 0
    408e:	6b c0       	rjmp	.+214    	; 0x4166 <send_USSD+0x27c>
                    memcpy(arr_dep, "err", 3);
    4090:	43 e0       	ldi	r20, 0x03	; 3
    4092:	50 e0       	ldi	r21, 0x00	; 0
    4094:	6b e8       	ldi	r22, 0x8B	; 139
    4096:	71 e0       	ldi	r23, 0x01	; 1
    4098:	80 e7       	ldi	r24, 0x70	; 112
    409a:	93 e0       	ldi	r25, 0x03	; 3
    409c:	0e 94 b3 34 	call	0x6966	; 0x6966 <memcpy>
                    return 0;
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	61 c0       	rjmp	.+194    	; 0x4166 <send_USSD+0x27c>
                {
                    //strcpy(arr_dep, "err");
                    memcpy(arr_dep, "err", 3);
    40a4:	43 e0       	ldi	r20, 0x03	; 3
    40a6:	50 e0       	ldi	r21, 0x00	; 0
    40a8:	6b e8       	ldi	r22, 0x8B	; 139
    40aa:	71 e0       	ldi	r23, 0x01	; 1
    40ac:	80 e7       	ldi	r24, 0x70	; 112
    40ae:	93 e0       	ldi	r25, 0x03	; 3
    40b0:	0e 94 b3 34 	call	0x6966	; 0x6966 <memcpy>
                    return 0;
    40b4:	80 e0       	ldi	r24, 0x00	; 0
    40b6:	57 c0       	rjmp	.+174    	; 0x4166 <send_USSD+0x27c>
                }
                //strncpy(arr_dep, ptr, cnt_ch);
                memmove(arr_dep, ptr, cnt_ch);
    40b8:	88 85       	ldd	r24, Y+8	; 0x08
    40ba:	28 2f       	mov	r18, r24
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	8e 81       	ldd	r24, Y+6	; 0x06
    40c0:	9f 81       	ldd	r25, Y+7	; 0x07
    40c2:	a9 01       	movw	r20, r18
    40c4:	bc 01       	movw	r22, r24
    40c6:	80 e7       	ldi	r24, 0x70	; 112
    40c8:	93 e0       	ldi	r25, 0x03	; 3
    40ca:	0e 94 bc 34 	call	0x6978	; 0x6978 <memmove>
                ptr = strtok(ptr, ".");
    40ce:	8e 81       	ldd	r24, Y+6	; 0x06
    40d0:	9f 81       	ldd	r25, Y+7	; 0x07
    40d2:	6f e8       	ldi	r22, 0x8F	; 143
    40d4:	71 e0       	ldi	r23, 0x01	; 1
    40d6:	0e 94 a1 34 	call	0x6942	; 0x6942 <strtok>
    40da:	9f 83       	std	Y+7, r25	; 0x07
    40dc:	8e 83       	std	Y+6, r24	; 0x06
                if(!ptr)
    40de:	8e 81       	ldd	r24, Y+6	; 0x06
    40e0:	9f 81       	ldd	r25, Y+7	; 0x07
    40e2:	89 2b       	or	r24, r25
    40e4:	11 f4       	brne	.+4      	; 0x40ea <send_USSD+0x200>
                {
                    return 0;
    40e6:	80 e0       	ldi	r24, 0x00	; 0
    40e8:	3e c0       	rjmp	.+124    	; 0x4166 <send_USSD+0x27c>
                }
                softuart_puts_ln(arr_dep);
    40ea:	80 e7       	ldi	r24, 0x70	; 112
    40ec:	93 e0       	ldi	r25, 0x03	; 3
    40ee:	0e 94 1a 2d 	call	0x5a34	; 0x5a34 <softuart_puts_ln>
                deposit = atoi(ptr);
    40f2:	8e 81       	ldd	r24, Y+6	; 0x06
    40f4:	9f 81       	ldd	r25, Y+7	; 0x07
    40f6:	0e 94 48 34 	call	0x6890	; 0x6890 <atoi>
    40fa:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <deposit+0x1>
    40fe:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <deposit>
                if(deposit <= 0)
    4102:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <deposit>
    4106:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <deposit+0x1>
    410a:	18 16       	cp	r1, r24
    410c:	19 06       	cpc	r1, r25
    410e:	14 f0       	brlt	.+4      	; 0x4114 <send_USSD+0x22a>
                {
                    return 0;
    4110:	80 e0       	ldi	r24, 0x00	; 0
    4112:	29 c0       	rjmp	.+82     	; 0x4166 <send_USSD+0x27c>
                }
                else if(deposit < 10)
    4114:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <deposit>
    4118:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <deposit+0x1>
    411c:	0a 97       	sbiw	r24, 0x0a	; 10
    411e:	44 f4       	brge	.+16     	; 0x4130 <send_USSD+0x246>
                {

                    softuart_puts_p(PSTR( "Deposit < 10 rub" ));
    4120:	87 ee       	ldi	r24, 0xE7	; 231
    4122:	95 e0       	ldi	r25, 0x05	; 5
    4124:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
                    send_sms_admins(PSTR( "Deposit < 10 RUB" ));
    4128:	88 ef       	ldi	r24, 0xF8	; 248
    412a:	95 e0       	ldi	r25, 0x05	; 5
    412c:	0e 94 9f 19 	call	0x333e	; 0x333e <send_sms_admins>
                }
            }
            return 1;
    4130:	81 e0       	ldi	r24, 0x01	; 1
    4132:	19 c0       	rjmp	.+50     	; 0x4166 <send_USSD+0x27c>
    while(get_time_s() < timeout)
    4134:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    4138:	e0 96       	adiw	r28, 0x30	; 48
    413a:	6c af       	std	Y+60, r22	; 0x3c
    413c:	7d af       	std	Y+61, r23	; 0x3d
    413e:	8e af       	std	Y+62, r24	; 0x3e
    4140:	9f af       	std	Y+63, r25	; 0x3f
    4142:	e0 97       	sbiw	r28, 0x30	; 48
    4144:	89 81       	ldd	r24, Y+1	; 0x01
    4146:	9a 81       	ldd	r25, Y+2	; 0x02
    4148:	ab 81       	ldd	r26, Y+3	; 0x03
    414a:	bc 81       	ldd	r27, Y+4	; 0x04
    414c:	e0 96       	adiw	r28, 0x30	; 48
    414e:	2c ad       	ldd	r18, Y+60	; 0x3c
    4150:	3d ad       	ldd	r19, Y+61	; 0x3d
    4152:	4e ad       	ldd	r20, Y+62	; 0x3e
    4154:	5f ad       	ldd	r21, Y+63	; 0x3f
    4156:	e0 97       	sbiw	r28, 0x30	; 48
    4158:	28 17       	cp	r18, r24
    415a:	39 07       	cpc	r19, r25
    415c:	4a 07       	cpc	r20, r26
    415e:	5b 07       	cpc	r21, r27
    4160:	08 f4       	brcc	.+2      	; 0x4164 <send_USSD+0x27a>
    4162:	22 cf       	rjmp	.-444    	; 0x3fa8 <send_USSD+0xbe>
        }
    }

    return 0;
    4164:	80 e0       	ldi	r24, 0x00	; 0
}
    4166:	c1 59       	subi	r28, 0x91	; 145
    4168:	df 4f       	sbci	r29, 0xFF	; 255
    416a:	0f b6       	in	r0, 0x3f	; 63
    416c:	f8 94       	cli
    416e:	de bf       	out	0x3e, r29	; 62
    4170:	0f be       	out	0x3f, r0	; 63
    4172:	cd bf       	out	0x3d, r28	; 61
    4174:	df 91       	pop	r29
    4176:	cf 91       	pop	r28
    4178:	08 95       	ret

0000417a <get_error_code1>:
////////////////
uint8_t get_error_code1()
{
    417a:	cf 93       	push	r28
    417c:	df 93       	push	r29
    417e:	cd b7       	in	r28, 0x3d	; 61
    4180:	de b7       	in	r29, 0x3e	; 62
    return error_code1;
    4182:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <error_code1>
}
    4186:	df 91       	pop	r29
    4188:	cf 91       	pop	r28
    418a:	08 95       	ret

0000418c <get_error_gsm>:
////////////////
uint16_t get_error_gsm()
{
    418c:	cf 93       	push	r28
    418e:	df 93       	push	r29
    4190:	00 d0       	rcall	.+0      	; 0x4192 <get_error_gsm+0x6>
    4192:	0f 92       	push	r0
    4194:	cd b7       	in	r28, 0x3d	; 61
    4196:	de b7       	in	r29, 0x3e	; 62
    return get_val(error_gsm);
    4198:	8f e5       	ldi	r24, 0x5F	; 95
    419a:	90 e0       	ldi	r25, 0x00	; 0
    419c:	fc 01       	movw	r30, r24
    419e:	80 81       	ld	r24, Z
    41a0:	89 83       	std	Y+1, r24	; 0x01
    41a2:	f8 94       	cli
    41a4:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <error_gsm>
    41a8:	90 91 6f 03 	lds	r25, 0x036F	; 0x80036f <error_gsm+0x1>
    41ac:	9b 83       	std	Y+3, r25	; 0x03
    41ae:	8a 83       	std	Y+2, r24	; 0x02
    41b0:	8f e5       	ldi	r24, 0x5F	; 95
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	29 81       	ldd	r18, Y+1	; 0x01
    41b6:	fc 01       	movw	r30, r24
    41b8:	20 83       	st	Z, r18
    41ba:	8a 81       	ldd	r24, Y+2	; 0x02
    41bc:	9b 81       	ldd	r25, Y+3	; 0x03
}
    41be:	0f 90       	pop	r0
    41c0:	0f 90       	pop	r0
    41c2:	0f 90       	pop	r0
    41c4:	df 91       	pop	r29
    41c6:	cf 91       	pop	r28
    41c8:	08 95       	ret

000041ca <set_error_gsm>:

////////////////////////////////////
void set_error_gsm(uint16_t _err)
{
    41ca:	cf 93       	push	r28
    41cc:	df 93       	push	r29
    41ce:	00 d0       	rcall	.+0      	; 0x41d0 <set_error_gsm+0x6>
    41d0:	0f 92       	push	r0
    41d2:	cd b7       	in	r28, 0x3d	; 61
    41d4:	de b7       	in	r29, 0x3e	; 62
    41d6:	9b 83       	std	Y+3, r25	; 0x03
    41d8:	8a 83       	std	Y+2, r24	; 0x02
    set_val(error_gsm, _err);
    41da:	8f e5       	ldi	r24, 0x5F	; 95
    41dc:	90 e0       	ldi	r25, 0x00	; 0
    41de:	fc 01       	movw	r30, r24
    41e0:	80 81       	ld	r24, Z
    41e2:	89 83       	std	Y+1, r24	; 0x01
    41e4:	f8 94       	cli
    41e6:	8a 81       	ldd	r24, Y+2	; 0x02
    41e8:	9b 81       	ldd	r25, Y+3	; 0x03
    41ea:	90 93 6f 03 	sts	0x036F, r25	; 0x80036f <error_gsm+0x1>
    41ee:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <error_gsm>
    41f2:	8f e5       	ldi	r24, 0x5F	; 95
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	29 81       	ldd	r18, Y+1	; 0x01
    41f8:	fc 01       	movw	r30, r24
    41fa:	20 83       	st	Z, r18
}
    41fc:	00 00       	nop
    41fe:	0f 90       	pop	r0
    4200:	0f 90       	pop	r0
    4202:	0f 90       	pop	r0
    4204:	df 91       	pop	r29
    4206:	cf 91       	pop	r28
    4208:	08 95       	ret

0000420a <hex_to_char>:


/////////////////////////////
static unsigned char hex_to_char(char c)
{
    420a:	cf 93       	push	r28
    420c:	df 93       	push	r29
    420e:	00 d0       	rcall	.+0      	; 0x4210 <hex_to_char+0x6>
    4210:	cd b7       	in	r28, 0x3d	; 61
    4212:	de b7       	in	r29, 0x3e	; 62
    4214:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = (uint8_t)c;
    4216:	8a 81       	ldd	r24, Y+2	; 0x02
    4218:	89 83       	std	Y+1, r24	; 0x01
    if ( (i>=0x30) && (i<=0x39) )
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	80 33       	cpi	r24, 0x30	; 48
    421e:	30 f0       	brcs	.+12     	; 0x422c <hex_to_char+0x22>
    4220:	89 81       	ldd	r24, Y+1	; 0x01
    4222:	8a 33       	cpi	r24, 0x3A	; 58
    4224:	18 f4       	brcc	.+6      	; 0x422c <hex_to_char+0x22>
    {
        return i-0x30;
    4226:	89 81       	ldd	r24, Y+1	; 0x01
    4228:	80 53       	subi	r24, 0x30	; 48
    422a:	13 c0       	rjmp	.+38     	; 0x4252 <hex_to_char+0x48>
    }
    else if ( (i>=0x41) && (i<=0x46) )
    422c:	89 81       	ldd	r24, Y+1	; 0x01
    422e:	81 34       	cpi	r24, 0x41	; 65
    4230:	30 f0       	brcs	.+12     	; 0x423e <hex_to_char+0x34>
    4232:	89 81       	ldd	r24, Y+1	; 0x01
    4234:	87 34       	cpi	r24, 0x47	; 71
    4236:	18 f4       	brcc	.+6      	; 0x423e <hex_to_char+0x34>
    {
        return i-0x37;
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	87 53       	subi	r24, 0x37	; 55
    423c:	0a c0       	rjmp	.+20     	; 0x4252 <hex_to_char+0x48>
    }
    else if ( (i>=0x61) && (i<=0x66) )
    423e:	89 81       	ldd	r24, Y+1	; 0x01
    4240:	81 36       	cpi	r24, 0x61	; 97
    4242:	30 f0       	brcs	.+12     	; 0x4250 <hex_to_char+0x46>
    4244:	89 81       	ldd	r24, Y+1	; 0x01
    4246:	87 36       	cpi	r24, 0x67	; 103
    4248:	18 f4       	brcc	.+6      	; 0x4250 <hex_to_char+0x46>
    {
        return i-0x57;
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	87 55       	subi	r24, 0x57	; 87
    424e:	01 c0       	rjmp	.+2      	; 0x4252 <hex_to_char+0x48>
    }
    else
    {
        return      0;
    4250:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    4252:	0f 90       	pop	r0
    4254:	0f 90       	pop	r0
    4256:	df 91       	pop	r29
    4258:	cf 91       	pop	r28
    425a:	08 95       	ret

0000425c <led_gsm>:
//}


//******************************************************************************************
void led_gsm(void)
{
    425c:	cf 93       	push	r28
    425e:	df 93       	push	r29
    4260:	cd b7       	in	r28, 0x3d	; 61
    4262:	de b7       	in	r29, 0x3e	; 62
    static uint8_t j = 0;
    static uint8_t temp_flag = 0;

    if(temp_flag == 0 && registered_in_gsm_network == 1)
    4264:	80 91 8f 03 	lds	r24, 0x038F	; 0x80038f <temp_flag.1>
    4268:	88 23       	and	r24, r24
    426a:	89 f4       	brne	.+34     	; 0x428e <led_gsm+0x32>
    426c:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <registered_in_gsm_network>
    4270:	81 30       	cpi	r24, 0x01	; 1
    4272:	69 f4       	brne	.+26     	; 0x428e <led_gsm+0x32>
    {
        DigitalWrite(GREEN_LED, HIGH);
    4274:	85 e2       	ldi	r24, 0x25	; 37
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	fc 01       	movw	r30, r24
    427a:	20 81       	ld	r18, Z
    427c:	85 e2       	ldi	r24, 0x25	; 37
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	20 61       	ori	r18, 0x10	; 16
    4282:	fc 01       	movw	r30, r24
    4284:	20 83       	st	Z, r18
        temp_flag = 1;
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	80 93 8f 03 	sts	0x038F, r24	; 0x80038f <temp_flag.1>
        {
            DigitalLevelToggle(GREEN_LED);
            j = 0;
        }
    }
}
    428c:	1b c0       	rjmp	.+54     	; 0x42c4 <led_gsm+0x68>
    else if(registered_in_gsm_network == 0)
    428e:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <registered_in_gsm_network>
    4292:	88 23       	and	r24, r24
    4294:	b9 f4       	brne	.+46     	; 0x42c4 <led_gsm+0x68>
        j++;
    4296:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <j.0>
    429a:	8f 5f       	subi	r24, 0xFF	; 255
    429c:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <j.0>
        temp_flag = 0;
    42a0:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <temp_flag.1>
        if(j > 50)
    42a4:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <j.0>
    42a8:	83 33       	cpi	r24, 0x33	; 51
    42aa:	60 f0       	brcs	.+24     	; 0x42c4 <led_gsm+0x68>
            DigitalLevelToggle(GREEN_LED);
    42ac:	85 e2       	ldi	r24, 0x25	; 37
    42ae:	90 e0       	ldi	r25, 0x00	; 0
    42b0:	fc 01       	movw	r30, r24
    42b2:	30 81       	ld	r19, Z
    42b4:	85 e2       	ldi	r24, 0x25	; 37
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	20 e1       	ldi	r18, 0x10	; 16
    42ba:	23 27       	eor	r18, r19
    42bc:	fc 01       	movw	r30, r24
    42be:	20 83       	st	Z, r18
            j = 0;
    42c0:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <j.0>
}
    42c4:	00 00       	nop
    42c6:	df 91       	pop	r29
    42c8:	cf 91       	pop	r28
    42ca:	08 95       	ret

000042cc <get_phone_number>:
//******************************************************************************************

//*******************************************************************************************
char *get_phone_number(void)
{
    42cc:	cf 93       	push	r28
    42ce:	df 93       	push	r29
    42d0:	cd b7       	in	r28, 0x3d	; 61
    42d2:	de b7       	in	r29, 0x3e	; 62
    return rec_phone_number;
    42d4:	8b e5       	ldi	r24, 0x5B	; 91
    42d6:	93 e0       	ldi	r25, 0x03	; 3
}
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	08 95       	ret

000042de <SMSdecodUCS2>:

//*******************************************************************************************
static void SMSdecodUCS2(char* dst, char* src, uint16_t len, uint16_t pos)
{
    42de:	1f 93       	push	r17
    42e0:	cf 93       	push	r28
    42e2:	df 93       	push	r29
    42e4:	cd b7       	in	r28, 0x3d	; 61
    42e6:	de b7       	in	r29, 0x3e	; 62
    42e8:	2e 97       	sbiw	r28, 0x0e	; 14
    42ea:	0f b6       	in	r0, 0x3f	; 63
    42ec:	f8 94       	cli
    42ee:	de bf       	out	0x3e, r29	; 62
    42f0:	0f be       	out	0x3f, r0	; 63
    42f2:	cd bf       	out	0x3d, r28	; 61
    42f4:	98 87       	std	Y+8, r25	; 0x08
    42f6:	8f 83       	std	Y+7, r24	; 0x07
    42f8:	7a 87       	std	Y+10, r23	; 0x0a
    42fa:	69 87       	std	Y+9, r22	; 0x09
    42fc:	5c 87       	std	Y+12, r21	; 0x0c
    42fe:	4b 87       	std	Y+11, r20	; 0x0b
    4300:	3e 87       	std	Y+14, r19	; 0x0e
    4302:	2d 87       	std	Y+13, r18	; 0x0d
    uint8_t  byteThis = 0;
    4304:	1d 82       	std	Y+5, r1	; 0x05
    uint8_t  byteNext = 0;
    4306:	1e 82       	std	Y+6, r1	; 0x06
    uint16_t numIn    = 0;
    4308:	1a 82       	std	Y+2, r1	; 0x02
    430a:	19 82       	std	Y+1, r1	; 0x01
    uint16_t numOut   = 0;
    430c:	1c 82       	std	Y+4, r1	; 0x04
    430e:	1b 82       	std	Y+3, r1	; 0x03
    len*=2;
    4310:	8b 85       	ldd	r24, Y+11	; 0x0b
    4312:	9c 85       	ldd	r25, Y+12	; 0x0c
    4314:	88 0f       	add	r24, r24
    4316:	99 1f       	adc	r25, r25
    4318:	9c 87       	std	Y+12, r25	; 0x0c
    431a:	8b 87       	std	Y+11, r24	; 0x0b
    //
    while(numIn<len)
    431c:	e8 c0       	rjmp	.+464    	; 0x44ee <SMSdecodUCS2+0x210>
    {
        byteThis = hex_to_char(src[pos+numIn])*16 + hex_to_char(src[pos+numIn+1]);
    431e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4320:	3e 85       	ldd	r19, Y+14	; 0x0e
    4322:	89 81       	ldd	r24, Y+1	; 0x01
    4324:	9a 81       	ldd	r25, Y+2	; 0x02
    4326:	82 0f       	add	r24, r18
    4328:	93 1f       	adc	r25, r19
    432a:	29 85       	ldd	r18, Y+9	; 0x09
    432c:	3a 85       	ldd	r19, Y+10	; 0x0a
    432e:	82 0f       	add	r24, r18
    4330:	93 1f       	adc	r25, r19
    4332:	fc 01       	movw	r30, r24
    4334:	80 81       	ld	r24, Z
    4336:	0e 94 05 21 	call	0x420a	; 0x420a <hex_to_char>
    433a:	18 2f       	mov	r17, r24
    433c:	12 95       	swap	r17
    433e:	10 7f       	andi	r17, 0xF0	; 240
    4340:	2d 85       	ldd	r18, Y+13	; 0x0d
    4342:	3e 85       	ldd	r19, Y+14	; 0x0e
    4344:	89 81       	ldd	r24, Y+1	; 0x01
    4346:	9a 81       	ldd	r25, Y+2	; 0x02
    4348:	82 0f       	add	r24, r18
    434a:	93 1f       	adc	r25, r19
    434c:	01 96       	adiw	r24, 0x01	; 1
    434e:	29 85       	ldd	r18, Y+9	; 0x09
    4350:	3a 85       	ldd	r19, Y+10	; 0x0a
    4352:	82 0f       	add	r24, r18
    4354:	93 1f       	adc	r25, r19
    4356:	fc 01       	movw	r30, r24
    4358:	80 81       	ld	r24, Z
    435a:	0e 94 05 21 	call	0x420a	; 0x420a <hex_to_char>
    435e:	81 0f       	add	r24, r17
    4360:	8d 83       	std	Y+5, r24	; 0x05
        numIn+=2;									//	Читаем значение очередного байта в переменную byteThis.
    4362:	89 81       	ldd	r24, Y+1	; 0x01
    4364:	9a 81       	ldd	r25, Y+2	; 0x02
    4366:	02 96       	adiw	r24, 0x02	; 2
    4368:	9a 83       	std	Y+2, r25	; 0x02
    436a:	89 83       	std	Y+1, r24	; 0x01
        byteNext = hex_to_char(src[pos+numIn])*16 + hex_to_char(src[pos+numIn+1]);
    436c:	2d 85       	ldd	r18, Y+13	; 0x0d
    436e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4370:	89 81       	ldd	r24, Y+1	; 0x01
    4372:	9a 81       	ldd	r25, Y+2	; 0x02
    4374:	82 0f       	add	r24, r18
    4376:	93 1f       	adc	r25, r19
    4378:	29 85       	ldd	r18, Y+9	; 0x09
    437a:	3a 85       	ldd	r19, Y+10	; 0x0a
    437c:	82 0f       	add	r24, r18
    437e:	93 1f       	adc	r25, r19
    4380:	fc 01       	movw	r30, r24
    4382:	80 81       	ld	r24, Z
    4384:	0e 94 05 21 	call	0x420a	; 0x420a <hex_to_char>
    4388:	18 2f       	mov	r17, r24
    438a:	12 95       	swap	r17
    438c:	10 7f       	andi	r17, 0xF0	; 240
    438e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4390:	3e 85       	ldd	r19, Y+14	; 0x0e
    4392:	89 81       	ldd	r24, Y+1	; 0x01
    4394:	9a 81       	ldd	r25, Y+2	; 0x02
    4396:	82 0f       	add	r24, r18
    4398:	93 1f       	adc	r25, r19
    439a:	01 96       	adiw	r24, 0x01	; 1
    439c:	29 85       	ldd	r18, Y+9	; 0x09
    439e:	3a 85       	ldd	r19, Y+10	; 0x0a
    43a0:	82 0f       	add	r24, r18
    43a2:	93 1f       	adc	r25, r19
    43a4:	fc 01       	movw	r30, r24
    43a6:	80 81       	ld	r24, Z
    43a8:	0e 94 05 21 	call	0x420a	; 0x420a <hex_to_char>
    43ac:	81 0f       	add	r24, r17
    43ae:	8e 83       	std	Y+6, r24	; 0x06
        numIn+=2;									//	Читаем значение следующего байта в переменную byteNext.
    43b0:	89 81       	ldd	r24, Y+1	; 0x01
    43b2:	9a 81       	ldd	r25, Y+2	; 0x02
    43b4:	02 96       	adiw	r24, 0x02	; 2
    43b6:	9a 83       	std	Y+2, r25	; 0x02
    43b8:	89 83       	std	Y+1, r24	; 0x01
        if(byteThis==0x00)
    43ba:	8d 81       	ldd	r24, Y+5	; 0x05
    43bc:	88 23       	and	r24, r24
    43be:	79 f4       	brne	.+30     	; 0x43de <SMSdecodUCS2+0x100>
        {
            dst[numOut]=byteNext;
    43c0:	2f 81       	ldd	r18, Y+7	; 0x07
    43c2:	38 85       	ldd	r19, Y+8	; 0x08
    43c4:	8b 81       	ldd	r24, Y+3	; 0x03
    43c6:	9c 81       	ldd	r25, Y+4	; 0x04
    43c8:	82 0f       	add	r24, r18
    43ca:	93 1f       	adc	r25, r19
    43cc:	2e 81       	ldd	r18, Y+6	; 0x06
    43ce:	fc 01       	movw	r30, r24
    43d0:	20 83       	st	Z, r18
            numOut++;
    43d2:	8b 81       	ldd	r24, Y+3	; 0x03
    43d4:	9c 81       	ldd	r25, Y+4	; 0x04
    43d6:	01 96       	adiw	r24, 0x01	; 1
    43d8:	9c 83       	std	Y+4, r25	; 0x04
    43da:	8b 83       	std	Y+3, r24	; 0x03
    43dc:	88 c0       	rjmp	.+272    	; 0x44ee <SMSdecodUCS2+0x210>
        }
        else											//  Символы латинницы
            if(byteNext==0x01)
    43de:	8e 81       	ldd	r24, Y+6	; 0x06
    43e0:	81 30       	cpi	r24, 0x01	; 1
    43e2:	01 f5       	brne	.+64     	; 0x4424 <SMSdecodUCS2+0x146>
            {
                dst[numOut]=0xD0;
    43e4:	2f 81       	ldd	r18, Y+7	; 0x07
    43e6:	38 85       	ldd	r19, Y+8	; 0x08
    43e8:	8b 81       	ldd	r24, Y+3	; 0x03
    43ea:	9c 81       	ldd	r25, Y+4	; 0x04
    43ec:	82 0f       	add	r24, r18
    43ee:	93 1f       	adc	r25, r19
    43f0:	20 ed       	ldi	r18, 0xD0	; 208
    43f2:	fc 01       	movw	r30, r24
    43f4:	20 83       	st	Z, r18
                numOut++;
    43f6:	8b 81       	ldd	r24, Y+3	; 0x03
    43f8:	9c 81       	ldd	r25, Y+4	; 0x04
    43fa:	01 96       	adiw	r24, 0x01	; 1
    43fc:	9c 83       	std	Y+4, r25	; 0x04
    43fe:	8b 83       	std	Y+3, r24	; 0x03
                dst[numOut]=byteNext+0x80;
    4400:	8e 81       	ldd	r24, Y+6	; 0x06
    4402:	40 e8       	ldi	r20, 0x80	; 128
    4404:	48 0f       	add	r20, r24
    4406:	2f 81       	ldd	r18, Y+7	; 0x07
    4408:	38 85       	ldd	r19, Y+8	; 0x08
    440a:	8b 81       	ldd	r24, Y+3	; 0x03
    440c:	9c 81       	ldd	r25, Y+4	; 0x04
    440e:	82 0f       	add	r24, r18
    4410:	93 1f       	adc	r25, r19
    4412:	24 2f       	mov	r18, r20
    4414:	fc 01       	movw	r30, r24
    4416:	20 83       	st	Z, r18
                numOut++;
    4418:	8b 81       	ldd	r24, Y+3	; 0x03
    441a:	9c 81       	ldd	r25, Y+4	; 0x04
    441c:	01 96       	adiw	r24, 0x01	; 1
    441e:	9c 83       	std	Y+4, r25	; 0x04
    4420:	8b 83       	std	Y+3, r24	; 0x03
    4422:	65 c0       	rjmp	.+202    	; 0x44ee <SMSdecodUCS2+0x210>
            }
            else											//	Симол  'Ё'       - 04 01          =>  208 129
                if(byteNext==0x51)
    4424:	8e 81       	ldd	r24, Y+6	; 0x06
    4426:	81 35       	cpi	r24, 0x51	; 81
    4428:	01 f5       	brne	.+64     	; 0x446a <SMSdecodUCS2+0x18c>
                {
                    dst[numOut]=0xD1;
    442a:	2f 81       	ldd	r18, Y+7	; 0x07
    442c:	38 85       	ldd	r19, Y+8	; 0x08
    442e:	8b 81       	ldd	r24, Y+3	; 0x03
    4430:	9c 81       	ldd	r25, Y+4	; 0x04
    4432:	82 0f       	add	r24, r18
    4434:	93 1f       	adc	r25, r19
    4436:	21 ed       	ldi	r18, 0xD1	; 209
    4438:	fc 01       	movw	r30, r24
    443a:	20 83       	st	Z, r18
                    numOut++;
    443c:	8b 81       	ldd	r24, Y+3	; 0x03
    443e:	9c 81       	ldd	r25, Y+4	; 0x04
    4440:	01 96       	adiw	r24, 0x01	; 1
    4442:	9c 83       	std	Y+4, r25	; 0x04
    4444:	8b 83       	std	Y+3, r24	; 0x03
                    dst[numOut]=byteNext+0x40;
    4446:	8e 81       	ldd	r24, Y+6	; 0x06
    4448:	40 e4       	ldi	r20, 0x40	; 64
    444a:	48 0f       	add	r20, r24
    444c:	2f 81       	ldd	r18, Y+7	; 0x07
    444e:	38 85       	ldd	r19, Y+8	; 0x08
    4450:	8b 81       	ldd	r24, Y+3	; 0x03
    4452:	9c 81       	ldd	r25, Y+4	; 0x04
    4454:	82 0f       	add	r24, r18
    4456:	93 1f       	adc	r25, r19
    4458:	24 2f       	mov	r18, r20
    445a:	fc 01       	movw	r30, r24
    445c:	20 83       	st	Z, r18
                    numOut++;
    445e:	8b 81       	ldd	r24, Y+3	; 0x03
    4460:	9c 81       	ldd	r25, Y+4	; 0x04
    4462:	01 96       	adiw	r24, 0x01	; 1
    4464:	9c 83       	std	Y+4, r25	; 0x04
    4466:	8b 83       	std	Y+3, r24	; 0x03
    4468:	42 c0       	rjmp	.+132    	; 0x44ee <SMSdecodUCS2+0x210>
                }
                else											//	Симол  'ё'       - 04 81          =>  209 145
                    if(byteNext< 0x40)
    446a:	8e 81       	ldd	r24, Y+6	; 0x06
    446c:	80 34       	cpi	r24, 0x40	; 64
    446e:	00 f5       	brcc	.+64     	; 0x44b0 <SMSdecodUCS2+0x1d2>
                    {
                        dst[numOut]=0xD0;
    4470:	2f 81       	ldd	r18, Y+7	; 0x07
    4472:	38 85       	ldd	r19, Y+8	; 0x08
    4474:	8b 81       	ldd	r24, Y+3	; 0x03
    4476:	9c 81       	ldd	r25, Y+4	; 0x04
    4478:	82 0f       	add	r24, r18
    447a:	93 1f       	adc	r25, r19
    447c:	20 ed       	ldi	r18, 0xD0	; 208
    447e:	fc 01       	movw	r30, r24
    4480:	20 83       	st	Z, r18
                        numOut++;
    4482:	8b 81       	ldd	r24, Y+3	; 0x03
    4484:	9c 81       	ldd	r25, Y+4	; 0x04
    4486:	01 96       	adiw	r24, 0x01	; 1
    4488:	9c 83       	std	Y+4, r25	; 0x04
    448a:	8b 83       	std	Y+3, r24	; 0x03
                        dst[numOut]=byteNext+0x80;
    448c:	8e 81       	ldd	r24, Y+6	; 0x06
    448e:	40 e8       	ldi	r20, 0x80	; 128
    4490:	48 0f       	add	r20, r24
    4492:	2f 81       	ldd	r18, Y+7	; 0x07
    4494:	38 85       	ldd	r19, Y+8	; 0x08
    4496:	8b 81       	ldd	r24, Y+3	; 0x03
    4498:	9c 81       	ldd	r25, Y+4	; 0x04
    449a:	82 0f       	add	r24, r18
    449c:	93 1f       	adc	r25, r19
    449e:	24 2f       	mov	r18, r20
    44a0:	fc 01       	movw	r30, r24
    44a2:	20 83       	st	Z, r18
                        numOut++;
    44a4:	8b 81       	ldd	r24, Y+3	; 0x03
    44a6:	9c 81       	ldd	r25, Y+4	; 0x04
    44a8:	01 96       	adiw	r24, 0x01	; 1
    44aa:	9c 83       	std	Y+4, r25	; 0x04
    44ac:	8b 83       	std	Y+3, r24	; 0x03
    44ae:	1f c0       	rjmp	.+62     	; 0x44ee <SMSdecodUCS2+0x210>
                    }
                    else											//	Симолы 'А-Я,а-п' - 04 16 - 04 63  =>  208 144 - 208 191
                    {
                        dst[numOut]=0xD1;    //	Симолы 'р-я'     - 04 64 - 04 79  =>  209 128 - 209 143
    44b0:	2f 81       	ldd	r18, Y+7	; 0x07
    44b2:	38 85       	ldd	r19, Y+8	; 0x08
    44b4:	8b 81       	ldd	r24, Y+3	; 0x03
    44b6:	9c 81       	ldd	r25, Y+4	; 0x04
    44b8:	82 0f       	add	r24, r18
    44ba:	93 1f       	adc	r25, r19
    44bc:	21 ed       	ldi	r18, 0xD1	; 209
    44be:	fc 01       	movw	r30, r24
    44c0:	20 83       	st	Z, r18
                        numOut++;
    44c2:	8b 81       	ldd	r24, Y+3	; 0x03
    44c4:	9c 81       	ldd	r25, Y+4	; 0x04
    44c6:	01 96       	adiw	r24, 0x01	; 1
    44c8:	9c 83       	std	Y+4, r25	; 0x04
    44ca:	8b 83       	std	Y+3, r24	; 0x03
                        dst[numOut]=byteNext+0x40;
    44cc:	8e 81       	ldd	r24, Y+6	; 0x06
    44ce:	40 e4       	ldi	r20, 0x40	; 64
    44d0:	48 0f       	add	r20, r24
    44d2:	2f 81       	ldd	r18, Y+7	; 0x07
    44d4:	38 85       	ldd	r19, Y+8	; 0x08
    44d6:	8b 81       	ldd	r24, Y+3	; 0x03
    44d8:	9c 81       	ldd	r25, Y+4	; 0x04
    44da:	82 0f       	add	r24, r18
    44dc:	93 1f       	adc	r25, r19
    44de:	24 2f       	mov	r18, r20
    44e0:	fc 01       	movw	r30, r24
    44e2:	20 83       	st	Z, r18
                        numOut++;
    44e4:	8b 81       	ldd	r24, Y+3	; 0x03
    44e6:	9c 81       	ldd	r25, Y+4	; 0x04
    44e8:	01 96       	adiw	r24, 0x01	; 1
    44ea:	9c 83       	std	Y+4, r25	; 0x04
    44ec:	8b 83       	std	Y+3, r24	; 0x03
    while(numIn<len)
    44ee:	29 81       	ldd	r18, Y+1	; 0x01
    44f0:	3a 81       	ldd	r19, Y+2	; 0x02
    44f2:	8b 85       	ldd	r24, Y+11	; 0x0b
    44f4:	9c 85       	ldd	r25, Y+12	; 0x0c
    44f6:	28 17       	cp	r18, r24
    44f8:	39 07       	cpc	r19, r25
    44fa:	08 f4       	brcc	.+2      	; 0x44fe <SMSdecodUCS2+0x220>
    44fc:	10 cf       	rjmp	.-480    	; 0x431e <SMSdecodUCS2+0x40>
                    }
    }
    dst[numOut]=0;																									//
    44fe:	2f 81       	ldd	r18, Y+7	; 0x07
    4500:	38 85       	ldd	r19, Y+8	; 0x08
    4502:	8b 81       	ldd	r24, Y+3	; 0x03
    4504:	9c 81       	ldd	r25, Y+4	; 0x04
    4506:	82 0f       	add	r24, r18
    4508:	93 1f       	adc	r25, r19
    450a:	fc 01       	movw	r30, r24
    450c:	10 82       	st	Z, r1
    //
    //
}
    450e:	00 00       	nop
    4510:	2e 96       	adiw	r28, 0x0e	; 14
    4512:	0f b6       	in	r0, 0x3f	; 63
    4514:	f8 94       	cli
    4516:	de bf       	out	0x3e, r29	; 62
    4518:	0f be       	out	0x3f, r0	; 63
    451a:	cd bf       	out	0x3d, r28	; 61
    451c:	df 91       	pop	r29
    451e:	cf 91       	pop	r28
    4520:	1f 91       	pop	r17
    4522:	08 95       	ret

00004524 <get_arr_dep>:

//*******************************************************************************************
char* get_arr_dep(void)
{
    4524:	cf 93       	push	r28
    4526:	df 93       	push	r29
    4528:	cd b7       	in	r28, 0x3d	; 61
    452a:	de b7       	in	r29, 0x3e	; 62
    return arr_dep;
    452c:	80 e7       	ldi	r24, 0x70	; 112
    452e:	93 e0       	ldi	r25, 0x03	; 3
}
    4530:	df 91       	pop	r29
    4532:	cf 91       	pop	r28
    4534:	08 95       	ret

00004536 <len_to_char>:
//
//*******************************************************************************************

static uint8_t len_to_char(char *p_src, uint8_t end_ch)
{
    4536:	0f 93       	push	r16
    4538:	1f 93       	push	r17
    453a:	cf 93       	push	r28
    453c:	df 93       	push	r29
    453e:	00 d0       	rcall	.+0      	; 0x4540 <len_to_char+0xa>
    4540:	00 d0       	rcall	.+0      	; 0x4542 <len_to_char+0xc>
    4542:	cd b7       	in	r28, 0x3d	; 61
    4544:	de b7       	in	r29, 0x3e	; 62
    4546:	9b 83       	std	Y+3, r25	; 0x03
    4548:	8a 83       	std	Y+2, r24	; 0x02
    454a:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t i=0;
    454c:	19 82       	std	Y+1, r1	; 0x01

    for( i = 0; i < strlen(p_src) && p_src[i]!=end_ch; i++) {;}
    454e:	19 82       	std	Y+1, r1	; 0x01
    4550:	03 c0       	rjmp	.+6      	; 0x4558 <len_to_char+0x22>
    4552:	89 81       	ldd	r24, Y+1	; 0x01
    4554:	8f 5f       	subi	r24, 0xFF	; 255
    4556:	89 83       	std	Y+1, r24	; 0x01
    4558:	89 81       	ldd	r24, Y+1	; 0x01
    455a:	08 2f       	mov	r16, r24
    455c:	10 e0       	ldi	r17, 0x00	; 0
    455e:	8a 81       	ldd	r24, Y+2	; 0x02
    4560:	9b 81       	ldd	r25, Y+3	; 0x03
    4562:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <strlen>
    4566:	08 17       	cp	r16, r24
    4568:	19 07       	cpc	r17, r25
    456a:	90 f4       	brcc	.+36     	; 0x4590 <len_to_char+0x5a>
    456c:	89 81       	ldd	r24, Y+1	; 0x01
    456e:	88 2f       	mov	r24, r24
    4570:	90 e0       	ldi	r25, 0x00	; 0
    4572:	2a 81       	ldd	r18, Y+2	; 0x02
    4574:	3b 81       	ldd	r19, Y+3	; 0x03
    4576:	82 0f       	add	r24, r18
    4578:	93 1f       	adc	r25, r19
    457a:	fc 01       	movw	r30, r24
    457c:	80 81       	ld	r24, Z
    457e:	28 2f       	mov	r18, r24
    4580:	88 0f       	add	r24, r24
    4582:	33 0b       	sbc	r19, r19
    4584:	8c 81       	ldd	r24, Y+4	; 0x04
    4586:	88 2f       	mov	r24, r24
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	28 17       	cp	r18, r24
    458c:	39 07       	cpc	r19, r25
    458e:	09 f7       	brne	.-62     	; 0x4552 <len_to_char+0x1c>

    return i;
    4590:	89 81       	ldd	r24, Y+1	; 0x01
}
    4592:	0f 90       	pop	r0
    4594:	0f 90       	pop	r0
    4596:	0f 90       	pop	r0
    4598:	0f 90       	pop	r0
    459a:	df 91       	pop	r29
    459c:	cf 91       	pop	r28
    459e:	1f 91       	pop	r17
    45a0:	0f 91       	pop	r16
    45a2:	08 95       	ret

000045a4 <main>:
 */

#include "main.h"

int main(void)
{
    45a4:	cf 93       	push	r28
    45a6:	df 93       	push	r29
    45a8:	0f 92       	push	r0
    45aa:	cd b7       	in	r28, 0x3d	; 61
    45ac:	de b7       	in	r29, 0x3e	; 62
//#if(DEBUG==0)
    _WDT_RESET(); // сброс сторожевого таймера
    45ae:	a8 95       	wdr
    WDTCSR = (1<<WDE) | (1<<WDP0) | (1<<WDP3);
    45b0:	80 e6       	ldi	r24, 0x60	; 96
    45b2:	90 e0       	ldi	r25, 0x00	; 0
    45b4:	29 e2       	ldi	r18, 0x29	; 41
    45b6:	fc 01       	movw	r30, r24
    45b8:	20 83       	st	Z, r18
//#endif
    init_uart();
    45ba:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <init_uart>
    timer1_init();
    45be:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <timer1_init>
    softuart_init();
    45c2:	0e 94 4f 2c 	call	0x589e	; 0x589e <softuart_init>
    sei();
    45c6:	78 94       	sei
    port_init();
    45c8:	0e 94 37 24 	call	0x486e	; 0x486e <port_init>

    init_internal_temperature();
    45cc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <init_internal_temperature>
    softuart_puts_p(PSTR("start"));
    45d0:	89 e0       	ldi	r24, 0x09	; 9
    45d2:	96 e0       	ldi	r25, 0x06	; 6
    45d4:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
    charge_bat();
    45d8:	0e 94 7f 08 	call	0x10fe	; 0x10fe <charge_bat>
    uint8_t answer = 0;
    45dc:	19 82       	std	Y+1, r1	; 0x01
    answer = setup_init();
    45de:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <setup_init>
    45e2:	89 83       	std	Y+1, r24	; 0x01
    if (answer)
    45e4:	89 81       	ldd	r24, Y+1	; 0x01
    45e6:	88 23       	and	r24, r24
    45e8:	21 f0       	breq	.+8      	; 0x45f2 <main+0x4e>
    {
        send_USSD("*101#");
    45ea:	81 e9       	ldi	r24, 0x91	; 145
    45ec:	91 e0       	ldi	r25, 0x01	; 1
    45ee:	0e 94 75 1f 	call	0x3eea	; 0x3eea <send_USSD>
        //softuart_puts_p(PSTR("setup_ok\r\n"));
    }
    eeprom_read_config(1);
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <eeprom_read_config>
    reset_soft_wdt();
    45f8:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <reset_soft_wdt>


    //delete_all_sms();


    softuart_puts_p(PSTR("end setup"));
    45fc:	8f e0       	ldi	r24, 0x0F	; 15
    45fe:	96 e0       	ldi	r25, 0x06	; 6
    4600:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
//    uint32_t time_now = get_time_s();
    for(;;)
    {
        reset_soft_wdt();
    4604:	0e 94 f2 2e 	call	0x5de4	; 0x5de4 <reset_soft_wdt>
        power_control();
    4608:	0e 94 c9 06 	call	0xd92	; 0xd92 <power_control>
        on_off_relay();
    460c:	0e 94 34 05 	call	0xa68	; 0xa68 <on_off_relay>
        check_registration();
    4610:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <check_registration>
        incoming_call_processing();
    4614:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <incoming_call_processing>
        check_deposit();
    4618:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <check_deposit>
        get_sms();
    461c:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <get_sms>
        check_temperature();
    4620:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <check_temperature>
//            //sprintf(tt2, "%d",rrr);
////            softuart_puts_ln(tt2);
//            //DigitalLevelToggle(GREEN_LED);
//            time_now = get_time_s();
//        }
        while(is_queue_not_empty())
    4624:	02 c0       	rjmp	.+4      	; 0x462a <main+0x86>
        {
            get_message_from_mdm();
    4626:	0e 94 40 1a 	call	0x3480	; 0x3480 <get_message_from_mdm>
        while(is_queue_not_empty())
    462a:	0e 94 4c 30 	call	0x6098	; 0x6098 <is_queue_not_empty>
    462e:	88 23       	and	r24, r24
    4630:	d1 f7       	brne	.-12     	; 0x4626 <main+0x82>
        }
        _SLEEP();
    4632:	88 95       	sleep
        reset_soft_wdt();
    4634:	e7 cf       	rjmp	.-50     	; 0x4604 <main+0x60>

00004636 <sensor_port_init>:
#include "main.h"

static uint8_t flag_in_volt = 0;
//*******************************************************************************************************************
void sensor_port_init(void)
{
    4636:	cf 93       	push	r28
    4638:	df 93       	push	r29
    463a:	cd b7       	in	r28, 0x3d	; 61
    463c:	de b7       	in	r29, 0x3e	; 62
    PinMode(PIN_CHECK_CHAPEKA, INPUT);
    463e:	87 e2       	ldi	r24, 0x27	; 39
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	fc 01       	movw	r30, r24
    4644:	20 81       	ld	r18, Z
    4646:	87 e2       	ldi	r24, 0x27	; 39
    4648:	90 e0       	ldi	r25, 0x00	; 0
    464a:	2d 7f       	andi	r18, 0xFD	; 253
    464c:	fc 01       	movw	r30, r24
    464e:	20 83       	st	Z, r18
    DigitalWrite(PIN_CHECK_CHAPEKA, HIGH);
    4650:	88 e2       	ldi	r24, 0x28	; 40
    4652:	90 e0       	ldi	r25, 0x00	; 0
    4654:	fc 01       	movw	r30, r24
    4656:	20 81       	ld	r18, Z
    4658:	88 e2       	ldi	r24, 0x28	; 40
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	22 60       	ori	r18, 0x02	; 2
    465e:	fc 01       	movw	r30, r24
    4660:	20 83       	st	Z, r18
    PinMode(PIN_CHECK_UTKINA, INPUT);
    4662:	87 e2       	ldi	r24, 0x27	; 39
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	fc 01       	movw	r30, r24
    4668:	20 81       	ld	r18, Z
    466a:	87 e2       	ldi	r24, 0x27	; 39
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	2e 7f       	andi	r18, 0xFE	; 254
    4670:	fc 01       	movw	r30, r24
    4672:	20 83       	st	Z, r18
    DigitalWrite(PIN_CHECK_UTKINA, HIGH);
    4674:	88 e2       	ldi	r24, 0x28	; 40
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	fc 01       	movw	r30, r24
    467a:	20 81       	ld	r18, Z
    467c:	88 e2       	ldi	r24, 0x28	; 40
    467e:	90 e0       	ldi	r25, 0x00	; 0
    4680:	21 60       	ori	r18, 0x01	; 1
    4682:	fc 01       	movw	r30, r24
    4684:	20 83       	st	Z, r18
}
    4686:	00 00       	nop
    4688:	df 91       	pop	r29
    468a:	cf 91       	pop	r28
    468c:	08 95       	ret

0000468e <unused_port_init>:

//*******************************************************************************************************************
void unused_port_init(void)
{
    468e:	cf 93       	push	r28
    4690:	df 93       	push	r29
    4692:	cd b7       	in	r28, 0x3d	; 61
    4694:	de b7       	in	r29, 0x3e	; 62
    PinMode(UNUSED1, OUTPUT);
    4696:	84 e2       	ldi	r24, 0x24	; 36
    4698:	90 e0       	ldi	r25, 0x00	; 0
    469a:	fc 01       	movw	r30, r24
    469c:	20 81       	ld	r18, Z
    469e:	84 e2       	ldi	r24, 0x24	; 36
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	21 60       	ori	r18, 0x01	; 1
    46a4:	fc 01       	movw	r30, r24
    46a6:	20 83       	st	Z, r18
    DigitalWrite(UNUSED1, LOW);
    46a8:	85 e2       	ldi	r24, 0x25	; 37
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	fc 01       	movw	r30, r24
    46ae:	20 81       	ld	r18, Z
    46b0:	85 e2       	ldi	r24, 0x25	; 37
    46b2:	90 e0       	ldi	r25, 0x00	; 0
    46b4:	2e 7f       	andi	r18, 0xFE	; 254
    46b6:	fc 01       	movw	r30, r24
    46b8:	20 83       	st	Z, r18
    PinMode(UNUSED2, OUTPUT);
    46ba:	84 e2       	ldi	r24, 0x24	; 36
    46bc:	90 e0       	ldi	r25, 0x00	; 0
    46be:	fc 01       	movw	r30, r24
    46c0:	20 81       	ld	r18, Z
    46c2:	84 e2       	ldi	r24, 0x24	; 36
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	22 60       	ori	r18, 0x02	; 2
    46c8:	fc 01       	movw	r30, r24
    46ca:	20 83       	st	Z, r18
    DigitalWrite(UNUSED2, LOW);
    46cc:	85 e2       	ldi	r24, 0x25	; 37
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	fc 01       	movw	r30, r24
    46d2:	20 81       	ld	r18, Z
    46d4:	85 e2       	ldi	r24, 0x25	; 37
    46d6:	90 e0       	ldi	r25, 0x00	; 0
    46d8:	2d 7f       	andi	r18, 0xFD	; 253
    46da:	fc 01       	movw	r30, r24
    46dc:	20 83       	st	Z, r18
    PinMode(UNUSED3, OUTPUT);
    46de:	84 e2       	ldi	r24, 0x24	; 36
    46e0:	90 e0       	ldi	r25, 0x00	; 0
    46e2:	fc 01       	movw	r30, r24
    46e4:	20 81       	ld	r18, Z
    46e6:	84 e2       	ldi	r24, 0x24	; 36
    46e8:	90 e0       	ldi	r25, 0x00	; 0
    46ea:	24 60       	ori	r18, 0x04	; 4
    46ec:	fc 01       	movw	r30, r24
    46ee:	20 83       	st	Z, r18
    DigitalWrite(UNUSED3, LOW);
    46f0:	85 e2       	ldi	r24, 0x25	; 37
    46f2:	90 e0       	ldi	r25, 0x00	; 0
    46f4:	fc 01       	movw	r30, r24
    46f6:	20 81       	ld	r18, Z
    46f8:	85 e2       	ldi	r24, 0x25	; 37
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	2b 7f       	andi	r18, 0xFB	; 251
    46fe:	fc 01       	movw	r30, r24
    4700:	20 83       	st	Z, r18
    PinMode(UNUSED4, OUTPUT);
    4702:	84 e2       	ldi	r24, 0x24	; 36
    4704:	90 e0       	ldi	r25, 0x00	; 0
    4706:	fc 01       	movw	r30, r24
    4708:	20 81       	ld	r18, Z
    470a:	84 e2       	ldi	r24, 0x24	; 36
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	28 60       	ori	r18, 0x08	; 8
    4710:	fc 01       	movw	r30, r24
    4712:	20 83       	st	Z, r18
    DigitalWrite(UNUSED4, LOW);
    4714:	85 e2       	ldi	r24, 0x25	; 37
    4716:	90 e0       	ldi	r25, 0x00	; 0
    4718:	fc 01       	movw	r30, r24
    471a:	20 81       	ld	r18, Z
    471c:	85 e2       	ldi	r24, 0x25	; 37
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	27 7f       	andi	r18, 0xF7	; 247
    4722:	fc 01       	movw	r30, r24
    4724:	20 83       	st	Z, r18
    PinMode(UNUSED5, OUTPUT);
    4726:	87 e2       	ldi	r24, 0x27	; 39
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	fc 01       	movw	r30, r24
    472c:	20 81       	ld	r18, Z
    472e:	87 e2       	ldi	r24, 0x27	; 39
    4730:	90 e0       	ldi	r25, 0x00	; 0
    4732:	28 60       	ori	r18, 0x08	; 8
    4734:	fc 01       	movw	r30, r24
    4736:	20 83       	st	Z, r18
    DigitalWrite(UNUSED5, LOW);
    4738:	88 e2       	ldi	r24, 0x28	; 40
    473a:	90 e0       	ldi	r25, 0x00	; 0
    473c:	fc 01       	movw	r30, r24
    473e:	20 81       	ld	r18, Z
    4740:	88 e2       	ldi	r24, 0x28	; 40
    4742:	90 e0       	ldi	r25, 0x00	; 0
    4744:	27 7f       	andi	r18, 0xF7	; 247
    4746:	fc 01       	movw	r30, r24
    4748:	20 83       	st	Z, r18
    PinMode(UNUSED6, OUTPUT);
    474a:	87 e2       	ldi	r24, 0x27	; 39
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	fc 01       	movw	r30, r24
    4750:	20 81       	ld	r18, Z
    4752:	87 e2       	ldi	r24, 0x27	; 39
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	20 61       	ori	r18, 0x10	; 16
    4758:	fc 01       	movw	r30, r24
    475a:	20 83       	st	Z, r18
    DigitalWrite(UNUSED6, LOW);
    475c:	88 e2       	ldi	r24, 0x28	; 40
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	fc 01       	movw	r30, r24
    4762:	20 81       	ld	r18, Z
    4764:	88 e2       	ldi	r24, 0x28	; 40
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	2f 7e       	andi	r18, 0xEF	; 239
    476a:	fc 01       	movw	r30, r24
    476c:	20 83       	st	Z, r18
//    PinMode(UNUSED7, OUTPUT);
//    DigitalWrite(UNUSED7, LOW);
    PinMode(UNUSED8, OUTPUT);
    476e:	8a e2       	ldi	r24, 0x2A	; 42
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	fc 01       	movw	r30, r24
    4774:	20 81       	ld	r18, Z
    4776:	8a e2       	ldi	r24, 0x2A	; 42
    4778:	90 e0       	ldi	r25, 0x00	; 0
    477a:	24 60       	ori	r18, 0x04	; 4
    477c:	fc 01       	movw	r30, r24
    477e:	20 83       	st	Z, r18
    DigitalWrite(UNUSED8, LOW);
    4780:	8b e2       	ldi	r24, 0x2B	; 43
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	fc 01       	movw	r30, r24
    4786:	20 81       	ld	r18, Z
    4788:	8b e2       	ldi	r24, 0x2B	; 43
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	2b 7f       	andi	r18, 0xFB	; 251
    478e:	fc 01       	movw	r30, r24
    4790:	20 83       	st	Z, r18
    PinMode(UNUSED9, OUTPUT);
    4792:	8a e2       	ldi	r24, 0x2A	; 42
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	fc 01       	movw	r30, r24
    4798:	20 81       	ld	r18, Z
    479a:	8a e2       	ldi	r24, 0x2A	; 42
    479c:	90 e0       	ldi	r25, 0x00	; 0
    479e:	20 61       	ori	r18, 0x10	; 16
    47a0:	fc 01       	movw	r30, r24
    47a2:	20 83       	st	Z, r18
    DigitalWrite(UNUSED9, LOW);
    47a4:	8b e2       	ldi	r24, 0x2B	; 43
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	fc 01       	movw	r30, r24
    47aa:	20 81       	ld	r18, Z
    47ac:	8b e2       	ldi	r24, 0x2B	; 43
    47ae:	90 e0       	ldi	r25, 0x00	; 0
    47b0:	2f 7e       	andi	r18, 0xEF	; 239
    47b2:	fc 01       	movw	r30, r24
    47b4:	20 83       	st	Z, r18
}
    47b6:	00 00       	nop
    47b8:	df 91       	pop	r29
    47ba:	cf 91       	pop	r28
    47bc:	08 95       	ret

000047be <relay_port_init>:
//*******************************************************************************************************************
void relay_port_init(void)
{
    47be:	cf 93       	push	r28
    47c0:	df 93       	push	r29
    47c2:	cd b7       	in	r28, 0x3d	; 61
    47c4:	de b7       	in	r29, 0x3e	; 62
    PinMode(RELAY_CHAPEKA, OUTPUT);
    47c6:	8a e2       	ldi	r24, 0x2A	; 42
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	fc 01       	movw	r30, r24
    47cc:	20 81       	ld	r18, Z
    47ce:	8a e2       	ldi	r24, 0x2A	; 42
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	20 62       	ori	r18, 0x20	; 32
    47d4:	fc 01       	movw	r30, r24
    47d6:	20 83       	st	Z, r18
    DigitalWrite(RELAY_CHAPEKA, LOW);
    47d8:	8b e2       	ldi	r24, 0x2B	; 43
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	fc 01       	movw	r30, r24
    47de:	20 81       	ld	r18, Z
    47e0:	8b e2       	ldi	r24, 0x2B	; 43
    47e2:	90 e0       	ldi	r25, 0x00	; 0
    47e4:	2f 7d       	andi	r18, 0xDF	; 223
    47e6:	fc 01       	movw	r30, r24
    47e8:	20 83       	st	Z, r18
    PinMode(RELAY_UTKINA, OUTPUT);
    47ea:	8a e2       	ldi	r24, 0x2A	; 42
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	fc 01       	movw	r30, r24
    47f0:	20 81       	ld	r18, Z
    47f2:	8a e2       	ldi	r24, 0x2A	; 42
    47f4:	90 e0       	ldi	r25, 0x00	; 0
    47f6:	20 64       	ori	r18, 0x40	; 64
    47f8:	fc 01       	movw	r30, r24
    47fa:	20 83       	st	Z, r18
    DigitalWrite(RELAY_UTKINA, LOW);
    47fc:	8b e2       	ldi	r24, 0x2B	; 43
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	fc 01       	movw	r30, r24
    4802:	20 81       	ld	r18, Z
    4804:	8b e2       	ldi	r24, 0x2B	; 43
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	2f 7b       	andi	r18, 0xBF	; 191
    480a:	fc 01       	movw	r30, r24
    480c:	20 83       	st	Z, r18
}
    480e:	00 00       	nop
    4810:	df 91       	pop	r29
    4812:	cf 91       	pop	r28
    4814:	08 95       	ret

00004816 <led_port_init>:
//*******************************************************************************************************************
void led_port_init(void)
{
    4816:	cf 93       	push	r28
    4818:	df 93       	push	r29
    481a:	cd b7       	in	r28, 0x3d	; 61
    481c:	de b7       	in	r29, 0x3e	; 62
    PinMode(RED_LED, OUTPUT);
    481e:	84 e2       	ldi	r24, 0x24	; 36
    4820:	90 e0       	ldi	r25, 0x00	; 0
    4822:	fc 01       	movw	r30, r24
    4824:	20 81       	ld	r18, Z
    4826:	84 e2       	ldi	r24, 0x24	; 36
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	20 62       	ori	r18, 0x20	; 32
    482c:	fc 01       	movw	r30, r24
    482e:	20 83       	st	Z, r18
    DigitalWrite(RED_LED, LOW);
    4830:	85 e2       	ldi	r24, 0x25	; 37
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	fc 01       	movw	r30, r24
    4836:	20 81       	ld	r18, Z
    4838:	85 e2       	ldi	r24, 0x25	; 37
    483a:	90 e0       	ldi	r25, 0x00	; 0
    483c:	2f 7d       	andi	r18, 0xDF	; 223
    483e:	fc 01       	movw	r30, r24
    4840:	20 83       	st	Z, r18
    PinMode(GREEN_LED, OUTPUT);
    4842:	84 e2       	ldi	r24, 0x24	; 36
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	fc 01       	movw	r30, r24
    4848:	20 81       	ld	r18, Z
    484a:	84 e2       	ldi	r24, 0x24	; 36
    484c:	90 e0       	ldi	r25, 0x00	; 0
    484e:	20 61       	ori	r18, 0x10	; 16
    4850:	fc 01       	movw	r30, r24
    4852:	20 83       	st	Z, r18
    DigitalWrite(GREEN_LED, LOW);
    4854:	85 e2       	ldi	r24, 0x25	; 37
    4856:	90 e0       	ldi	r25, 0x00	; 0
    4858:	fc 01       	movw	r30, r24
    485a:	20 81       	ld	r18, Z
    485c:	85 e2       	ldi	r24, 0x25	; 37
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	2f 7e       	andi	r18, 0xEF	; 239
    4862:	fc 01       	movw	r30, r24
    4864:	20 83       	st	Z, r18
}
    4866:	00 00       	nop
    4868:	df 91       	pop	r29
    486a:	cf 91       	pop	r28
    486c:	08 95       	ret

0000486e <port_init>:

//*******************************************************************************************************************
void port_init(void)
{
    486e:	cf 93       	push	r28
    4870:	df 93       	push	r29
    4872:	cd b7       	in	r28, 0x3d	; 61
    4874:	de b7       	in	r29, 0x3e	; 62
    relay_port_init();
    4876:	0e 94 df 23 	call	0x47be	; 0x47be <relay_port_init>
    PinMode(PWR_GSM, OUTPUT);
    487a:	8a e2       	ldi	r24, 0x2A	; 42
    487c:	90 e0       	ldi	r25, 0x00	; 0
    487e:	fc 01       	movw	r30, r24
    4880:	20 81       	ld	r18, Z
    4882:	8a e2       	ldi	r24, 0x2A	; 42
    4884:	90 e0       	ldi	r25, 0x00	; 0
    4886:	20 68       	ori	r18, 0x80	; 128
    4888:	fc 01       	movw	r30, r24
    488a:	20 83       	st	Z, r18
    DigitalWrite(PWR_GSM, LOW);
    488c:	8b e2       	ldi	r24, 0x2B	; 43
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	fc 01       	movw	r30, r24
    4892:	20 81       	ld	r18, Z
    4894:	8b e2       	ldi	r24, 0x2B	; 43
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	2f 77       	andi	r18, 0x7F	; 127
    489a:	fc 01       	movw	r30, r24
    489c:	20 83       	st	Z, r18
    sensor_port_init();
    489e:	0e 94 1b 23 	call	0x4636	; 0x4636 <sensor_port_init>
    led_port_init();
    48a2:	0e 94 0b 24 	call	0x4816	; 0x4816 <led_port_init>
    unused_port_init();
    48a6:	0e 94 47 23 	call	0x468e	; 0x468e <unused_port_init>
}
    48aa:	00 00       	nop
    48ac:	df 91       	pop	r29
    48ae:	cf 91       	pop	r28
    48b0:	08 95       	ret

000048b2 <check_volt_input>:
//            debounce3 = 0;
//    }
//}

void check_volt_input(void)
{
    48b2:	cf 93       	push	r28
    48b4:	df 93       	push	r29
    48b6:	00 d0       	rcall	.+0      	; 0x48b8 <check_volt_input+0x6>
    48b8:	cd b7       	in	r28, 0x3d	; 61
    48ba:	de b7       	in	r29, 0x3e	; 62
    uint8_t temp_u = DigitalRead(PIN_CHECK_UTKINA);
    48bc:	86 e2       	ldi	r24, 0x26	; 38
    48be:	90 e0       	ldi	r25, 0x00	; 0
    48c0:	fc 01       	movw	r30, r24
    48c2:	80 81       	ld	r24, Z
    48c4:	88 2f       	mov	r24, r24
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	a0 e0       	ldi	r26, 0x00	; 0
    48ca:	b0 e0       	ldi	r27, 0x00	; 0
    48cc:	81 70       	andi	r24, 0x01	; 1
    48ce:	99 27       	eor	r25, r25
    48d0:	aa 27       	eor	r26, r26
    48d2:	bb 27       	eor	r27, r27
    48d4:	21 e0       	ldi	r18, 0x01	; 1
    48d6:	89 2b       	or	r24, r25
    48d8:	8a 2b       	or	r24, r26
    48da:	8b 2b       	or	r24, r27
    48dc:	09 f4       	brne	.+2      	; 0x48e0 <check_volt_input+0x2e>
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	29 83       	std	Y+1, r18	; 0x01
    uint8_t temp_c = DigitalRead(PIN_CHECK_CHAPEKA);
    48e2:	86 e2       	ldi	r24, 0x26	; 38
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	fc 01       	movw	r30, r24
    48e8:	80 81       	ld	r24, Z
    48ea:	88 2f       	mov	r24, r24
    48ec:	90 e0       	ldi	r25, 0x00	; 0
    48ee:	a0 e0       	ldi	r26, 0x00	; 0
    48f0:	b0 e0       	ldi	r27, 0x00	; 0
    48f2:	82 70       	andi	r24, 0x02	; 2
    48f4:	99 27       	eor	r25, r25
    48f6:	aa 27       	eor	r26, r26
    48f8:	bb 27       	eor	r27, r27
    48fa:	21 e0       	ldi	r18, 0x01	; 1
    48fc:	89 2b       	or	r24, r25
    48fe:	8a 2b       	or	r24, r26
    4900:	8b 2b       	or	r24, r27
    4902:	09 f4       	brne	.+2      	; 0x4906 <check_volt_input+0x54>
    4904:	20 e0       	ldi	r18, 0x00	; 0
    4906:	2a 83       	std	Y+2, r18	; 0x02

    if(temp_u == 0 && temp_c == 0)
    4908:	89 81       	ldd	r24, Y+1	; 0x01
    490a:	88 23       	and	r24, r24
    490c:	39 f4       	brne	.+14     	; 0x491c <check_volt_input+0x6a>
    490e:	8a 81       	ldd	r24, Y+2	; 0x02
    4910:	88 23       	and	r24, r24
    4912:	21 f4       	brne	.+8      	; 0x491c <check_volt_input+0x6a>
    {
            flag_in_volt = IS_VOLT_ALL;
    4914:	83 e0       	ldi	r24, 0x03	; 3
    4916:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <flag_in_volt>
    }
    else
    {
            flag_in_volt = NOT_VOLT;
    }
}
    491a:	10 c0       	rjmp	.+32     	; 0x493c <check_volt_input+0x8a>
    else if(temp_c == 0)
    491c:	8a 81       	ldd	r24, Y+2	; 0x02
    491e:	88 23       	and	r24, r24
    4920:	21 f4       	brne	.+8      	; 0x492a <check_volt_input+0x78>
            flag_in_volt = IS_VOLT_CHAPEKA;
    4922:	82 e0       	ldi	r24, 0x02	; 2
    4924:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <flag_in_volt>
}
    4928:	09 c0       	rjmp	.+18     	; 0x493c <check_volt_input+0x8a>
    else if( temp_u == 0)
    492a:	89 81       	ldd	r24, Y+1	; 0x01
    492c:	88 23       	and	r24, r24
    492e:	21 f4       	brne	.+8      	; 0x4938 <check_volt_input+0x86>
            flag_in_volt = IS_VOLT_UTKINA;
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <flag_in_volt>
}
    4936:	02 c0       	rjmp	.+4      	; 0x493c <check_volt_input+0x8a>
            flag_in_volt = NOT_VOLT;
    4938:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <flag_in_volt>
}
    493c:	00 00       	nop
    493e:	0f 90       	pop	r0
    4940:	0f 90       	pop	r0
    4942:	df 91       	pop	r29
    4944:	cf 91       	pop	r28
    4946:	08 95       	ret

00004948 <get_flag_input_voltage>:
//*******************************************************************************************
uint8_t get_flag_input_voltage(void)
{
    4948:	cf 93       	push	r28
    494a:	df 93       	push	r29
    494c:	00 d0       	rcall	.+0      	; 0x494e <get_flag_input_voltage+0x6>
    494e:	cd b7       	in	r28, 0x3d	; 61
    4950:	de b7       	in	r29, 0x3e	; 62
    return get_val(flag_in_volt);
    4952:	8f e5       	ldi	r24, 0x5F	; 95
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	fc 01       	movw	r30, r24
    4958:	80 81       	ld	r24, Z
    495a:	89 83       	std	Y+1, r24	; 0x01
    495c:	f8 94       	cli
    495e:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <flag_in_volt>
    4962:	8a 83       	std	Y+2, r24	; 0x02
    4964:	8f e5       	ldi	r24, 0x5F	; 95
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	29 81       	ldd	r18, Y+1	; 0x01
    496a:	fc 01       	movw	r30, r24
    496c:	20 83       	st	Z, r18
    496e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4970:	0f 90       	pop	r0
    4972:	0f 90       	pop	r0
    4974:	df 91       	pop	r29
    4976:	cf 91       	pop	r28
    4978:	08 95       	ret

0000497a <find_phone_in_phone_list>:
static const char help_set[MAX_SMS_LENGTH+1] PROGMEM = {"set:accept_calls=;accept_sms=;report_t=;utkina=;chapeka=;pause_relay=;"};

static char* set_phones(char *phones, char *dest, char max_num);

char find_phone_in_phone_list(char *phone, char lst)
{
    497a:	cf 93       	push	r28
    497c:	df 93       	push	r29
    497e:	00 d0       	rcall	.+0      	; 0x4980 <find_phone_in_phone_list+0x6>
    4980:	00 d0       	rcall	.+0      	; 0x4982 <find_phone_in_phone_list+0x8>
    4982:	cd b7       	in	r28, 0x3d	; 61
    4984:	de b7       	in	r29, 0x3e	; 62
    4986:	9b 83       	std	Y+3, r25	; 0x03
    4988:	8a 83       	std	Y+2, r24	; 0x02
    498a:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t i;

    if(lst==ADMIN_LIST)
    498c:	8c 81       	ldd	r24, Y+4	; 0x04
    498e:	81 30       	cpi	r24, 0x01	; 1
    4990:	e9 f5       	brne	.+122    	; 0x4a0c <find_phone_in_phone_list+0x92>
    {
        for(i=0; i<TOTAL_ADMIN_NUMBER; i++)
    4992:	19 82       	std	Y+1, r1	; 0x01
    4994:	38 c0       	rjmp	.+112    	; 0x4a06 <find_phone_in_phone_list+0x8c>
        {
            if(config.admin_phone[i][0] == '+')
    4996:	89 81       	ldd	r24, Y+1	; 0x01
    4998:	28 2f       	mov	r18, r24
    499a:	30 e0       	ldi	r19, 0x00	; 0
    499c:	c9 01       	movw	r24, r18
    499e:	88 0f       	add	r24, r24
    49a0:	99 1f       	adc	r25, r25
    49a2:	88 0f       	add	r24, r24
    49a4:	99 1f       	adc	r25, r25
    49a6:	88 0f       	add	r24, r24
    49a8:	99 1f       	adc	r25, r25
    49aa:	82 1b       	sub	r24, r18
    49ac:	93 0b       	sbc	r25, r19
    49ae:	88 0f       	add	r24, r24
    49b0:	99 1f       	adc	r25, r25
    49b2:	84 53       	subi	r24, 0x34	; 52
    49b4:	9e 4f       	sbci	r25, 0xFE	; 254
    49b6:	fc 01       	movw	r30, r24
    49b8:	80 81       	ld	r24, Z
    49ba:	8b 32       	cpi	r24, 0x2B	; 43
    49bc:	09 f5       	brne	.+66     	; 0x4a00 <find_phone_in_phone_list+0x86>
                if(memcmp(phone, &config.admin_phone[i][0], 13) == 0)
    49be:	89 81       	ldd	r24, Y+1	; 0x01
    49c0:	28 2f       	mov	r18, r24
    49c2:	30 e0       	ldi	r19, 0x00	; 0
    49c4:	c9 01       	movw	r24, r18
    49c6:	88 0f       	add	r24, r24
    49c8:	99 1f       	adc	r25, r25
    49ca:	88 0f       	add	r24, r24
    49cc:	99 1f       	adc	r25, r25
    49ce:	88 0f       	add	r24, r24
    49d0:	99 1f       	adc	r25, r25
    49d2:	82 1b       	sub	r24, r18
    49d4:	93 0b       	sbc	r25, r19
    49d6:	88 0f       	add	r24, r24
    49d8:	99 1f       	adc	r25, r25
    49da:	05 96       	adiw	r24, 0x05	; 5
    49dc:	9c 01       	movw	r18, r24
    49de:	29 53       	subi	r18, 0x39	; 57
    49e0:	3e 4f       	sbci	r19, 0xFE	; 254
    49e2:	8a 81       	ldd	r24, Y+2	; 0x02
    49e4:	9b 81       	ldd	r25, Y+3	; 0x03
    49e6:	4d e0       	ldi	r20, 0x0D	; 13
    49e8:	50 e0       	ldi	r21, 0x00	; 0
    49ea:	b9 01       	movw	r22, r18
    49ec:	0e 94 a6 34 	call	0x694c	; 0x694c <memcmp>
    49f0:	89 2b       	or	r24, r25
    49f2:	31 f4       	brne	.+12     	; 0x4a00 <find_phone_in_phone_list+0x86>
                {
                    softuart_puts_p(PSTR("phone ok"));
    49f4:	8c ef       	ldi	r24, 0xFC	; 252
    49f6:	97 e0       	ldi	r25, 0x07	; 7
    49f8:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
                    return 1; // телефон найден в списке админов
    49fc:	81 e0       	ldi	r24, 0x01	; 1
    49fe:	0b c0       	rjmp	.+22     	; 0x4a16 <find_phone_in_phone_list+0x9c>
        for(i=0; i<TOTAL_ADMIN_NUMBER; i++)
    4a00:	89 81       	ldd	r24, Y+1	; 0x01
    4a02:	8f 5f       	subi	r24, 0xFF	; 255
    4a04:	89 83       	std	Y+1, r24	; 0x01
    4a06:	89 81       	ldd	r24, Y+1	; 0x01
    4a08:	85 30       	cpi	r24, 0x05	; 5
    4a0a:	28 f2       	brcs	.-118    	; 0x4996 <find_phone_in_phone_list+0x1c>
                }
        }
    }
    softuart_puts_p(PSTR("not phone"));
    4a0c:	85 e0       	ldi	r24, 0x05	; 5
    4a0e:	98 e0       	ldi	r25, 0x08	; 8
    4a10:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
    return 0;
    4a14:	80 e0       	ldi	r24, 0x00	; 0
}
    4a16:	0f 90       	pop	r0
    4a18:	0f 90       	pop	r0
    4a1a:	0f 90       	pop	r0
    4a1c:	0f 90       	pop	r0
    4a1e:	df 91       	pop	r29
    4a20:	cf 91       	pop	r28
    4a22:	08 95       	ret

00004a24 <process_sms_body>:

//*******************************************************************************************************************


void process_sms_body(char *ptr)
{
    4a24:	0f 93       	push	r16
    4a26:	1f 93       	push	r17
    4a28:	cf 93       	push	r28
    4a2a:	df 93       	push	r29
    4a2c:	cd b7       	in	r28, 0x3d	; 61
    4a2e:	de b7       	in	r29, 0x3e	; 62
    4a30:	c4 54       	subi	r28, 0x44	; 68
    4a32:	d1 40       	sbci	r29, 0x01	; 1
    4a34:	0f b6       	in	r0, 0x3f	; 63
    4a36:	f8 94       	cli
    4a38:	de bf       	out	0x3e, r29	; 62
    4a3a:	0f be       	out	0x3f, r0	; 63
    4a3c:	cd bf       	out	0x3d, r28	; 61
    4a3e:	9e 01       	movw	r18, r28
    4a40:	2d 5b       	subi	r18, 0xBD	; 189
    4a42:	3e 4f       	sbci	r19, 0xFE	; 254
    4a44:	f9 01       	movw	r30, r18
    4a46:	91 83       	std	Z+1, r25	; 0x01
    4a48:	80 83       	st	Z, r24
    uint8_t i, err;

    //beep_ms(10);
    ptr = strlwr(ptr);
    4a4a:	8e 01       	movw	r16, r28
    4a4c:	0d 5b       	subi	r16, 0xBD	; 189
    4a4e:	1e 4f       	sbci	r17, 0xFE	; 254
    4a50:	ce 01       	movw	r24, r28
    4a52:	8d 5b       	subi	r24, 0xBD	; 189
    4a54:	9e 4f       	sbci	r25, 0xFE	; 254
    4a56:	fc 01       	movw	r30, r24
    4a58:	80 81       	ld	r24, Z
    4a5a:	91 81       	ldd	r25, Z+1	; 0x01
    4a5c:	0e 94 e9 34 	call	0x69d2	; 0x69d2 <strlwr>
    4a60:	f8 01       	movw	r30, r16
    4a62:	91 83       	std	Z+1, r25	; 0x01
    4a64:	80 83       	st	Z, r24
    if(memcmp_P(ptr, PSTR("set:"), 4) == 0)
    4a66:	2f e0       	ldi	r18, 0x0F	; 15
    4a68:	38 e0       	ldi	r19, 0x08	; 8
    4a6a:	ce 01       	movw	r24, r28
    4a6c:	8d 5b       	subi	r24, 0xBD	; 189
    4a6e:	9e 4f       	sbci	r25, 0xFE	; 254
    4a70:	fc 01       	movw	r30, r24
    4a72:	80 81       	ld	r24, Z
    4a74:	91 81       	ldd	r25, Z+1	; 0x01
    4a76:	44 e0       	ldi	r20, 0x04	; 4
    4a78:	50 e0       	ldi	r21, 0x00	; 0
    4a7a:	b9 01       	movw	r22, r18
    4a7c:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    4a80:	89 2b       	or	r24, r25
    4a82:	09 f0       	breq	.+2      	; 0x4a86 <process_sms_body+0x62>
    4a84:	6c c0       	rjmp	.+216    	; 0x4b5e <process_sms_body+0x13a>
    {
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4a86:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4a8a:	61 e0       	ldi	r22, 0x01	; 1
    4a8c:	0e 94 bd 24 	call	0x497a	; 0x497a <find_phone_in_phone_list>
    4a90:	88 23       	and	r24, r24
    4a92:	49 f4       	brne	.+18     	; 0x4aa6 <process_sms_body+0x82>
        {
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4a94:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4a98:	9c 01       	movw	r18, r24
    4a9a:	84 e1       	ldi	r24, 0x14	; 20
    4a9c:	98 e0       	ldi	r25, 0x08	; 8
    4a9e:	b9 01       	movw	r22, r18
    4aa0:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
            return;
    4aa4:	45 c2       	rjmp	.+1162   	; 0x4f30 <process_sms_body+0x50c>
        }
        ptr += 4;
    4aa6:	ce 01       	movw	r24, r28
    4aa8:	8d 5b       	subi	r24, 0xBD	; 189
    4aaa:	9e 4f       	sbci	r25, 0xFE	; 254
    4aac:	9e 01       	movw	r18, r28
    4aae:	2d 5b       	subi	r18, 0xBD	; 189
    4ab0:	3e 4f       	sbci	r19, 0xFE	; 254
    4ab2:	f9 01       	movw	r30, r18
    4ab4:	20 81       	ld	r18, Z
    4ab6:	31 81       	ldd	r19, Z+1	; 0x01
    4ab8:	2c 5f       	subi	r18, 0xFC	; 252
    4aba:	3f 4f       	sbci	r19, 0xFF	; 255
    4abc:	fc 01       	movw	r30, r24
    4abe:	31 83       	std	Z+1, r19	; 0x01
    4ac0:	20 83       	st	Z, r18
        i=0;
    4ac2:	19 82       	std	Y+1, r1	; 0x01
        err = 0;
    4ac4:	1a 82       	std	Y+2, r1	; 0x02
        while(ptr && *ptr)
    4ac6:	1c c0       	rjmp	.+56     	; 0x4b00 <process_sms_body+0xdc>
        {
            ptr = set_param(ptr);
    4ac8:	8e 01       	movw	r16, r28
    4aca:	0d 5b       	subi	r16, 0xBD	; 189
    4acc:	1e 4f       	sbci	r17, 0xFE	; 254
    4ace:	ce 01       	movw	r24, r28
    4ad0:	8d 5b       	subi	r24, 0xBD	; 189
    4ad2:	9e 4f       	sbci	r25, 0xFE	; 254
    4ad4:	fc 01       	movw	r30, r24
    4ad6:	80 81       	ld	r24, Z
    4ad8:	91 81       	ldd	r25, Z+1	; 0x01
    4ada:	0e 94 cc 28 	call	0x5198	; 0x5198 <set_param>
    4ade:	f8 01       	movw	r30, r16
    4ae0:	91 83       	std	Z+1, r25	; 0x01
    4ae2:	80 83       	st	Z, r24
            //softuart_puts_ln(ptr);
            if(ptr)
    4ae4:	ce 01       	movw	r24, r28
    4ae6:	8d 5b       	subi	r24, 0xBD	; 189
    4ae8:	9e 4f       	sbci	r25, 0xFE	; 254
    4aea:	fc 01       	movw	r30, r24
    4aec:	80 81       	ld	r24, Z
    4aee:	91 81       	ldd	r25, Z+1	; 0x01
    4af0:	89 2b       	or	r24, r25
    4af2:	21 f0       	breq	.+8      	; 0x4afc <process_sms_body+0xd8>
                i++;
    4af4:	89 81       	ldd	r24, Y+1	; 0x01
    4af6:	8f 5f       	subi	r24, 0xFF	; 255
    4af8:	89 83       	std	Y+1, r24	; 0x01
    4afa:	02 c0       	rjmp	.+4      	; 0x4b00 <process_sms_body+0xdc>
            else
                err = 1;
    4afc:	81 e0       	ldi	r24, 0x01	; 1
    4afe:	8a 83       	std	Y+2, r24	; 0x02
        while(ptr && *ptr)
    4b00:	ce 01       	movw	r24, r28
    4b02:	8d 5b       	subi	r24, 0xBD	; 189
    4b04:	9e 4f       	sbci	r25, 0xFE	; 254
    4b06:	fc 01       	movw	r30, r24
    4b08:	80 81       	ld	r24, Z
    4b0a:	91 81       	ldd	r25, Z+1	; 0x01
    4b0c:	89 2b       	or	r24, r25
    4b0e:	51 f0       	breq	.+20     	; 0x4b24 <process_sms_body+0x100>
    4b10:	ce 01       	movw	r24, r28
    4b12:	8d 5b       	subi	r24, 0xBD	; 189
    4b14:	9e 4f       	sbci	r25, 0xFE	; 254
    4b16:	fc 01       	movw	r30, r24
    4b18:	80 81       	ld	r24, Z
    4b1a:	91 81       	ldd	r25, Z+1	; 0x01
    4b1c:	fc 01       	movw	r30, r24
    4b1e:	80 81       	ld	r24, Z
    4b20:	88 23       	and	r24, r24
    4b22:	91 f6       	brne	.-92     	; 0x4ac8 <process_sms_body+0xa4>
        }
        if(i && !err)
    4b24:	89 81       	ldd	r24, Y+1	; 0x01
    4b26:	88 23       	and	r24, r24
    4b28:	71 f0       	breq	.+28     	; 0x4b46 <process_sms_body+0x122>
    4b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b2c:	88 23       	and	r24, r24
    4b2e:	59 f4       	brne	.+22     	; 0x4b46 <process_sms_body+0x122>
        {
            EEPROM_update();
    4b30:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
            send_sms_p(PSTR("ok"), get_phone_number());
    4b34:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4b38:	9c 01       	movw	r18, r24
    4b3a:	82 e2       	ldi	r24, 0x22	; 34
    4b3c:	98 e0       	ldi	r25, 0x08	; 8
    4b3e:	b9 01       	movw	r22, r18
    4b40:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
    4b44:	f5 c1       	rjmp	.+1002   	; 0x4f30 <process_sms_body+0x50c>
        }
        else
        {
            eeprom_read_config(0); // возвращаем всё в зад
    4b46:	80 e0       	ldi	r24, 0x00	; 0
    4b48:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <eeprom_read_config>
            send_sms_p(PSTR("error"), get_phone_number());
    4b4c:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4b50:	9c 01       	movw	r18, r24
    4b52:	85 e2       	ldi	r24, 0x25	; 37
    4b54:	98 e0       	ldi	r25, 0x08	; 8
    4b56:	b9 01       	movw	r22, r18
    4b58:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
    4b5c:	e9 c1       	rjmp	.+978    	; 0x4f30 <process_sms_body+0x50c>
        }
    }


    else if(memcmp_P(ptr, PSTR("get:"), 4) == 0)
    4b5e:	2b e2       	ldi	r18, 0x2B	; 43
    4b60:	38 e0       	ldi	r19, 0x08	; 8
    4b62:	ce 01       	movw	r24, r28
    4b64:	8d 5b       	subi	r24, 0xBD	; 189
    4b66:	9e 4f       	sbci	r25, 0xFE	; 254
    4b68:	fc 01       	movw	r30, r24
    4b6a:	80 81       	ld	r24, Z
    4b6c:	91 81       	ldd	r25, Z+1	; 0x01
    4b6e:	44 e0       	ldi	r20, 0x04	; 4
    4b70:	50 e0       	ldi	r21, 0x00	; 0
    4b72:	b9 01       	movw	r22, r18
    4b74:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    4b78:	89 2b       	or	r24, r25
    4b7a:	09 f0       	breq	.+2      	; 0x4b7e <process_sms_body+0x15a>
    4b7c:	92 c0       	rjmp	.+292    	; 0x4ca2 <process_sms_body+0x27e>
    {
        char sms_text[SIZE_OF_SMS_TEXT_BUF];
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4b7e:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4b82:	61 e0       	ldi	r22, 0x01	; 1
    4b84:	0e 94 bd 24 	call	0x497a	; 0x497a <find_phone_in_phone_list>
    4b88:	88 23       	and	r24, r24
    4b8a:	49 f4       	brne	.+18     	; 0x4b9e <process_sms_body+0x17a>
        {
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4b8c:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4b90:	9c 01       	movw	r18, r24
    4b92:	80 e3       	ldi	r24, 0x30	; 48
    4b94:	98 e0       	ldi	r25, 0x08	; 8
    4b96:	b9 01       	movw	r22, r18
    4b98:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
    4b9c:	c9 c1       	rjmp	.+914    	; 0x4f30 <process_sms_body+0x50c>
            return;
        }
        ptr += 4;
    4b9e:	ce 01       	movw	r24, r28
    4ba0:	8d 5b       	subi	r24, 0xBD	; 189
    4ba2:	9e 4f       	sbci	r25, 0xFE	; 254
    4ba4:	9e 01       	movw	r18, r28
    4ba6:	2d 5b       	subi	r18, 0xBD	; 189
    4ba8:	3e 4f       	sbci	r19, 0xFE	; 254
    4baa:	f9 01       	movw	r30, r18
    4bac:	20 81       	ld	r18, Z
    4bae:	31 81       	ldd	r19, Z+1	; 0x01
    4bb0:	2c 5f       	subi	r18, 0xFC	; 252
    4bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    4bb4:	fc 01       	movw	r30, r24
    4bb6:	31 83       	std	Z+1, r19	; 0x01
    4bb8:	20 83       	st	Z, r18
        sms_text[0] = 0; // терминируем строку
    4bba:	1b 82       	std	Y+3, r1	; 0x03
        i=0;
    4bbc:	19 82       	std	Y+1, r1	; 0x01
        err = 0;
    4bbe:	1a 82       	std	Y+2, r1	; 0x02

        while(ptr && *ptr)
    4bc0:	31 c0       	rjmp	.+98     	; 0x4c24 <process_sms_body+0x200>
        {

            ptr = get_param(ptr, &sms_text[strlen(sms_text)]);
    4bc2:	ce 01       	movw	r24, r28
    4bc4:	03 96       	adiw	r24, 0x03	; 3
    4bc6:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <strlen>
    4bca:	9c 01       	movw	r18, r24
    4bcc:	ce 01       	movw	r24, r28
    4bce:	03 96       	adiw	r24, 0x03	; 3
    4bd0:	28 0f       	add	r18, r24
    4bd2:	39 1f       	adc	r19, r25
    4bd4:	8e 01       	movw	r16, r28
    4bd6:	0d 5b       	subi	r16, 0xBD	; 189
    4bd8:	1e 4f       	sbci	r17, 0xFE	; 254
    4bda:	ce 01       	movw	r24, r28
    4bdc:	8d 5b       	subi	r24, 0xBD	; 189
    4bde:	9e 4f       	sbci	r25, 0xFE	; 254
    4be0:	fc 01       	movw	r30, r24
    4be2:	80 81       	ld	r24, Z
    4be4:	91 81       	ldd	r25, Z+1	; 0x01
    4be6:	b9 01       	movw	r22, r18
    4be8:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <get_param>
    4bec:	f8 01       	movw	r30, r16
    4bee:	91 83       	std	Z+1, r25	; 0x01
    4bf0:	80 83       	st	Z, r24
            // softuart_puts_ln(ptr);
            if(ptr)
    4bf2:	ce 01       	movw	r24, r28
    4bf4:	8d 5b       	subi	r24, 0xBD	; 189
    4bf6:	9e 4f       	sbci	r25, 0xFE	; 254
    4bf8:	fc 01       	movw	r30, r24
    4bfa:	80 81       	ld	r24, Z
    4bfc:	91 81       	ldd	r25, Z+1	; 0x01
    4bfe:	89 2b       	or	r24, r25
    4c00:	21 f0       	breq	.+8      	; 0x4c0a <process_sms_body+0x1e6>
                i++;
    4c02:	89 81       	ldd	r24, Y+1	; 0x01
    4c04:	8f 5f       	subi	r24, 0xFF	; 255
    4c06:	89 83       	std	Y+1, r24	; 0x01
    4c08:	03 c0       	rjmp	.+6      	; 0x4c10 <process_sms_body+0x1ec>
            else
            {
                err = 1;
    4c0a:	81 e0       	ldi	r24, 0x01	; 1
    4c0c:	8a 83       	std	Y+2, r24	; 0x02
                break;
    4c0e:	1d c0       	rjmp	.+58     	; 0x4c4a <process_sms_body+0x226>
            }
            if(strlen(sms_text) > MAX_SMS_LENGTH)
    4c10:	ce 01       	movw	r24, r28
    4c12:	03 96       	adiw	r24, 0x03	; 3
    4c14:	0e 94 e0 34 	call	0x69c0	; 0x69c0 <strlen>
    4c18:	81 3a       	cpi	r24, 0xA1	; 161
    4c1a:	91 05       	cpc	r25, r1
    4c1c:	18 f0       	brcs	.+6      	; 0x4c24 <process_sms_body+0x200>
            {
                err = 2;
    4c1e:	82 e0       	ldi	r24, 0x02	; 2
    4c20:	8a 83       	std	Y+2, r24	; 0x02
                break;
    4c22:	13 c0       	rjmp	.+38     	; 0x4c4a <process_sms_body+0x226>
        while(ptr && *ptr)
    4c24:	ce 01       	movw	r24, r28
    4c26:	8d 5b       	subi	r24, 0xBD	; 189
    4c28:	9e 4f       	sbci	r25, 0xFE	; 254
    4c2a:	fc 01       	movw	r30, r24
    4c2c:	80 81       	ld	r24, Z
    4c2e:	91 81       	ldd	r25, Z+1	; 0x01
    4c30:	89 2b       	or	r24, r25
    4c32:	59 f0       	breq	.+22     	; 0x4c4a <process_sms_body+0x226>
    4c34:	ce 01       	movw	r24, r28
    4c36:	8d 5b       	subi	r24, 0xBD	; 189
    4c38:	9e 4f       	sbci	r25, 0xFE	; 254
    4c3a:	fc 01       	movw	r30, r24
    4c3c:	80 81       	ld	r24, Z
    4c3e:	91 81       	ldd	r25, Z+1	; 0x01
    4c40:	fc 01       	movw	r30, r24
    4c42:	80 81       	ld	r24, Z
    4c44:	88 23       	and	r24, r24
    4c46:	09 f0       	breq	.+2      	; 0x4c4a <process_sms_body+0x226>
    4c48:	bc cf       	rjmp	.-136    	; 0x4bc2 <process_sms_body+0x19e>
            }
        }
        if(i && !err)
    4c4a:	89 81       	ldd	r24, Y+1	; 0x01
    4c4c:	88 23       	and	r24, r24
    4c4e:	81 f0       	breq	.+32     	; 0x4c70 <process_sms_body+0x24c>
    4c50:	8a 81       	ldd	r24, Y+2	; 0x02
    4c52:	88 23       	and	r24, r24
    4c54:	69 f4       	brne	.+26     	; 0x4c70 <process_sms_body+0x24c>
        {
            send_sms(sms_text, get_phone_number());
    4c56:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4c5a:	9c 01       	movw	r18, r24
    4c5c:	ce 01       	movw	r24, r28
    4c5e:	03 96       	adiw	r24, 0x03	; 3
    4c60:	b9 01       	movw	r22, r18
    4c62:	0e 94 35 18 	call	0x306a	; 0x306a <send_sms>
            softuart_puts_p(PSTR("send_sms\r\n"));
    4c66:	8e e3       	ldi	r24, 0x3E	; 62
    4c68:	98 e0       	ldi	r25, 0x08	; 8
    4c6a:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
    4c6e:	60 c1       	rjmp	.+704    	; 0x4f30 <process_sms_body+0x50c>
        }

        else if(err==1)
    4c70:	8a 81       	ldd	r24, Y+2	; 0x02
    4c72:	81 30       	cpi	r24, 0x01	; 1
    4c74:	49 f4       	brne	.+18     	; 0x4c88 <process_sms_body+0x264>
        {
            send_sms_p(PSTR("error"), get_phone_number());
    4c76:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4c7a:	9c 01       	movw	r18, r24
    4c7c:	89 e4       	ldi	r24, 0x49	; 73
    4c7e:	98 e0       	ldi	r25, 0x08	; 8
    4c80:	b9 01       	movw	r22, r18
    4c82:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
    4c86:	54 c1       	rjmp	.+680    	; 0x4f30 <process_sms_body+0x50c>
        }

        else if(err==2)
    4c88:	8a 81       	ldd	r24, Y+2	; 0x02
    4c8a:	82 30       	cpi	r24, 0x02	; 2
    4c8c:	09 f0       	breq	.+2      	; 0x4c90 <process_sms_body+0x26c>
    4c8e:	50 c1       	rjmp	.+672    	; 0x4f30 <process_sms_body+0x50c>
        {
            send_sms_p(PSTR("resulting SMS text is too long"), get_phone_number());
    4c90:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4c94:	9c 01       	movw	r18, r24
    4c96:	8f e4       	ldi	r24, 0x4F	; 79
    4c98:	98 e0       	ldi	r25, 0x08	; 8
    4c9a:	b9 01       	movw	r22, r18
    4c9c:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
    4ca0:	47 c1       	rjmp	.+654    	; 0x4f30 <process_sms_body+0x50c>
        }

    }

    else if(memcmp_P(ptr, PSTR("resetdefault;"), 13) == 0)
    4ca2:	2e e6       	ldi	r18, 0x6E	; 110
    4ca4:	38 e0       	ldi	r19, 0x08	; 8
    4ca6:	ce 01       	movw	r24, r28
    4ca8:	8d 5b       	subi	r24, 0xBD	; 189
    4caa:	9e 4f       	sbci	r25, 0xFE	; 254
    4cac:	fc 01       	movw	r30, r24
    4cae:	80 81       	ld	r24, Z
    4cb0:	91 81       	ldd	r25, Z+1	; 0x01
    4cb2:	4d e0       	ldi	r20, 0x0D	; 13
    4cb4:	50 e0       	ldi	r21, 0x00	; 0
    4cb6:	b9 01       	movw	r22, r18
    4cb8:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    4cbc:	89 2b       	or	r24, r25
    4cbe:	01 f5       	brne	.+64     	; 0x4d00 <process_sms_body+0x2dc>
    {
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4cc0:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4cc4:	61 e0       	ldi	r22, 0x01	; 1
    4cc6:	0e 94 bd 24 	call	0x497a	; 0x497a <find_phone_in_phone_list>
    4cca:	88 23       	and	r24, r24
    4ccc:	49 f4       	brne	.+18     	; 0x4ce0 <process_sms_body+0x2bc>
        {
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4cce:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4cd2:	9c 01       	movw	r18, r24
    4cd4:	8c e7       	ldi	r24, 0x7C	; 124
    4cd6:	98 e0       	ldi	r25, 0x08	; 8
    4cd8:	b9 01       	movw	r22, r18
    4cda:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
            return;
    4cde:	28 c1       	rjmp	.+592    	; 0x4f30 <process_sms_body+0x50c>
        }
        set_first_usage(0);
    4ce0:	80 e0       	ldi	r24, 0x00	; 0
    4ce2:	0e 94 b4 11 	call	0x2368	; 0x2368 <set_first_usage>
        EEPROM_update();
    4ce6:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
        send_sms_p(PSTR("Device reset default, send adminphones=NUMBER_PHONES"), get_phone_number());
    4cea:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4cee:	9c 01       	movw	r18, r24
    4cf0:	8a e8       	ldi	r24, 0x8A	; 138
    4cf2:	98 e0       	ldi	r25, 0x08	; 8
    4cf4:	b9 01       	movw	r22, r18
    4cf6:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
        reset_mcu();
    4cfa:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <reset_mcu>
    4cfe:	18 c1       	rjmp	.+560    	; 0x4f30 <process_sms_body+0x50c>
    }

    else if(memcmp_P(ptr, PSTR("reboot;"), 7) == 0)
    4d00:	2f eb       	ldi	r18, 0xBF	; 191
    4d02:	38 e0       	ldi	r19, 0x08	; 8
    4d04:	ce 01       	movw	r24, r28
    4d06:	8d 5b       	subi	r24, 0xBD	; 189
    4d08:	9e 4f       	sbci	r25, 0xFE	; 254
    4d0a:	fc 01       	movw	r30, r24
    4d0c:	80 81       	ld	r24, Z
    4d0e:	91 81       	ldd	r25, Z+1	; 0x01
    4d10:	47 e0       	ldi	r20, 0x07	; 7
    4d12:	50 e0       	ldi	r21, 0x00	; 0
    4d14:	b9 01       	movw	r22, r18
    4d16:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    4d1a:	89 2b       	or	r24, r25
    4d1c:	d9 f4       	brne	.+54     	; 0x4d54 <process_sms_body+0x330>
    {
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4d1e:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4d22:	61 e0       	ldi	r22, 0x01	; 1
    4d24:	0e 94 bd 24 	call	0x497a	; 0x497a <find_phone_in_phone_list>
    4d28:	88 23       	and	r24, r24
    4d2a:	49 f4       	brne	.+18     	; 0x4d3e <process_sms_body+0x31a>
        {
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4d2c:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4d30:	9c 01       	movw	r18, r24
    4d32:	87 ec       	ldi	r24, 0xC7	; 199
    4d34:	98 e0       	ldi	r25, 0x08	; 8
    4d36:	b9 01       	movw	r22, r18
    4d38:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
            return;
    4d3c:	f9 c0       	rjmp	.+498    	; 0x4f30 <process_sms_body+0x50c>
        }
        send_sms_p(PSTR("Reset command accepted."), get_phone_number());
    4d3e:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4d42:	9c 01       	movw	r18, r24
    4d44:	85 ed       	ldi	r24, 0xD5	; 213
    4d46:	98 e0       	ldi	r25, 0x08	; 8
    4d48:	b9 01       	movw	r22, r18
    4d4a:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
        reset_mcu();
    4d4e:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <reset_mcu>
    4d52:	ee c0       	rjmp	.+476    	; 0x4f30 <process_sms_body+0x50c>
    }
    else if(memcmp_P(ptr, PSTR("help;"), 5) == 0)
    4d54:	2d ee       	ldi	r18, 0xED	; 237
    4d56:	38 e0       	ldi	r19, 0x08	; 8
    4d58:	ce 01       	movw	r24, r28
    4d5a:	8d 5b       	subi	r24, 0xBD	; 189
    4d5c:	9e 4f       	sbci	r25, 0xFE	; 254
    4d5e:	fc 01       	movw	r30, r24
    4d60:	80 81       	ld	r24, Z
    4d62:	91 81       	ldd	r25, Z+1	; 0x01
    4d64:	45 e0       	ldi	r20, 0x05	; 5
    4d66:	50 e0       	ldi	r21, 0x00	; 0
    4d68:	b9 01       	movw	r22, r18
    4d6a:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    4d6e:	89 2b       	or	r24, r25
    4d70:	c1 f4       	brne	.+48     	; 0x4da2 <process_sms_body+0x37e>
    {
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4d72:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4d76:	61 e0       	ldi	r22, 0x01	; 1
    4d78:	0e 94 bd 24 	call	0x497a	; 0x497a <find_phone_in_phone_list>
    4d7c:	88 23       	and	r24, r24
    4d7e:	49 f4       	brne	.+18     	; 0x4d92 <process_sms_body+0x36e>
        {
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4d80:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4d84:	9c 01       	movw	r18, r24
    4d86:	83 ef       	ldi	r24, 0xF3	; 243
    4d88:	98 e0       	ldi	r25, 0x08	; 8
    4d8a:	b9 01       	movw	r22, r18
    4d8c:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
            return;
    4d90:	cf c0       	rjmp	.+414    	; 0x4f30 <process_sms_body+0x50c>
        }
        send_sms_p(help_text, get_phone_number());
    4d92:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4d96:	bc 01       	movw	r22, r24
    4d98:	89 e1       	ldi	r24, 0x19	; 25
    4d9a:	96 e0       	ldi	r25, 0x06	; 6
    4d9c:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
    4da0:	c7 c0       	rjmp	.+398    	; 0x4f30 <process_sms_body+0x50c>
    }
    else if(memcmp_P(ptr, PSTR("helpget;"), 8) == 0)
    4da2:	21 e0       	ldi	r18, 0x01	; 1
    4da4:	39 e0       	ldi	r19, 0x09	; 9
    4da6:	ce 01       	movw	r24, r28
    4da8:	8d 5b       	subi	r24, 0xBD	; 189
    4daa:	9e 4f       	sbci	r25, 0xFE	; 254
    4dac:	fc 01       	movw	r30, r24
    4dae:	80 81       	ld	r24, Z
    4db0:	91 81       	ldd	r25, Z+1	; 0x01
    4db2:	48 e0       	ldi	r20, 0x08	; 8
    4db4:	50 e0       	ldi	r21, 0x00	; 0
    4db6:	b9 01       	movw	r22, r18
    4db8:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    4dbc:	89 2b       	or	r24, r25
    4dbe:	c1 f4       	brne	.+48     	; 0x4df0 <process_sms_body+0x3cc>
    {
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4dc0:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4dc4:	61 e0       	ldi	r22, 0x01	; 1
    4dc6:	0e 94 bd 24 	call	0x497a	; 0x497a <find_phone_in_phone_list>
    4dca:	88 23       	and	r24, r24
    4dcc:	49 f4       	brne	.+18     	; 0x4de0 <process_sms_body+0x3bc>
        {
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4dce:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4dd2:	9c 01       	movw	r18, r24
    4dd4:	8a e0       	ldi	r24, 0x0A	; 10
    4dd6:	99 e0       	ldi	r25, 0x09	; 9
    4dd8:	b9 01       	movw	r22, r18
    4dda:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
            return;
    4dde:	a8 c0       	rjmp	.+336    	; 0x4f30 <process_sms_body+0x50c>
        }
        send_sms_p(help_get, get_phone_number());
    4de0:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4de4:	bc 01       	movw	r22, r24
    4de6:	8a eb       	ldi	r24, 0xBA	; 186
    4de8:	96 e0       	ldi	r25, 0x06	; 6
    4dea:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
    4dee:	a0 c0       	rjmp	.+320    	; 0x4f30 <process_sms_body+0x50c>
    }
    else if(memcmp_P(ptr, PSTR("helpset;"), 8) == 0)
    4df0:	28 e1       	ldi	r18, 0x18	; 24
    4df2:	39 e0       	ldi	r19, 0x09	; 9
    4df4:	ce 01       	movw	r24, r28
    4df6:	8d 5b       	subi	r24, 0xBD	; 189
    4df8:	9e 4f       	sbci	r25, 0xFE	; 254
    4dfa:	fc 01       	movw	r30, r24
    4dfc:	80 81       	ld	r24, Z
    4dfe:	91 81       	ldd	r25, Z+1	; 0x01
    4e00:	48 e0       	ldi	r20, 0x08	; 8
    4e02:	50 e0       	ldi	r21, 0x00	; 0
    4e04:	b9 01       	movw	r22, r18
    4e06:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    4e0a:	89 2b       	or	r24, r25
    4e0c:	c1 f4       	brne	.+48     	; 0x4e3e <process_sms_body+0x41a>
    {
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4e0e:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4e12:	61 e0       	ldi	r22, 0x01	; 1
    4e14:	0e 94 bd 24 	call	0x497a	; 0x497a <find_phone_in_phone_list>
    4e18:	88 23       	and	r24, r24
    4e1a:	49 f4       	brne	.+18     	; 0x4e2e <process_sms_body+0x40a>
        {
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4e1c:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4e20:	9c 01       	movw	r18, r24
    4e22:	81 e2       	ldi	r24, 0x21	; 33
    4e24:	99 e0       	ldi	r25, 0x09	; 9
    4e26:	b9 01       	movw	r22, r18
    4e28:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
            return;
    4e2c:	81 c0       	rjmp	.+258    	; 0x4f30 <process_sms_body+0x50c>
        }
        send_sms_p(help_set, get_phone_number());
    4e2e:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4e32:	bc 01       	movw	r22, r24
    4e34:	8b e5       	ldi	r24, 0x5B	; 91
    4e36:	97 e0       	ldi	r25, 0x07	; 7
    4e38:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
    4e3c:	79 c0       	rjmp	.+242    	; 0x4f30 <process_sms_body+0x50c>
    }
    else if(memcmp_P(ptr, PSTR("report;"), 7) == 0)
    4e3e:	2f e2       	ldi	r18, 0x2F	; 47
    4e40:	39 e0       	ldi	r19, 0x09	; 9
    4e42:	ce 01       	movw	r24, r28
    4e44:	8d 5b       	subi	r24, 0xBD	; 189
    4e46:	9e 4f       	sbci	r25, 0xFE	; 254
    4e48:	fc 01       	movw	r30, r24
    4e4a:	80 81       	ld	r24, Z
    4e4c:	91 81       	ldd	r25, Z+1	; 0x01
    4e4e:	47 e0       	ldi	r20, 0x07	; 7
    4e50:	50 e0       	ldi	r21, 0x00	; 0
    4e52:	b9 01       	movw	r22, r18
    4e54:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    4e58:	89 2b       	or	r24, r25
    4e5a:	a9 f4       	brne	.+42     	; 0x4e86 <process_sms_body+0x462>
    {
        if((find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 0))
    4e5c:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4e60:	61 e0       	ldi	r22, 0x01	; 1
    4e62:	0e 94 bd 24 	call	0x497a	; 0x497a <find_phone_in_phone_list>
    4e66:	88 23       	and	r24, r24
    4e68:	49 f4       	brne	.+18     	; 0x4e7c <process_sms_body+0x458>
        {
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4e6a:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4e6e:	9c 01       	movw	r18, r24
    4e70:	87 e3       	ldi	r24, 0x37	; 55
    4e72:	99 e0       	ldi	r25, 0x09	; 9
    4e74:	b9 01       	movw	r22, r18
    4e76:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
            return;
    4e7a:	5a c0       	rjmp	.+180    	; 0x4f30 <process_sms_body+0x50c>
        }
        send_sms_report(get_phone_number());
    4e7c:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4e80:	0e 94 b1 08 	call	0x1162	; 0x1162 <send_sms_report>
    4e84:	55 c0       	rjmp	.+170    	; 0x4f30 <process_sms_body+0x50c>
    }
    else if(memcmp_P(ptr, PSTR("adminphones="), 12) == 0)
    4e86:	25 e4       	ldi	r18, 0x45	; 69
    4e88:	39 e0       	ldi	r19, 0x09	; 9
    4e8a:	ce 01       	movw	r24, r28
    4e8c:	8d 5b       	subi	r24, 0xBD	; 189
    4e8e:	9e 4f       	sbci	r25, 0xFE	; 254
    4e90:	fc 01       	movw	r30, r24
    4e92:	80 81       	ld	r24, Z
    4e94:	91 81       	ldd	r25, Z+1	; 0x01
    4e96:	4c e0       	ldi	r20, 0x0C	; 12
    4e98:	50 e0       	ldi	r21, 0x00	; 0
    4e9a:	b9 01       	movw	r22, r18
    4e9c:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    4ea0:	89 2b       	or	r24, r25
    4ea2:	09 f0       	breq	.+2      	; 0x4ea6 <process_sms_body+0x482>
    4ea4:	45 c0       	rjmp	.+138    	; 0x4f30 <process_sms_body+0x50c>
    {
        if( config.admin_mode == 0 || (find_phone_in_phone_list(get_phone_number(), ADMIN_LIST) == 1))
    4ea6:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <config+0x4>
    4eaa:	88 23       	and	r24, r24
    4eac:	39 f0       	breq	.+14     	; 0x4ebc <process_sms_body+0x498>
    4eae:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4eb2:	61 e0       	ldi	r22, 0x01	; 1
    4eb4:	0e 94 bd 24 	call	0x497a	; 0x497a <find_phone_in_phone_list>
    4eb8:	81 30       	cpi	r24, 0x01	; 1
    4eba:	89 f5       	brne	.+98     	; 0x4f1e <process_sms_body+0x4fa>
        {
            ptr+=12;
    4ebc:	ce 01       	movw	r24, r28
    4ebe:	8d 5b       	subi	r24, 0xBD	; 189
    4ec0:	9e 4f       	sbci	r25, 0xFE	; 254
    4ec2:	9e 01       	movw	r18, r28
    4ec4:	2d 5b       	subi	r18, 0xBD	; 189
    4ec6:	3e 4f       	sbci	r19, 0xFE	; 254
    4ec8:	f9 01       	movw	r30, r18
    4eca:	20 81       	ld	r18, Z
    4ecc:	31 81       	ldd	r19, Z+1	; 0x01
    4ece:	24 5f       	subi	r18, 0xF4	; 244
    4ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    4ed2:	fc 01       	movw	r30, r24
    4ed4:	31 83       	std	Z+1, r19	; 0x01
    4ed6:	20 83       	st	Z, r18
            ptr = set_phones(ptr, &config.admin_phone[0][0], TOTAL_ADMIN_NUMBER);
    4ed8:	8e 01       	movw	r16, r28
    4eda:	0d 5b       	subi	r16, 0xBD	; 189
    4edc:	1e 4f       	sbci	r17, 0xFE	; 254
    4ede:	ce 01       	movw	r24, r28
    4ee0:	8d 5b       	subi	r24, 0xBD	; 189
    4ee2:	9e 4f       	sbci	r25, 0xFE	; 254
    4ee4:	fc 01       	movw	r30, r24
    4ee6:	80 81       	ld	r24, Z
    4ee8:	91 81       	ldd	r25, Z+1	; 0x01
    4eea:	45 e0       	ldi	r20, 0x05	; 5
    4eec:	6c ec       	ldi	r22, 0xCC	; 204
    4eee:	71 e0       	ldi	r23, 0x01	; 1
    4ef0:	0e 94 50 2a 	call	0x54a0	; 0x54a0 <set_phones>
    4ef4:	f8 01       	movw	r30, r16
    4ef6:	91 83       	std	Z+1, r25	; 0x01
    4ef8:	80 83       	st	Z, r24
            config.admin_mode = 1;
    4efa:	81 e0       	ldi	r24, 0x01	; 1
    4efc:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <config+0x4>
            EEPROM_update();
    4f00:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
            send_sms_p(PSTR("ok"), get_phone_number());
    4f04:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4f08:	9c 01       	movw	r18, r24
    4f0a:	82 e5       	ldi	r24, 0x52	; 82
    4f0c:	99 e0       	ldi	r25, 0x09	; 9
    4f0e:	b9 01       	movw	r22, r18
    4f10:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
            softuart_puts_p(PSTR("set admin ok"));
    4f14:	85 e5       	ldi	r24, 0x55	; 85
    4f16:	99 e0       	ldi	r25, 0x09	; 9
    4f18:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <softuart_puts_p>
            return;
    4f1c:	09 c0       	rjmp	.+18     	; 0x4f30 <process_sms_body+0x50c>
        }
        else
        {
            send_sms_p(PSTR("Access denied"), get_phone_number());
    4f1e:	0e 94 66 21 	call	0x42cc	; 0x42cc <get_phone_number>
    4f22:	9c 01       	movw	r18, r24
    4f24:	82 e6       	ldi	r24, 0x62	; 98
    4f26:	99 e0       	ldi	r25, 0x09	; 9
    4f28:	b9 01       	movw	r22, r18
    4f2a:	0e 94 24 19 	call	0x3248	; 0x3248 <send_sms_p>
            return;
    4f2e:	00 00       	nop
        }

    }

}
    4f30:	cc 5b       	subi	r28, 0xBC	; 188
    4f32:	de 4f       	sbci	r29, 0xFE	; 254
    4f34:	0f b6       	in	r0, 0x3f	; 63
    4f36:	f8 94       	cli
    4f38:	de bf       	out	0x3e, r29	; 62
    4f3a:	0f be       	out	0x3f, r0	; 63
    4f3c:	cd bf       	out	0x3d, r28	; 61
    4f3e:	df 91       	pop	r29
    4f40:	cf 91       	pop	r28
    4f42:	1f 91       	pop	r17
    4f44:	0f 91       	pop	r16
    4f46:	08 95       	ret

00004f48 <get_param>:


//*******************************************************************************************************************

char* get_param(char *str, char *sms_text)
{
    4f48:	cf 93       	push	r28
    4f4a:	df 93       	push	r29
    4f4c:	00 d0       	rcall	.+0      	; 0x4f4e <get_param+0x6>
    4f4e:	00 d0       	rcall	.+0      	; 0x4f50 <get_param+0x8>
    4f50:	00 d0       	rcall	.+0      	; 0x4f52 <get_param+0xa>
    4f52:	cd b7       	in	r28, 0x3d	; 61
    4f54:	de b7       	in	r29, 0x3e	; 62
    4f56:	9c 83       	std	Y+4, r25	; 0x04
    4f58:	8b 83       	std	Y+3, r24	; 0x03
    4f5a:	7e 83       	std	Y+6, r23	; 0x06
    4f5c:	6d 83       	std	Y+5, r22	; 0x05
    if(memcmp_P(str, PSTR("adminphones;"), 12) == 0)
    4f5e:	20 e7       	ldi	r18, 0x70	; 112
    4f60:	39 e0       	ldi	r19, 0x09	; 9
    4f62:	8b 81       	ldd	r24, Y+3	; 0x03
    4f64:	9c 81       	ldd	r25, Y+4	; 0x04
    4f66:	4c e0       	ldi	r20, 0x0C	; 12
    4f68:	50 e0       	ldi	r21, 0x00	; 0
    4f6a:	b9 01       	movw	r22, r18
    4f6c:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    4f70:	89 2b       	or	r24, r25
    4f72:	09 f0       	breq	.+2      	; 0x4f76 <get_param+0x2e>
    4f74:	85 c0       	rjmp	.+266    	; 0x5080 <get_param+0x138>
    {
        uint8_t n, i;

        str += 12;
    4f76:	8b 81       	ldd	r24, Y+3	; 0x03
    4f78:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7a:	0c 96       	adiw	r24, 0x0c	; 12
    4f7c:	9c 83       	std	Y+4, r25	; 0x04
    4f7e:	8b 83       	std	Y+3, r24	; 0x03
        sms_text += sprintf_P(sms_text, PSTR("adminphones="));
    4f80:	8d e7       	ldi	r24, 0x7D	; 125
    4f82:	99 e0       	ldi	r25, 0x09	; 9
    4f84:	29 2f       	mov	r18, r25
    4f86:	2f 93       	push	r18
    4f88:	8f 93       	push	r24
    4f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    4f8c:	8f 93       	push	r24
    4f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f90:	8f 93       	push	r24
    4f92:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    4f96:	0f 90       	pop	r0
    4f98:	0f 90       	pop	r0
    4f9a:	0f 90       	pop	r0
    4f9c:	0f 90       	pop	r0
    4f9e:	9c 01       	movw	r18, r24
    4fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa2:	9e 81       	ldd	r25, Y+6	; 0x06
    4fa4:	82 0f       	add	r24, r18
    4fa6:	93 1f       	adc	r25, r19
    4fa8:	9e 83       	std	Y+6, r25	; 0x06
    4faa:	8d 83       	std	Y+5, r24	; 0x05
        n=0;
    4fac:	19 82       	std	Y+1, r1	; 0x01
        for(i=0; i<TOTAL_ADMIN_NUMBER; i++)
    4fae:	1a 82       	std	Y+2, r1	; 0x02
    4fb0:	47 c0       	rjmp	.+142    	; 0x5040 <get_param+0xf8>
        {
            if(config.admin_phone[i][0] != '+')
    4fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb4:	28 2f       	mov	r18, r24
    4fb6:	30 e0       	ldi	r19, 0x00	; 0
    4fb8:	c9 01       	movw	r24, r18
    4fba:	88 0f       	add	r24, r24
    4fbc:	99 1f       	adc	r25, r25
    4fbe:	88 0f       	add	r24, r24
    4fc0:	99 1f       	adc	r25, r25
    4fc2:	88 0f       	add	r24, r24
    4fc4:	99 1f       	adc	r25, r25
    4fc6:	82 1b       	sub	r24, r18
    4fc8:	93 0b       	sbc	r25, r19
    4fca:	88 0f       	add	r24, r24
    4fcc:	99 1f       	adc	r25, r25
    4fce:	84 53       	subi	r24, 0x34	; 52
    4fd0:	9e 4f       	sbci	r25, 0xFE	; 254
    4fd2:	fc 01       	movw	r30, r24
    4fd4:	80 81       	ld	r24, Z
    4fd6:	8b 32       	cpi	r24, 0x2B	; 43
    4fd8:	c1 f5       	brne	.+112    	; 0x504a <get_param+0x102>
                break;
            sms_text += sprintf_P(sms_text, PSTR("%s,"), &config.admin_phone[i][0]);
    4fda:	8a 81       	ldd	r24, Y+2	; 0x02
    4fdc:	28 2f       	mov	r18, r24
    4fde:	30 e0       	ldi	r19, 0x00	; 0
    4fe0:	c9 01       	movw	r24, r18
    4fe2:	88 0f       	add	r24, r24
    4fe4:	99 1f       	adc	r25, r25
    4fe6:	88 0f       	add	r24, r24
    4fe8:	99 1f       	adc	r25, r25
    4fea:	88 0f       	add	r24, r24
    4fec:	99 1f       	adc	r25, r25
    4fee:	82 1b       	sub	r24, r18
    4ff0:	93 0b       	sbc	r25, r19
    4ff2:	88 0f       	add	r24, r24
    4ff4:	99 1f       	adc	r25, r25
    4ff6:	05 96       	adiw	r24, 0x05	; 5
    4ff8:	9c 01       	movw	r18, r24
    4ffa:	29 53       	subi	r18, 0x39	; 57
    4ffc:	3e 4f       	sbci	r19, 0xFE	; 254
    4ffe:	8a e8       	ldi	r24, 0x8A	; 138
    5000:	99 e0       	ldi	r25, 0x09	; 9
    5002:	43 2f       	mov	r20, r19
    5004:	4f 93       	push	r20
    5006:	2f 93       	push	r18
    5008:	29 2f       	mov	r18, r25
    500a:	2f 93       	push	r18
    500c:	8f 93       	push	r24
    500e:	8e 81       	ldd	r24, Y+6	; 0x06
    5010:	8f 93       	push	r24
    5012:	8d 81       	ldd	r24, Y+5	; 0x05
    5014:	8f 93       	push	r24
    5016:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    501a:	0f 90       	pop	r0
    501c:	0f 90       	pop	r0
    501e:	0f 90       	pop	r0
    5020:	0f 90       	pop	r0
    5022:	0f 90       	pop	r0
    5024:	0f 90       	pop	r0
    5026:	9c 01       	movw	r18, r24
    5028:	8d 81       	ldd	r24, Y+5	; 0x05
    502a:	9e 81       	ldd	r25, Y+6	; 0x06
    502c:	82 0f       	add	r24, r18
    502e:	93 1f       	adc	r25, r19
    5030:	9e 83       	std	Y+6, r25	; 0x06
    5032:	8d 83       	std	Y+5, r24	; 0x05
            n++; // количество напечатанных телефонов
    5034:	89 81       	ldd	r24, Y+1	; 0x01
    5036:	8f 5f       	subi	r24, 0xFF	; 255
    5038:	89 83       	std	Y+1, r24	; 0x01
        for(i=0; i<TOTAL_ADMIN_NUMBER; i++)
    503a:	8a 81       	ldd	r24, Y+2	; 0x02
    503c:	8f 5f       	subi	r24, 0xFF	; 255
    503e:	8a 83       	std	Y+2, r24	; 0x02
    5040:	8a 81       	ldd	r24, Y+2	; 0x02
    5042:	85 30       	cpi	r24, 0x05	; 5
    5044:	08 f4       	brcc	.+2      	; 0x5048 <get_param+0x100>
    5046:	b5 cf       	rjmp	.-150    	; 0x4fb2 <get_param+0x6a>
    5048:	01 c0       	rjmp	.+2      	; 0x504c <get_param+0x104>
                break;
    504a:	00 00       	nop
        }
        if(n)
    504c:	89 81       	ldd	r24, Y+1	; 0x01
    504e:	88 23       	and	r24, r24
    5050:	29 f0       	breq	.+10     	; 0x505c <get_param+0x114>
            sms_text--;
    5052:	8d 81       	ldd	r24, Y+5	; 0x05
    5054:	9e 81       	ldd	r25, Y+6	; 0x06
    5056:	01 97       	sbiw	r24, 0x01	; 1
    5058:	9e 83       	std	Y+6, r25	; 0x06
    505a:	8d 83       	std	Y+5, r24	; 0x05
        sprintf_P(sms_text, PSTR(";"));
    505c:	8e e8       	ldi	r24, 0x8E	; 142
    505e:	99 e0       	ldi	r25, 0x09	; 9
    5060:	29 2f       	mov	r18, r25
    5062:	2f 93       	push	r18
    5064:	8f 93       	push	r24
    5066:	8e 81       	ldd	r24, Y+6	; 0x06
    5068:	8f 93       	push	r24
    506a:	8d 81       	ldd	r24, Y+5	; 0x05
    506c:	8f 93       	push	r24
    506e:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    5072:	0f 90       	pop	r0
    5074:	0f 90       	pop	r0
    5076:	0f 90       	pop	r0
    5078:	0f 90       	pop	r0
        return str;
    507a:	8b 81       	ldd	r24, Y+3	; 0x03
    507c:	9c 81       	ldd	r25, Y+4	; 0x04
    507e:	83 c0       	rjmp	.+262    	; 0x5186 <get_param+0x23e>
    }

    else if(memcmp_P(str, PSTR("accept_calls;"), 13) == 0)
    5080:	20 e9       	ldi	r18, 0x90	; 144
    5082:	39 e0       	ldi	r19, 0x09	; 9
    5084:	8b 81       	ldd	r24, Y+3	; 0x03
    5086:	9c 81       	ldd	r25, Y+4	; 0x04
    5088:	4d e0       	ldi	r20, 0x0D	; 13
    508a:	50 e0       	ldi	r21, 0x00	; 0
    508c:	b9 01       	movw	r22, r18
    508e:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    5092:	89 2b       	or	r24, r25
    5094:	01 f5       	brne	.+64     	; 0x50d6 <get_param+0x18e>
    {
        str += 13;
    5096:	8b 81       	ldd	r24, Y+3	; 0x03
    5098:	9c 81       	ldd	r25, Y+4	; 0x04
    509a:	0d 96       	adiw	r24, 0x0d	; 13
    509c:	9c 83       	std	Y+4, r25	; 0x04
    509e:	8b 83       	std	Y+3, r24	; 0x03
        sprintf_P(sms_text, PSTR("accept_calls=%d;"), config.accept_calls);
    50a0:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <config+0x4d>
    50a4:	28 2f       	mov	r18, r24
    50a6:	30 e0       	ldi	r19, 0x00	; 0
    50a8:	8e e9       	ldi	r24, 0x9E	; 158
    50aa:	99 e0       	ldi	r25, 0x09	; 9
    50ac:	43 2f       	mov	r20, r19
    50ae:	4f 93       	push	r20
    50b0:	2f 93       	push	r18
    50b2:	29 2f       	mov	r18, r25
    50b4:	2f 93       	push	r18
    50b6:	8f 93       	push	r24
    50b8:	8e 81       	ldd	r24, Y+6	; 0x06
    50ba:	8f 93       	push	r24
    50bc:	8d 81       	ldd	r24, Y+5	; 0x05
    50be:	8f 93       	push	r24
    50c0:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    50c4:	0f 90       	pop	r0
    50c6:	0f 90       	pop	r0
    50c8:	0f 90       	pop	r0
    50ca:	0f 90       	pop	r0
    50cc:	0f 90       	pop	r0
    50ce:	0f 90       	pop	r0
        return str;
    50d0:	8b 81       	ldd	r24, Y+3	; 0x03
    50d2:	9c 81       	ldd	r25, Y+4	; 0x04
    50d4:	58 c0       	rjmp	.+176    	; 0x5186 <get_param+0x23e>
    }

    else if(memcmp_P(str, PSTR("accept_sms;"), 11) == 0)
    50d6:	2f ea       	ldi	r18, 0xAF	; 175
    50d8:	39 e0       	ldi	r19, 0x09	; 9
    50da:	8b 81       	ldd	r24, Y+3	; 0x03
    50dc:	9c 81       	ldd	r25, Y+4	; 0x04
    50de:	4b e0       	ldi	r20, 0x0B	; 11
    50e0:	50 e0       	ldi	r21, 0x00	; 0
    50e2:	b9 01       	movw	r22, r18
    50e4:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    50e8:	89 2b       	or	r24, r25
    50ea:	01 f5       	brne	.+64     	; 0x512c <get_param+0x1e4>
    {
        str += 11;
    50ec:	8b 81       	ldd	r24, Y+3	; 0x03
    50ee:	9c 81       	ldd	r25, Y+4	; 0x04
    50f0:	0b 96       	adiw	r24, 0x0b	; 11
    50f2:	9c 83       	std	Y+4, r25	; 0x04
    50f4:	8b 83       	std	Y+3, r24	; 0x03
        sprintf_P(sms_text, PSTR("accept_sms=%d;"), config.accept_sms);
    50f6:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <config+0x4e>
    50fa:	28 2f       	mov	r18, r24
    50fc:	30 e0       	ldi	r19, 0x00	; 0
    50fe:	8b eb       	ldi	r24, 0xBB	; 187
    5100:	99 e0       	ldi	r25, 0x09	; 9
    5102:	43 2f       	mov	r20, r19
    5104:	4f 93       	push	r20
    5106:	2f 93       	push	r18
    5108:	29 2f       	mov	r18, r25
    510a:	2f 93       	push	r18
    510c:	8f 93       	push	r24
    510e:	8e 81       	ldd	r24, Y+6	; 0x06
    5110:	8f 93       	push	r24
    5112:	8d 81       	ldd	r24, Y+5	; 0x05
    5114:	8f 93       	push	r24
    5116:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    511a:	0f 90       	pop	r0
    511c:	0f 90       	pop	r0
    511e:	0f 90       	pop	r0
    5120:	0f 90       	pop	r0
    5122:	0f 90       	pop	r0
    5124:	0f 90       	pop	r0
        return str;
    5126:	8b 81       	ldd	r24, Y+3	; 0x03
    5128:	9c 81       	ldd	r25, Y+4	; 0x04
    512a:	2d c0       	rjmp	.+90     	; 0x5186 <get_param+0x23e>
    }

    else if(memcmp_P(str, PSTR("pause_relay;"), 12) == 0)
    512c:	2a ec       	ldi	r18, 0xCA	; 202
    512e:	39 e0       	ldi	r19, 0x09	; 9
    5130:	8b 81       	ldd	r24, Y+3	; 0x03
    5132:	9c 81       	ldd	r25, Y+4	; 0x04
    5134:	4c e0       	ldi	r20, 0x0C	; 12
    5136:	50 e0       	ldi	r21, 0x00	; 0
    5138:	b9 01       	movw	r22, r18
    513a:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    513e:	89 2b       	or	r24, r25
    5140:	01 f5       	brne	.+64     	; 0x5182 <get_param+0x23a>
    {
        str += 12;
    5142:	8b 81       	ldd	r24, Y+3	; 0x03
    5144:	9c 81       	ldd	r25, Y+4	; 0x04
    5146:	0c 96       	adiw	r24, 0x0c	; 12
    5148:	9c 83       	std	Y+4, r25	; 0x04
    514a:	8b 83       	std	Y+3, r24	; 0x03
        sprintf_P(sms_text, PSTR("pause_relay=%u;"), config.report_temperature);
    514c:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <config+0x52>
    5150:	28 2f       	mov	r18, r24
    5152:	30 e0       	ldi	r19, 0x00	; 0
    5154:	87 ed       	ldi	r24, 0xD7	; 215
    5156:	99 e0       	ldi	r25, 0x09	; 9
    5158:	43 2f       	mov	r20, r19
    515a:	4f 93       	push	r20
    515c:	2f 93       	push	r18
    515e:	29 2f       	mov	r18, r25
    5160:	2f 93       	push	r18
    5162:	8f 93       	push	r24
    5164:	8e 81       	ldd	r24, Y+6	; 0x06
    5166:	8f 93       	push	r24
    5168:	8d 81       	ldd	r24, Y+5	; 0x05
    516a:	8f 93       	push	r24
    516c:	0e 94 6c 35 	call	0x6ad8	; 0x6ad8 <sprintf_P>
    5170:	0f 90       	pop	r0
    5172:	0f 90       	pop	r0
    5174:	0f 90       	pop	r0
    5176:	0f 90       	pop	r0
    5178:	0f 90       	pop	r0
    517a:	0f 90       	pop	r0
        return str;
    517c:	8b 81       	ldd	r24, Y+3	; 0x03
    517e:	9c 81       	ldd	r25, Y+4	; 0x04
    5180:	02 c0       	rjmp	.+4      	; 0x5186 <get_param+0x23e>
    }
    return 0;
    5182:	80 e0       	ldi	r24, 0x00	; 0
    5184:	90 e0       	ldi	r25, 0x00	; 0
}
    5186:	26 96       	adiw	r28, 0x06	; 6
    5188:	0f b6       	in	r0, 0x3f	; 63
    518a:	f8 94       	cli
    518c:	de bf       	out	0x3e, r29	; 62
    518e:	0f be       	out	0x3f, r0	; 63
    5190:	cd bf       	out	0x3d, r28	; 61
    5192:	df 91       	pop	r29
    5194:	cf 91       	pop	r28
    5196:	08 95       	ret

00005198 <set_param>:

//*******************************************************************************************************************

char* set_param(char *ptr)
{
    5198:	cf 93       	push	r28
    519a:	df 93       	push	r29
    519c:	cd b7       	in	r28, 0x3d	; 61
    519e:	de b7       	in	r29, 0x3e	; 62
    51a0:	2a 97       	sbiw	r28, 0x0a	; 10
    51a2:	0f b6       	in	r0, 0x3f	; 63
    51a4:	f8 94       	cli
    51a6:	de bf       	out	0x3e, r29	; 62
    51a8:	0f be       	out	0x3f, r0	; 63
    51aa:	cd bf       	out	0x3d, r28	; 61
    51ac:	9e 83       	std	Y+6, r25	; 0x06
    51ae:	8d 83       	std	Y+5, r24	; 0x05
    if(memcmp_P(ptr, PSTR("accept_calls="), 13) == 0)
    51b0:	27 ee       	ldi	r18, 0xE7	; 231
    51b2:	39 e0       	ldi	r19, 0x09	; 9
    51b4:	8d 81       	ldd	r24, Y+5	; 0x05
    51b6:	9e 81       	ldd	r25, Y+6	; 0x06
    51b8:	4d e0       	ldi	r20, 0x0D	; 13
    51ba:	50 e0       	ldi	r21, 0x00	; 0
    51bc:	b9 01       	movw	r22, r18
    51be:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    51c2:	89 2b       	or	r24, r25
    51c4:	a1 f5       	brne	.+104    	; 0x522e <set_param+0x96>
    {
        char temp;

        ptr+=13;
    51c6:	8d 81       	ldd	r24, Y+5	; 0x05
    51c8:	9e 81       	ldd	r25, Y+6	; 0x06
    51ca:	0d 96       	adiw	r24, 0x0d	; 13
    51cc:	9e 83       	std	Y+6, r25	; 0x06
    51ce:	8d 83       	std	Y+5, r24	; 0x05
        if(*ptr == '0')
    51d0:	8d 81       	ldd	r24, Y+5	; 0x05
    51d2:	9e 81       	ldd	r25, Y+6	; 0x06
    51d4:	fc 01       	movw	r30, r24
    51d6:	80 81       	ld	r24, Z
    51d8:	80 33       	cpi	r24, 0x30	; 48
    51da:	11 f4       	brne	.+4      	; 0x51e0 <set_param+0x48>
            temp = 0;
    51dc:	19 82       	std	Y+1, r1	; 0x01
    51de:	0c c0       	rjmp	.+24     	; 0x51f8 <set_param+0x60>
        else if(*ptr == '1')
    51e0:	8d 81       	ldd	r24, Y+5	; 0x05
    51e2:	9e 81       	ldd	r25, Y+6	; 0x06
    51e4:	fc 01       	movw	r30, r24
    51e6:	80 81       	ld	r24, Z
    51e8:	81 33       	cpi	r24, 0x31	; 49
    51ea:	19 f4       	brne	.+6      	; 0x51f2 <set_param+0x5a>
            temp = 1;
    51ec:	81 e0       	ldi	r24, 0x01	; 1
    51ee:	89 83       	std	Y+1, r24	; 0x01
    51f0:	03 c0       	rjmp	.+6      	; 0x51f8 <set_param+0x60>
        else
            return 0;
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	90 e0       	ldi	r25, 0x00	; 0
    51f6:	4b c1       	rjmp	.+662    	; 0x548e <set_param+0x2f6>
        if(*++ptr != ';')
    51f8:	8d 81       	ldd	r24, Y+5	; 0x05
    51fa:	9e 81       	ldd	r25, Y+6	; 0x06
    51fc:	01 96       	adiw	r24, 0x01	; 1
    51fe:	9e 83       	std	Y+6, r25	; 0x06
    5200:	8d 83       	std	Y+5, r24	; 0x05
    5202:	8d 81       	ldd	r24, Y+5	; 0x05
    5204:	9e 81       	ldd	r25, Y+6	; 0x06
    5206:	fc 01       	movw	r30, r24
    5208:	80 81       	ld	r24, Z
    520a:	8b 33       	cpi	r24, 0x3B	; 59
    520c:	19 f0       	breq	.+6      	; 0x5214 <set_param+0x7c>
            return 0;
    520e:	80 e0       	ldi	r24, 0x00	; 0
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	3d c1       	rjmp	.+634    	; 0x548e <set_param+0x2f6>
        set_accept_calls(temp);
    5214:	89 81       	ldd	r24, Y+1	; 0x01
    5216:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <set_accept_calls>
        EEPROM_update();
    521a:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
        ptr++;
    521e:	8d 81       	ldd	r24, Y+5	; 0x05
    5220:	9e 81       	ldd	r25, Y+6	; 0x06
    5222:	01 96       	adiw	r24, 0x01	; 1
    5224:	9e 83       	std	Y+6, r25	; 0x06
    5226:	8d 83       	std	Y+5, r24	; 0x05
        return ptr;
    5228:	8d 81       	ldd	r24, Y+5	; 0x05
    522a:	9e 81       	ldd	r25, Y+6	; 0x06
    522c:	30 c1       	rjmp	.+608    	; 0x548e <set_param+0x2f6>
    }

    if(memcmp_P(ptr, PSTR("accept_sms="), 11) == 0)
    522e:	25 ef       	ldi	r18, 0xF5	; 245
    5230:	39 e0       	ldi	r19, 0x09	; 9
    5232:	8d 81       	ldd	r24, Y+5	; 0x05
    5234:	9e 81       	ldd	r25, Y+6	; 0x06
    5236:	4b e0       	ldi	r20, 0x0B	; 11
    5238:	50 e0       	ldi	r21, 0x00	; 0
    523a:	b9 01       	movw	r22, r18
    523c:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    5240:	89 2b       	or	r24, r25
    5242:	a1 f5       	brne	.+104    	; 0x52ac <set_param+0x114>
    {
        char temp;

        ptr+=11;
    5244:	8d 81       	ldd	r24, Y+5	; 0x05
    5246:	9e 81       	ldd	r25, Y+6	; 0x06
    5248:	0b 96       	adiw	r24, 0x0b	; 11
    524a:	9e 83       	std	Y+6, r25	; 0x06
    524c:	8d 83       	std	Y+5, r24	; 0x05
        if(*ptr == '0')
    524e:	8d 81       	ldd	r24, Y+5	; 0x05
    5250:	9e 81       	ldd	r25, Y+6	; 0x06
    5252:	fc 01       	movw	r30, r24
    5254:	80 81       	ld	r24, Z
    5256:	80 33       	cpi	r24, 0x30	; 48
    5258:	11 f4       	brne	.+4      	; 0x525e <set_param+0xc6>
            temp = 0;
    525a:	1a 82       	std	Y+2, r1	; 0x02
    525c:	0c c0       	rjmp	.+24     	; 0x5276 <set_param+0xde>
        else if(*ptr == '1')
    525e:	8d 81       	ldd	r24, Y+5	; 0x05
    5260:	9e 81       	ldd	r25, Y+6	; 0x06
    5262:	fc 01       	movw	r30, r24
    5264:	80 81       	ld	r24, Z
    5266:	81 33       	cpi	r24, 0x31	; 49
    5268:	19 f4       	brne	.+6      	; 0x5270 <set_param+0xd8>
            temp = 1;
    526a:	81 e0       	ldi	r24, 0x01	; 1
    526c:	8a 83       	std	Y+2, r24	; 0x02
    526e:	03 c0       	rjmp	.+6      	; 0x5276 <set_param+0xde>
        else
            return 0;
    5270:	80 e0       	ldi	r24, 0x00	; 0
    5272:	90 e0       	ldi	r25, 0x00	; 0
    5274:	0c c1       	rjmp	.+536    	; 0x548e <set_param+0x2f6>
        if(*++ptr != ';')
    5276:	8d 81       	ldd	r24, Y+5	; 0x05
    5278:	9e 81       	ldd	r25, Y+6	; 0x06
    527a:	01 96       	adiw	r24, 0x01	; 1
    527c:	9e 83       	std	Y+6, r25	; 0x06
    527e:	8d 83       	std	Y+5, r24	; 0x05
    5280:	8d 81       	ldd	r24, Y+5	; 0x05
    5282:	9e 81       	ldd	r25, Y+6	; 0x06
    5284:	fc 01       	movw	r30, r24
    5286:	80 81       	ld	r24, Z
    5288:	8b 33       	cpi	r24, 0x3B	; 59
    528a:	19 f0       	breq	.+6      	; 0x5292 <set_param+0xfa>
            return 0;
    528c:	80 e0       	ldi	r24, 0x00	; 0
    528e:	90 e0       	ldi	r25, 0x00	; 0
    5290:	fe c0       	rjmp	.+508    	; 0x548e <set_param+0x2f6>
        config.accept_sms = temp;
    5292:	8a 81       	ldd	r24, Y+2	; 0x02
    5294:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <config+0x4e>
        EEPROM_update();
    5298:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
        ptr++;
    529c:	8d 81       	ldd	r24, Y+5	; 0x05
    529e:	9e 81       	ldd	r25, Y+6	; 0x06
    52a0:	01 96       	adiw	r24, 0x01	; 1
    52a2:	9e 83       	std	Y+6, r25	; 0x06
    52a4:	8d 83       	std	Y+5, r24	; 0x05
        return ptr;
    52a6:	8d 81       	ldd	r24, Y+5	; 0x05
    52a8:	9e 81       	ldd	r25, Y+6	; 0x06
    52aa:	f1 c0       	rjmp	.+482    	; 0x548e <set_param+0x2f6>
    }

    if(memcmp_P(ptr, PSTR("report_t="), 9) == 0)
    52ac:	21 e0       	ldi	r18, 0x01	; 1
    52ae:	3a e0       	ldi	r19, 0x0A	; 10
    52b0:	8d 81       	ldd	r24, Y+5	; 0x05
    52b2:	9e 81       	ldd	r25, Y+6	; 0x06
    52b4:	49 e0       	ldi	r20, 0x09	; 9
    52b6:	50 e0       	ldi	r21, 0x00	; 0
    52b8:	b9 01       	movw	r22, r18
    52ba:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    52be:	89 2b       	or	r24, r25
    52c0:	a1 f5       	brne	.+104    	; 0x532a <set_param+0x192>
    {
        char temp;

        ptr+=9;
    52c2:	8d 81       	ldd	r24, Y+5	; 0x05
    52c4:	9e 81       	ldd	r25, Y+6	; 0x06
    52c6:	09 96       	adiw	r24, 0x09	; 9
    52c8:	9e 83       	std	Y+6, r25	; 0x06
    52ca:	8d 83       	std	Y+5, r24	; 0x05
        if(*ptr == '0')
    52cc:	8d 81       	ldd	r24, Y+5	; 0x05
    52ce:	9e 81       	ldd	r25, Y+6	; 0x06
    52d0:	fc 01       	movw	r30, r24
    52d2:	80 81       	ld	r24, Z
    52d4:	80 33       	cpi	r24, 0x30	; 48
    52d6:	11 f4       	brne	.+4      	; 0x52dc <set_param+0x144>
            temp = 0;
    52d8:	1b 82       	std	Y+3, r1	; 0x03
    52da:	0c c0       	rjmp	.+24     	; 0x52f4 <set_param+0x15c>
        else if(*ptr == '1')
    52dc:	8d 81       	ldd	r24, Y+5	; 0x05
    52de:	9e 81       	ldd	r25, Y+6	; 0x06
    52e0:	fc 01       	movw	r30, r24
    52e2:	80 81       	ld	r24, Z
    52e4:	81 33       	cpi	r24, 0x31	; 49
    52e6:	19 f4       	brne	.+6      	; 0x52ee <set_param+0x156>
            temp = 1;
    52e8:	81 e0       	ldi	r24, 0x01	; 1
    52ea:	8b 83       	std	Y+3, r24	; 0x03
    52ec:	03 c0       	rjmp	.+6      	; 0x52f4 <set_param+0x15c>
        else
            return 0;
    52ee:	80 e0       	ldi	r24, 0x00	; 0
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	cd c0       	rjmp	.+410    	; 0x548e <set_param+0x2f6>
        if(*++ptr != ';')
    52f4:	8d 81       	ldd	r24, Y+5	; 0x05
    52f6:	9e 81       	ldd	r25, Y+6	; 0x06
    52f8:	01 96       	adiw	r24, 0x01	; 1
    52fa:	9e 83       	std	Y+6, r25	; 0x06
    52fc:	8d 83       	std	Y+5, r24	; 0x05
    52fe:	8d 81       	ldd	r24, Y+5	; 0x05
    5300:	9e 81       	ldd	r25, Y+6	; 0x06
    5302:	fc 01       	movw	r30, r24
    5304:	80 81       	ld	r24, Z
    5306:	8b 33       	cpi	r24, 0x3B	; 59
    5308:	19 f0       	breq	.+6      	; 0x5310 <set_param+0x178>
            return 0;
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	bf c0       	rjmp	.+382    	; 0x548e <set_param+0x2f6>
        config.report_temperature = temp;
    5310:	8b 81       	ldd	r24, Y+3	; 0x03
    5312:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <config+0x52>
        EEPROM_update();
    5316:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
        ptr++;
    531a:	8d 81       	ldd	r24, Y+5	; 0x05
    531c:	9e 81       	ldd	r25, Y+6	; 0x06
    531e:	01 96       	adiw	r24, 0x01	; 1
    5320:	9e 83       	std	Y+6, r25	; 0x06
    5322:	8d 83       	std	Y+5, r24	; 0x05
        return ptr;
    5324:	8d 81       	ldd	r24, Y+5	; 0x05
    5326:	9e 81       	ldd	r25, Y+6	; 0x06
    5328:	b2 c0       	rjmp	.+356    	; 0x548e <set_param+0x2f6>
    }

    if(memcmp_P(ptr, PSTR("chapeka="), 8) == 0)
    532a:	2b e0       	ldi	r18, 0x0B	; 11
    532c:	3a e0       	ldi	r19, 0x0A	; 10
    532e:	8d 81       	ldd	r24, Y+5	; 0x05
    5330:	9e 81       	ldd	r25, Y+6	; 0x06
    5332:	48 e0       	ldi	r20, 0x08	; 8
    5334:	50 e0       	ldi	r21, 0x00	; 0
    5336:	b9 01       	movw	r22, r18
    5338:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    533c:	89 2b       	or	r24, r25
    533e:	41 f5       	brne	.+80     	; 0x5390 <set_param+0x1f8>
    {
        ptr+=8;
    5340:	8d 81       	ldd	r24, Y+5	; 0x05
    5342:	9e 81       	ldd	r25, Y+6	; 0x06
    5344:	08 96       	adiw	r24, 0x08	; 8
    5346:	9e 83       	std	Y+6, r25	; 0x06
    5348:	8d 83       	std	Y+5, r24	; 0x05
        if(*ptr == '0')
    534a:	8d 81       	ldd	r24, Y+5	; 0x05
    534c:	9e 81       	ldd	r25, Y+6	; 0x06
    534e:	fc 01       	movw	r30, r24
    5350:	80 81       	ld	r24, Z
    5352:	80 33       	cpi	r24, 0x30	; 48
    5354:	31 f4       	brne	.+12     	; 0x5362 <set_param+0x1ca>
        {
            config.mode_gsm = GSM_ON_UTKINA;
    5356:	81 e0       	ldi	r24, 0x01	; 1
    5358:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <config+0x4b>
            EEPROM_update();
    535c:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
    5360:	0f c0       	rjmp	.+30     	; 0x5380 <set_param+0x1e8>
        }
        else if(*ptr == '1')
    5362:	8d 81       	ldd	r24, Y+5	; 0x05
    5364:	9e 81       	ldd	r25, Y+6	; 0x06
    5366:	fc 01       	movw	r30, r24
    5368:	80 81       	ld	r24, Z
    536a:	81 33       	cpi	r24, 0x31	; 49
    536c:	31 f4       	brne	.+12     	; 0x537a <set_param+0x1e2>
        {
            config.mode_gsm = GSM_ON_CHAPEKA;
    536e:	82 e0       	ldi	r24, 0x02	; 2
    5370:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <config+0x4b>
            EEPROM_update();
    5374:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
    5378:	03 c0       	rjmp	.+6      	; 0x5380 <set_param+0x1e8>
        }
        else
            return 0;
    537a:	80 e0       	ldi	r24, 0x00	; 0
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	87 c0       	rjmp	.+270    	; 0x548e <set_param+0x2f6>
        ptr++;
    5380:	8d 81       	ldd	r24, Y+5	; 0x05
    5382:	9e 81       	ldd	r25, Y+6	; 0x06
    5384:	01 96       	adiw	r24, 0x01	; 1
    5386:	9e 83       	std	Y+6, r25	; 0x06
    5388:	8d 83       	std	Y+5, r24	; 0x05
        return ptr;
    538a:	8d 81       	ldd	r24, Y+5	; 0x05
    538c:	9e 81       	ldd	r25, Y+6	; 0x06
    538e:	7f c0       	rjmp	.+254    	; 0x548e <set_param+0x2f6>
    }

    if(memcmp_P(ptr, PSTR("utkina="), 8) == 0)
    5390:	24 e1       	ldi	r18, 0x14	; 20
    5392:	3a e0       	ldi	r19, 0x0A	; 10
    5394:	8d 81       	ldd	r24, Y+5	; 0x05
    5396:	9e 81       	ldd	r25, Y+6	; 0x06
    5398:	48 e0       	ldi	r20, 0x08	; 8
    539a:	50 e0       	ldi	r21, 0x00	; 0
    539c:	b9 01       	movw	r22, r18
    539e:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    53a2:	89 2b       	or	r24, r25
    53a4:	41 f5       	brne	.+80     	; 0x53f6 <set_param+0x25e>
    {
        ptr+=18;
    53a6:	8d 81       	ldd	r24, Y+5	; 0x05
    53a8:	9e 81       	ldd	r25, Y+6	; 0x06
    53aa:	42 96       	adiw	r24, 0x12	; 18
    53ac:	9e 83       	std	Y+6, r25	; 0x06
    53ae:	8d 83       	std	Y+5, r24	; 0x05
        if(*ptr == '0')
    53b0:	8d 81       	ldd	r24, Y+5	; 0x05
    53b2:	9e 81       	ldd	r25, Y+6	; 0x06
    53b4:	fc 01       	movw	r30, r24
    53b6:	80 81       	ld	r24, Z
    53b8:	80 33       	cpi	r24, 0x30	; 48
    53ba:	31 f4       	brne	.+12     	; 0x53c8 <set_param+0x230>
        {
            config.mode_gsm = GSM_ON_CHAPEKA;
    53bc:	82 e0       	ldi	r24, 0x02	; 2
    53be:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <config+0x4b>
            EEPROM_update();
    53c2:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
    53c6:	0f c0       	rjmp	.+30     	; 0x53e6 <set_param+0x24e>
        }
        else if(*ptr == '1')
    53c8:	8d 81       	ldd	r24, Y+5	; 0x05
    53ca:	9e 81       	ldd	r25, Y+6	; 0x06
    53cc:	fc 01       	movw	r30, r24
    53ce:	80 81       	ld	r24, Z
    53d0:	81 33       	cpi	r24, 0x31	; 49
    53d2:	31 f4       	brne	.+12     	; 0x53e0 <set_param+0x248>
        {
            config.mode_gsm = GSM_ON_UTKINA;
    53d4:	81 e0       	ldi	r24, 0x01	; 1
    53d6:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <config+0x4b>
            EEPROM_update();
    53da:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
    53de:	03 c0       	rjmp	.+6      	; 0x53e6 <set_param+0x24e>
        }
        else
            return 0;
    53e0:	80 e0       	ldi	r24, 0x00	; 0
    53e2:	90 e0       	ldi	r25, 0x00	; 0
    53e4:	54 c0       	rjmp	.+168    	; 0x548e <set_param+0x2f6>
        ptr++;
    53e6:	8d 81       	ldd	r24, Y+5	; 0x05
    53e8:	9e 81       	ldd	r25, Y+6	; 0x06
    53ea:	01 96       	adiw	r24, 0x01	; 1
    53ec:	9e 83       	std	Y+6, r25	; 0x06
    53ee:	8d 83       	std	Y+5, r24	; 0x05
        return ptr;
    53f0:	8d 81       	ldd	r24, Y+5	; 0x05
    53f2:	9e 81       	ldd	r25, Y+6	; 0x06
    53f4:	4c c0       	rjmp	.+152    	; 0x548e <set_param+0x2f6>
    }

    if(memcmp_P(ptr, PSTR("pause_relay="), 12) == 0)
    53f6:	2c e1       	ldi	r18, 0x1C	; 28
    53f8:	3a e0       	ldi	r19, 0x0A	; 10
    53fa:	8d 81       	ldd	r24, Y+5	; 0x05
    53fc:	9e 81       	ldd	r25, Y+6	; 0x06
    53fe:	4c e0       	ldi	r20, 0x0C	; 12
    5400:	50 e0       	ldi	r21, 0x00	; 0
    5402:	b9 01       	movw	r22, r18
    5404:	0e 94 6f 34 	call	0x68de	; 0x68de <memcmp_P>
    5408:	89 2b       	or	r24, r25
    540a:	09 f0       	breq	.+2      	; 0x540e <set_param+0x276>
    540c:	3e c0       	rjmp	.+124    	; 0x548a <set_param+0x2f2>
    {
        uint8_t interval;
        ptr+=12;
    540e:	8d 81       	ldd	r24, Y+5	; 0x05
    5410:	9e 81       	ldd	r25, Y+6	; 0x06
    5412:	0c 96       	adiw	r24, 0x0c	; 12
    5414:	9e 83       	std	Y+6, r25	; 0x06
    5416:	8d 83       	std	Y+5, r24	; 0x05
        if(isdigit(*ptr) == 0)
    5418:	8d 81       	ldd	r24, Y+5	; 0x05
    541a:	9e 81       	ldd	r25, Y+6	; 0x06
    541c:	fc 01       	movw	r30, r24
    541e:	80 81       	ld	r24, Z
    5420:	08 2e       	mov	r0, r24
    5422:	00 0c       	add	r0, r0
    5424:	99 0b       	sbc	r25, r25
    5426:	c0 97       	sbiw	r24, 0x30	; 48
    5428:	0a 97       	sbiw	r24, 0x0a	; 10
    542a:	18 f0       	brcs	.+6      	; 0x5432 <set_param+0x29a>
            return 0;
    542c:	80 e0       	ldi	r24, 0x00	; 0
    542e:	90 e0       	ldi	r25, 0x00	; 0
    5430:	2e c0       	rjmp	.+92     	; 0x548e <set_param+0x2f6>
        interval = strtoul(ptr, &ptr, 10);
    5432:	8d 81       	ldd	r24, Y+5	; 0x05
    5434:	9e 81       	ldd	r25, Y+6	; 0x06
    5436:	9e 01       	movw	r18, r28
    5438:	2b 5f       	subi	r18, 0xFB	; 251
    543a:	3f 4f       	sbci	r19, 0xFF	; 255
    543c:	4a e0       	ldi	r20, 0x0A	; 10
    543e:	50 e0       	ldi	r21, 0x00	; 0
    5440:	b9 01       	movw	r22, r18
    5442:	0e 94 00 33 	call	0x6600	; 0x6600 <strtoul>
    5446:	6f 83       	std	Y+7, r22	; 0x07
    5448:	78 87       	std	Y+8, r23	; 0x08
    544a:	89 87       	std	Y+9, r24	; 0x09
    544c:	9a 87       	std	Y+10, r25	; 0x0a
    544e:	ff 81       	ldd	r31, Y+7	; 0x07
    5450:	fc 83       	std	Y+4, r31	; 0x04
        if( interval>250 )
    5452:	8c 81       	ldd	r24, Y+4	; 0x04
    5454:	8b 3f       	cpi	r24, 0xFB	; 251
    5456:	18 f0       	brcs	.+6      	; 0x545e <set_param+0x2c6>
            return 0;
    5458:	80 e0       	ldi	r24, 0x00	; 0
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	18 c0       	rjmp	.+48     	; 0x548e <set_param+0x2f6>
        if(*ptr != ';')
    545e:	8d 81       	ldd	r24, Y+5	; 0x05
    5460:	9e 81       	ldd	r25, Y+6	; 0x06
    5462:	fc 01       	movw	r30, r24
    5464:	80 81       	ld	r24, Z
    5466:	8b 33       	cpi	r24, 0x3B	; 59
    5468:	19 f0       	breq	.+6      	; 0x5470 <set_param+0x2d8>
            return 0;
    546a:	80 e0       	ldi	r24, 0x00	; 0
    546c:	90 e0       	ldi	r25, 0x00	; 0
    546e:	0f c0       	rjmp	.+30     	; 0x548e <set_param+0x2f6>
        set_pause_relay(interval);
    5470:	8c 81       	ldd	r24, Y+4	; 0x04
    5472:	0e 94 c8 11 	call	0x2390	; 0x2390 <set_pause_relay>
        EEPROM_update();
    5476:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <EEPROM_update>
        ptr++;
    547a:	8d 81       	ldd	r24, Y+5	; 0x05
    547c:	9e 81       	ldd	r25, Y+6	; 0x06
    547e:	01 96       	adiw	r24, 0x01	; 1
    5480:	9e 83       	std	Y+6, r25	; 0x06
    5482:	8d 83       	std	Y+5, r24	; 0x05
        return ptr;
    5484:	8d 81       	ldd	r24, Y+5	; 0x05
    5486:	9e 81       	ldd	r25, Y+6	; 0x06
    5488:	02 c0       	rjmp	.+4      	; 0x548e <set_param+0x2f6>
    }
    return 0;
    548a:	80 e0       	ldi	r24, 0x00	; 0
    548c:	90 e0       	ldi	r25, 0x00	; 0
}
    548e:	2a 96       	adiw	r28, 0x0a	; 10
    5490:	0f b6       	in	r0, 0x3f	; 63
    5492:	f8 94       	cli
    5494:	de bf       	out	0x3e, r29	; 62
    5496:	0f be       	out	0x3f, r0	; 63
    5498:	cd bf       	out	0x3d, r28	; 61
    549a:	df 91       	pop	r29
    549c:	cf 91       	pop	r28
    549e:	08 95       	ret

000054a0 <set_phones>:

//*******************************************************************************************************************
// принимает список телефонов через запятую, адрес назначения и максимальный размер области назначения
static char* set_phones(char *phones, char *dest, char max_num)
{
    54a0:	cf 93       	push	r28
    54a2:	df 93       	push	r29
    54a4:	cd b7       	in	r28, 0x3d	; 61
    54a6:	de b7       	in	r29, 0x3e	; 62
    54a8:	2a 97       	sbiw	r28, 0x0a	; 10
    54aa:	0f b6       	in	r0, 0x3f	; 63
    54ac:	f8 94       	cli
    54ae:	de bf       	out	0x3e, r29	; 62
    54b0:	0f be       	out	0x3f, r0	; 63
    54b2:	cd bf       	out	0x3d, r28	; 61
    54b4:	9f 83       	std	Y+7, r25	; 0x07
    54b6:	8e 83       	std	Y+6, r24	; 0x06
    54b8:	79 87       	std	Y+9, r23	; 0x09
    54ba:	68 87       	std	Y+8, r22	; 0x08
    54bc:	4a 87       	std	Y+10, r20	; 0x0a
    uint8_t n, i;
    char *ptr = phones;
    54be:	8e 81       	ldd	r24, Y+6	; 0x06
    54c0:	9f 81       	ldd	r25, Y+7	; 0x07
    54c2:	9c 83       	std	Y+4, r25	; 0x04
    54c4:	8b 83       	std	Y+3, r24	; 0x03
    n=0;
    54c6:	19 82       	std	Y+1, r1	; 0x01

    for(uint8_t j = 0; j < 5; j++)
    54c8:	1d 82       	std	Y+5, r1	; 0x05
    54ca:	15 c0       	rjmp	.+42     	; 0x54f6 <set_phones+0x56>
    {
        config.admin_phone[j][0] = 0;
    54cc:	8d 81       	ldd	r24, Y+5	; 0x05
    54ce:	28 2f       	mov	r18, r24
    54d0:	30 e0       	ldi	r19, 0x00	; 0
    54d2:	c9 01       	movw	r24, r18
    54d4:	88 0f       	add	r24, r24
    54d6:	99 1f       	adc	r25, r25
    54d8:	88 0f       	add	r24, r24
    54da:	99 1f       	adc	r25, r25
    54dc:	88 0f       	add	r24, r24
    54de:	99 1f       	adc	r25, r25
    54e0:	82 1b       	sub	r24, r18
    54e2:	93 0b       	sbc	r25, r19
    54e4:	88 0f       	add	r24, r24
    54e6:	99 1f       	adc	r25, r25
    54e8:	84 53       	subi	r24, 0x34	; 52
    54ea:	9e 4f       	sbci	r25, 0xFE	; 254
    54ec:	fc 01       	movw	r30, r24
    54ee:	10 82       	st	Z, r1
    for(uint8_t j = 0; j < 5; j++)
    54f0:	8d 81       	ldd	r24, Y+5	; 0x05
    54f2:	8f 5f       	subi	r24, 0xFF	; 255
    54f4:	8d 83       	std	Y+5, r24	; 0x05
    54f6:	8d 81       	ldd	r24, Y+5	; 0x05
    54f8:	85 30       	cpi	r24, 0x05	; 5
    54fa:	40 f3       	brcs	.-48     	; 0x54cc <set_phones+0x2c>
    }
    while(check_phone_string(ptr))
    54fc:	2a c0       	rjmp	.+84     	; 0x5552 <set_phones+0xb2>
    {
        n++;
    54fe:	89 81       	ldd	r24, Y+1	; 0x01
    5500:	8f 5f       	subi	r24, 0xFF	; 255
    5502:	89 83       	std	Y+1, r24	; 0x01
        if(n > max_num)
    5504:	89 81       	ldd	r24, Y+1	; 0x01
    5506:	28 2f       	mov	r18, r24
    5508:	30 e0       	ldi	r19, 0x00	; 0
    550a:	8a 85       	ldd	r24, Y+10	; 0x0a
    550c:	08 2e       	mov	r0, r24
    550e:	00 0c       	add	r0, r0
    5510:	99 0b       	sbc	r25, r25
    5512:	82 17       	cp	r24, r18
    5514:	93 07       	cpc	r25, r19
    5516:	1c f4       	brge	.+6      	; 0x551e <set_phones+0x7e>
            return 0;
    5518:	80 e0       	ldi	r24, 0x00	; 0
    551a:	90 e0       	ldi	r25, 0x00	; 0
    551c:	94 c0       	rjmp	.+296    	; 0x5646 <set_phones+0x1a6>
        ptr+=13;
    551e:	8b 81       	ldd	r24, Y+3	; 0x03
    5520:	9c 81       	ldd	r25, Y+4	; 0x04
    5522:	0d 96       	adiw	r24, 0x0d	; 13
    5524:	9c 83       	std	Y+4, r25	; 0x04
    5526:	8b 83       	std	Y+3, r24	; 0x03
        if(*ptr == ';')
    5528:	8b 81       	ldd	r24, Y+3	; 0x03
    552a:	9c 81       	ldd	r25, Y+4	; 0x04
    552c:	fc 01       	movw	r30, r24
    552e:	80 81       	ld	r24, Z
    5530:	8b 33       	cpi	r24, 0x3B	; 59
    5532:	b1 f0       	breq	.+44     	; 0x5560 <set_phones+0xc0>
            break;
        else if(*ptr == ',')
    5534:	8b 81       	ldd	r24, Y+3	; 0x03
    5536:	9c 81       	ldd	r25, Y+4	; 0x04
    5538:	fc 01       	movw	r30, r24
    553a:	80 81       	ld	r24, Z
    553c:	8c 32       	cpi	r24, 0x2C	; 44
    553e:	31 f4       	brne	.+12     	; 0x554c <set_phones+0xac>
        {
            ptr++;
    5540:	8b 81       	ldd	r24, Y+3	; 0x03
    5542:	9c 81       	ldd	r25, Y+4	; 0x04
    5544:	01 96       	adiw	r24, 0x01	; 1
    5546:	9c 83       	std	Y+4, r25	; 0x04
    5548:	8b 83       	std	Y+3, r24	; 0x03
            continue;
    554a:	03 c0       	rjmp	.+6      	; 0x5552 <set_phones+0xb2>
        }
        else
            return 0;
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	7a c0       	rjmp	.+244    	; 0x5646 <set_phones+0x1a6>
    while(check_phone_string(ptr))
    5552:	8b 81       	ldd	r24, Y+3	; 0x03
    5554:	9c 81       	ldd	r25, Y+4	; 0x04
    5556:	0e 94 0d 1b 	call	0x361a	; 0x361a <check_phone_string>
    555a:	88 23       	and	r24, r24
    555c:	81 f6       	brne	.-96     	; 0x54fe <set_phones+0x5e>
    555e:	01 c0       	rjmp	.+2      	; 0x5562 <set_phones+0xc2>
            break;
    5560:	00 00       	nop
    }
    ptr = phones;
    5562:	8e 81       	ldd	r24, Y+6	; 0x06
    5564:	9f 81       	ldd	r25, Y+7	; 0x07
    5566:	9c 83       	std	Y+4, r25	; 0x04
    5568:	8b 83       	std	Y+3, r24	; 0x03
    for(i=0; i<n; i++)
    556a:	1a 82       	std	Y+2, r1	; 0x02
    556c:	37 c0       	rjmp	.+110    	; 0x55dc <set_phones+0x13c>
    {
        memcpy(&dest[i*14], ptr, 13);
    556e:	8a 81       	ldd	r24, Y+2	; 0x02
    5570:	28 2f       	mov	r18, r24
    5572:	30 e0       	ldi	r19, 0x00	; 0
    5574:	c9 01       	movw	r24, r18
    5576:	88 0f       	add	r24, r24
    5578:	99 1f       	adc	r25, r25
    557a:	88 0f       	add	r24, r24
    557c:	99 1f       	adc	r25, r25
    557e:	88 0f       	add	r24, r24
    5580:	99 1f       	adc	r25, r25
    5582:	82 1b       	sub	r24, r18
    5584:	93 0b       	sbc	r25, r19
    5586:	88 0f       	add	r24, r24
    5588:	99 1f       	adc	r25, r25
    558a:	9c 01       	movw	r18, r24
    558c:	88 85       	ldd	r24, Y+8	; 0x08
    558e:	99 85       	ldd	r25, Y+9	; 0x09
    5590:	82 0f       	add	r24, r18
    5592:	93 1f       	adc	r25, r19
    5594:	2b 81       	ldd	r18, Y+3	; 0x03
    5596:	3c 81       	ldd	r19, Y+4	; 0x04
    5598:	4d e0       	ldi	r20, 0x0D	; 13
    559a:	50 e0       	ldi	r21, 0x00	; 0
    559c:	b9 01       	movw	r22, r18
    559e:	0e 94 b3 34 	call	0x6966	; 0x6966 <memcpy>
        dest[i*14 + 13] = 0;
    55a2:	8a 81       	ldd	r24, Y+2	; 0x02
    55a4:	28 2f       	mov	r18, r24
    55a6:	30 e0       	ldi	r19, 0x00	; 0
    55a8:	c9 01       	movw	r24, r18
    55aa:	88 0f       	add	r24, r24
    55ac:	99 1f       	adc	r25, r25
    55ae:	88 0f       	add	r24, r24
    55b0:	99 1f       	adc	r25, r25
    55b2:	88 0f       	add	r24, r24
    55b4:	99 1f       	adc	r25, r25
    55b6:	82 1b       	sub	r24, r18
    55b8:	93 0b       	sbc	r25, r19
    55ba:	88 0f       	add	r24, r24
    55bc:	99 1f       	adc	r25, r25
    55be:	0d 96       	adiw	r24, 0x0d	; 13
    55c0:	28 85       	ldd	r18, Y+8	; 0x08
    55c2:	39 85       	ldd	r19, Y+9	; 0x09
    55c4:	82 0f       	add	r24, r18
    55c6:	93 1f       	adc	r25, r19
    55c8:	fc 01       	movw	r30, r24
    55ca:	10 82       	st	Z, r1
        ptr+=14;
    55cc:	8b 81       	ldd	r24, Y+3	; 0x03
    55ce:	9c 81       	ldd	r25, Y+4	; 0x04
    55d0:	0e 96       	adiw	r24, 0x0e	; 14
    55d2:	9c 83       	std	Y+4, r25	; 0x04
    55d4:	8b 83       	std	Y+3, r24	; 0x03
    for(i=0; i<n; i++)
    55d6:	8a 81       	ldd	r24, Y+2	; 0x02
    55d8:	8f 5f       	subi	r24, 0xFF	; 255
    55da:	8a 83       	std	Y+2, r24	; 0x02
    55dc:	9a 81       	ldd	r25, Y+2	; 0x02
    55de:	89 81       	ldd	r24, Y+1	; 0x01
    55e0:	98 17       	cp	r25, r24
    55e2:	28 f2       	brcs	.-118    	; 0x556e <set_phones+0xce>
    }
    memset(&dest[n*14], 0, 14*(max_num-n));
    55e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    55e6:	28 2f       	mov	r18, r24
    55e8:	88 0f       	add	r24, r24
    55ea:	33 0b       	sbc	r19, r19
    55ec:	89 81       	ldd	r24, Y+1	; 0x01
    55ee:	88 2f       	mov	r24, r24
    55f0:	90 e0       	ldi	r25, 0x00	; 0
    55f2:	28 1b       	sub	r18, r24
    55f4:	39 0b       	sbc	r19, r25
    55f6:	c9 01       	movw	r24, r18
    55f8:	88 0f       	add	r24, r24
    55fa:	99 1f       	adc	r25, r25
    55fc:	88 0f       	add	r24, r24
    55fe:	99 1f       	adc	r25, r25
    5600:	88 0f       	add	r24, r24
    5602:	99 1f       	adc	r25, r25
    5604:	82 1b       	sub	r24, r18
    5606:	93 0b       	sbc	r25, r19
    5608:	88 0f       	add	r24, r24
    560a:	99 1f       	adc	r25, r25
    560c:	ac 01       	movw	r20, r24
    560e:	89 81       	ldd	r24, Y+1	; 0x01
    5610:	28 2f       	mov	r18, r24
    5612:	30 e0       	ldi	r19, 0x00	; 0
    5614:	c9 01       	movw	r24, r18
    5616:	88 0f       	add	r24, r24
    5618:	99 1f       	adc	r25, r25
    561a:	88 0f       	add	r24, r24
    561c:	99 1f       	adc	r25, r25
    561e:	88 0f       	add	r24, r24
    5620:	99 1f       	adc	r25, r25
    5622:	82 1b       	sub	r24, r18
    5624:	93 0b       	sbc	r25, r19
    5626:	88 0f       	add	r24, r24
    5628:	99 1f       	adc	r25, r25
    562a:	9c 01       	movw	r18, r24
    562c:	88 85       	ldd	r24, Y+8	; 0x08
    562e:	99 85       	ldd	r25, Y+9	; 0x09
    5630:	82 0f       	add	r24, r18
    5632:	93 1f       	adc	r25, r19
    5634:	60 e0       	ldi	r22, 0x00	; 0
    5636:	70 e0       	ldi	r23, 0x00	; 0
    5638:	0e 94 ce 34 	call	0x699c	; 0x699c <memset>
    config.admin_mode = 1;
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <config+0x4>
    return ptr;
    5642:	8b 81       	ldd	r24, Y+3	; 0x03
    5644:	9c 81       	ldd	r25, Y+4	; 0x04
}
    5646:	2a 96       	adiw	r28, 0x0a	; 10
    5648:	0f b6       	in	r0, 0x3f	; 63
    564a:	f8 94       	cli
    564c:	de bf       	out	0x3e, r29	; 62
    564e:	0f be       	out	0x3f, r0	; 63
    5650:	cd bf       	out	0x3d, r28	; 61
    5652:	df 91       	pop	r29
    5654:	cf 91       	pop	r28
    5656:	08 95       	ret

00005658 <__vector_7>:
#define set_tx_pin_high()      ( SOFTUART_TXPORT |=  ( 1 << SOFTUART_TXBIT ) )
#define set_tx_pin_low()       ( SOFTUART_TXPORT &= ~( 1 << SOFTUART_TXBIT ) )
#define get_rx_pin_status()    ( SOFTUART_RXPIN  &   ( 1 << SOFTUART_RXBIT ) )

ISR(SOFTUART_T_COMP_LABEL)
{
    5658:	1f 92       	push	r1
    565a:	0f 92       	push	r0
    565c:	0f b6       	in	r0, 0x3f	; 63
    565e:	0f 92       	push	r0
    5660:	11 24       	eor	r1, r1
    5662:	2f 93       	push	r18
    5664:	8f 93       	push	r24
    5666:	9f 93       	push	r25
    5668:	ef 93       	push	r30
    566a:	ff 93       	push	r31
    566c:	cf 93       	push	r28
    566e:	df 93       	push	r29
    5670:	00 d0       	rcall	.+0      	; 0x5672 <__vector_7+0x1a>
    5672:	0f 92       	push	r0
    5674:	cd b7       	in	r28, 0x3d	; 61
    5676:	de b7       	in	r29, 0x3e	; 62

	unsigned char start_bit, flag_in;
	unsigned char tmp;

	// Transmitter Section
	if ( flag_tx_busy == SU_TRUE ) {
    5678:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <flag_tx_busy>
    567c:	81 30       	cpi	r24, 0x01	; 1
    567e:	e1 f5       	brne	.+120    	; 0x56f8 <__vector_7+0xa0>
		tmp = timer_tx_ctr;
    5680:	80 91 b7 03 	lds	r24, 0x03B7	; 0x8003b7 <timer_tx_ctr>
    5684:	89 83       	std	Y+1, r24	; 0x01
		if ( --tmp == 0 ) { // if ( --timer_tx_ctr <= 0 )
    5686:	89 81       	ldd	r24, Y+1	; 0x01
    5688:	81 50       	subi	r24, 0x01	; 1
    568a:	89 83       	std	Y+1, r24	; 0x01
    568c:	89 81       	ldd	r24, Y+1	; 0x01
    568e:	88 23       	and	r24, r24
    5690:	81 f5       	brne	.+96     	; 0x56f2 <__vector_7+0x9a>
			if ( internal_tx_buffer & 0x01 ) {
    5692:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <internal_tx_buffer>
    5696:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <internal_tx_buffer+0x1>
    569a:	81 70       	andi	r24, 0x01	; 1
    569c:	99 27       	eor	r25, r25
    569e:	89 2b       	or	r24, r25
    56a0:	51 f0       	breq	.+20     	; 0x56b6 <__vector_7+0x5e>
				set_tx_pin_high();
    56a2:	8b e2       	ldi	r24, 0x2B	; 43
    56a4:	90 e0       	ldi	r25, 0x00	; 0
    56a6:	fc 01       	movw	r30, r24
    56a8:	20 81       	ld	r18, Z
    56aa:	8b e2       	ldi	r24, 0x2B	; 43
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	28 60       	ori	r18, 0x08	; 8
    56b0:	fc 01       	movw	r30, r24
    56b2:	20 83       	st	Z, r18
    56b4:	09 c0       	rjmp	.+18     	; 0x56c8 <__vector_7+0x70>
			}
			else {
				set_tx_pin_low();
    56b6:	8b e2       	ldi	r24, 0x2B	; 43
    56b8:	90 e0       	ldi	r25, 0x00	; 0
    56ba:	fc 01       	movw	r30, r24
    56bc:	20 81       	ld	r18, Z
    56be:	8b e2       	ldi	r24, 0x2B	; 43
    56c0:	90 e0       	ldi	r25, 0x00	; 0
    56c2:	27 7f       	andi	r18, 0xF7	; 247
    56c4:	fc 01       	movw	r30, r24
    56c6:	20 83       	st	Z, r18
			}
			internal_tx_buffer >>= 1;
    56c8:	80 91 b9 03 	lds	r24, 0x03B9	; 0x8003b9 <internal_tx_buffer>
    56cc:	90 91 ba 03 	lds	r25, 0x03BA	; 0x8003ba <internal_tx_buffer+0x1>
    56d0:	96 95       	lsr	r25
    56d2:	87 95       	ror	r24
    56d4:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <internal_tx_buffer+0x1>
    56d8:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <internal_tx_buffer>
			tmp = 3; // timer_tx_ctr = 3;
    56dc:	83 e0       	ldi	r24, 0x03	; 3
    56de:	89 83       	std	Y+1, r24	; 0x01
			if ( --bits_left_in_tx == 0 ) {
    56e0:	80 91 b8 03 	lds	r24, 0x03B8	; 0x8003b8 <bits_left_in_tx>
    56e4:	81 50       	subi	r24, 0x01	; 1
    56e6:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <bits_left_in_tx>
    56ea:	88 23       	and	r24, r24
    56ec:	11 f4       	brne	.+4      	; 0x56f2 <__vector_7+0x9a>
				flag_tx_busy = SU_FALSE;
    56ee:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <flag_tx_busy>
			}
		}
		timer_tx_ctr = tmp;
    56f2:	89 81       	ldd	r24, Y+1	; 0x01
    56f4:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <timer_tx_ctr>
	}

	// Receiver Section
	if ( flag_rx_off == SU_FALSE ) {
    56f8:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <flag_rx_off>
    56fc:	88 23       	and	r24, r24
    56fe:	09 f0       	breq	.+2      	; 0x5702 <__vector_7+0xaa>
    5700:	73 c0       	rjmp	.+230    	; 0x57e8 <__vector_7+0x190>
		if ( flag_rx_waiting_for_stop_bit ) {
    5702:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <flag_rx_waiting_for_stop_bit.4>
    5706:	88 23       	and	r24, r24
    5708:	19 f1       	breq	.+70     	; 0x5750 <__vector_7+0xf8>
			if ( --timer_rx_ctr == 0 ) {
    570a:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <timer_rx_ctr.3>
    570e:	81 50       	subi	r24, 0x01	; 1
    5710:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <timer_rx_ctr.3>
    5714:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <timer_rx_ctr.3>
    5718:	88 23       	and	r24, r24
    571a:	09 f0       	breq	.+2      	; 0x571e <__vector_7+0xc6>
    571c:	65 c0       	rjmp	.+202    	; 0x57e8 <__vector_7+0x190>
				flag_rx_waiting_for_stop_bit = SU_FALSE;
    571e:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <flag_rx_waiting_for_stop_bit.4>
				flag_rx_ready = SU_FALSE;
    5722:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <flag_rx_ready>
				inbuf[qin] = internal_rx_buffer;
    5726:	20 91 bd 03 	lds	r18, 0x03BD	; 0x8003bd <internal_rx_buffer.2>
    572a:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <qin>
    572e:	88 2f       	mov	r24, r24
    5730:	90 e0       	ldi	r25, 0x00	; 0
    5732:	8e 56       	subi	r24, 0x6E	; 110
    5734:	9c 4f       	sbci	r25, 0xFC	; 252
    5736:	fc 01       	movw	r30, r24
    5738:	20 83       	st	Z, r18
				if ( ++qin >= SOFTUART_IN_BUF_SIZE ) {
    573a:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <qin>
    573e:	8f 5f       	subi	r24, 0xFF	; 255
    5740:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <qin>
    5744:	80 32       	cpi	r24, 0x20	; 32
    5746:	08 f4       	brcc	.+2      	; 0x574a <__vector_7+0xf2>
    5748:	4f c0       	rjmp	.+158    	; 0x57e8 <__vector_7+0x190>
					// overflow - reset inbuf-index
					qin = 0;
    574a:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <qin>
				}
				timer_rx_ctr = tmp;
			}
		}
	}
}
    574e:	4c c0       	rjmp	.+152    	; 0x57e8 <__vector_7+0x190>
			if ( flag_rx_ready == SU_FALSE ) {
    5750:	80 91 b5 03 	lds	r24, 0x03B5	; 0x8003b5 <flag_rx_ready>
    5754:	88 23       	and	r24, r24
    5756:	c9 f4       	brne	.+50     	; 0x578a <__vector_7+0x132>
				start_bit = get_rx_pin_status();
    5758:	89 e2       	ldi	r24, 0x29	; 41
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	fc 01       	movw	r30, r24
    575e:	80 81       	ld	r24, Z
    5760:	84 70       	andi	r24, 0x04	; 4
    5762:	8b 83       	std	Y+3, r24	; 0x03
				if ( start_bit == 0 ) {
    5764:	8b 81       	ldd	r24, Y+3	; 0x03
    5766:	88 23       	and	r24, r24
    5768:	09 f0       	breq	.+2      	; 0x576c <__vector_7+0x114>
    576a:	3e c0       	rjmp	.+124    	; 0x57e8 <__vector_7+0x190>
					flag_rx_ready      = SU_TRUE;
    576c:	81 e0       	ldi	r24, 0x01	; 1
    576e:	80 93 b5 03 	sts	0x03B5, r24	; 0x8003b5 <flag_rx_ready>
					internal_rx_buffer = 0;
    5772:	10 92 bd 03 	sts	0x03BD, r1	; 0x8003bd <internal_rx_buffer.2>
					timer_rx_ctr       = 4;
    5776:	84 e0       	ldi	r24, 0x04	; 4
    5778:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <timer_rx_ctr.3>
					bits_left_in_rx    = RX_NUM_OF_BITS;
    577c:	88 e0       	ldi	r24, 0x08	; 8
    577e:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <bits_left_in_rx.1>
					rx_mask            = 1;
    5782:	81 e0       	ldi	r24, 0x01	; 1
    5784:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <rx_mask.0>
}
    5788:	2f c0       	rjmp	.+94     	; 0x57e8 <__vector_7+0x190>
				tmp = timer_rx_ctr;
    578a:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <timer_rx_ctr.3>
    578e:	89 83       	std	Y+1, r24	; 0x01
				if ( --tmp == 0 ) { // if ( --timer_rx_ctr == 0 ) {
    5790:	89 81       	ldd	r24, Y+1	; 0x01
    5792:	81 50       	subi	r24, 0x01	; 1
    5794:	89 83       	std	Y+1, r24	; 0x01
    5796:	89 81       	ldd	r24, Y+1	; 0x01
    5798:	88 23       	and	r24, r24
    579a:	19 f5       	brne	.+70     	; 0x57e2 <__vector_7+0x18a>
					tmp = 3;
    579c:	83 e0       	ldi	r24, 0x03	; 3
    579e:	89 83       	std	Y+1, r24	; 0x01
					flag_in = get_rx_pin_status();
    57a0:	89 e2       	ldi	r24, 0x29	; 41
    57a2:	90 e0       	ldi	r25, 0x00	; 0
    57a4:	fc 01       	movw	r30, r24
    57a6:	80 81       	ld	r24, Z
    57a8:	84 70       	andi	r24, 0x04	; 4
    57aa:	8a 83       	std	Y+2, r24	; 0x02
					if ( flag_in ) {
    57ac:	8a 81       	ldd	r24, Y+2	; 0x02
    57ae:	88 23       	and	r24, r24
    57b0:	39 f0       	breq	.+14     	; 0x57c0 <__vector_7+0x168>
						internal_rx_buffer |= rx_mask;
    57b2:	90 91 bd 03 	lds	r25, 0x03BD	; 0x8003bd <internal_rx_buffer.2>
    57b6:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <rx_mask.0>
    57ba:	89 2b       	or	r24, r25
    57bc:	80 93 bd 03 	sts	0x03BD, r24	; 0x8003bd <internal_rx_buffer.2>
					rx_mask <<= 1;
    57c0:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <rx_mask.0>
    57c4:	88 0f       	add	r24, r24
    57c6:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <rx_mask.0>
					if ( --bits_left_in_rx == 0 ) {
    57ca:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <bits_left_in_rx.1>
    57ce:	81 50       	subi	r24, 0x01	; 1
    57d0:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <bits_left_in_rx.1>
    57d4:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <bits_left_in_rx.1>
    57d8:	88 23       	and	r24, r24
    57da:	19 f4       	brne	.+6      	; 0x57e2 <__vector_7+0x18a>
						flag_rx_waiting_for_stop_bit = SU_TRUE;
    57dc:	81 e0       	ldi	r24, 0x01	; 1
    57de:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <flag_rx_waiting_for_stop_bit.4>
				timer_rx_ctr = tmp;
    57e2:	89 81       	ldd	r24, Y+1	; 0x01
    57e4:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <timer_rx_ctr.3>
}
    57e8:	00 00       	nop
    57ea:	0f 90       	pop	r0
    57ec:	0f 90       	pop	r0
    57ee:	0f 90       	pop	r0
    57f0:	df 91       	pop	r29
    57f2:	cf 91       	pop	r28
    57f4:	ff 91       	pop	r31
    57f6:	ef 91       	pop	r30
    57f8:	9f 91       	pop	r25
    57fa:	8f 91       	pop	r24
    57fc:	2f 91       	pop	r18
    57fe:	0f 90       	pop	r0
    5800:	0f be       	out	0x3f, r0	; 63
    5802:	0f 90       	pop	r0
    5804:	1f 90       	pop	r1
    5806:	18 95       	reti

00005808 <io_init>:

static void io_init(void)
{
    5808:	cf 93       	push	r28
    580a:	df 93       	push	r29
    580c:	cd b7       	in	r28, 0x3d	; 61
    580e:	de b7       	in	r29, 0x3e	; 62
	// TX-Pin as output
	SOFTUART_TXDDR |=  ( 1 << SOFTUART_TXBIT );
    5810:	8a e2       	ldi	r24, 0x2A	; 42
    5812:	90 e0       	ldi	r25, 0x00	; 0
    5814:	fc 01       	movw	r30, r24
    5816:	20 81       	ld	r18, Z
    5818:	8a e2       	ldi	r24, 0x2A	; 42
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	28 60       	ori	r18, 0x08	; 8
    581e:	fc 01       	movw	r30, r24
    5820:	20 83       	st	Z, r18
	// RX-Pin as input
	SOFTUART_RXDDR &= ~( 1 << SOFTUART_RXBIT );
    5822:	8a e2       	ldi	r24, 0x2A	; 42
    5824:	90 e0       	ldi	r25, 0x00	; 0
    5826:	fc 01       	movw	r30, r24
    5828:	20 81       	ld	r18, Z
    582a:	8a e2       	ldi	r24, 0x2A	; 42
    582c:	90 e0       	ldi	r25, 0x00	; 0
    582e:	2b 7f       	andi	r18, 0xFB	; 251
    5830:	fc 01       	movw	r30, r24
    5832:	20 83       	st	Z, r18
}
    5834:	00 00       	nop
    5836:	df 91       	pop	r29
    5838:	cf 91       	pop	r28
    583a:	08 95       	ret

0000583c <timer_init>:

static void timer_init(void)
{
    583c:	cf 93       	push	r28
    583e:	df 93       	push	r29
    5840:	0f 92       	push	r0
    5842:	cd b7       	in	r28, 0x3d	; 61
    5844:	de b7       	in	r29, 0x3e	; 62
	unsigned char sreg_tmp;

	sreg_tmp = SREG;
    5846:	8f e5       	ldi	r24, 0x5F	; 95
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	fc 01       	movw	r30, r24
    584c:	80 81       	ld	r24, Z
    584e:	89 83       	std	Y+1, r24	; 0x01
	cli();
    5850:	f8 94       	cli

	SOFTUART_T_COMP_REG = SOFTUART_TIMERTOP;     /* set top */
    5852:	83 eb       	ldi	r24, 0xB3	; 179
    5854:	90 e0       	ldi	r25, 0x00	; 0
    5856:	2f e1       	ldi	r18, 0x1F	; 31
    5858:	fc 01       	movw	r30, r24
    585a:	20 83       	st	Z, r18

	SOFTUART_T_CONTR_REGA = SOFTUART_CTC_MASKA | SOFTUART_PRESC_MASKA;
    585c:	80 eb       	ldi	r24, 0xB0	; 176
    585e:	90 e0       	ldi	r25, 0x00	; 0
    5860:	22 e0       	ldi	r18, 0x02	; 2
    5862:	fc 01       	movw	r30, r24
    5864:	20 83       	st	Z, r18
	SOFTUART_T_CONTR_REGB = SOFTUART_CTC_MASKB | SOFTUART_PRESC_MASKB;
    5866:	81 eb       	ldi	r24, 0xB1	; 177
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	22 e0       	ldi	r18, 0x02	; 2
    586c:	fc 01       	movw	r30, r24
    586e:	20 83       	st	Z, r18

	SOFTUART_T_INTCTL_REG |= SOFTUART_CMPINT_EN_MASK;
    5870:	80 e7       	ldi	r24, 0x70	; 112
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	fc 01       	movw	r30, r24
    5876:	20 81       	ld	r18, Z
    5878:	80 e7       	ldi	r24, 0x70	; 112
    587a:	90 e0       	ldi	r25, 0x00	; 0
    587c:	22 60       	ori	r18, 0x02	; 2
    587e:	fc 01       	movw	r30, r24
    5880:	20 83       	st	Z, r18

	SOFTUART_T_CNT_REG = 0; /* reset counter */
    5882:	82 eb       	ldi	r24, 0xB2	; 178
    5884:	90 e0       	ldi	r25, 0x00	; 0
    5886:	fc 01       	movw	r30, r24
    5888:	10 82       	st	Z, r1

	SREG = sreg_tmp;
    588a:	8f e5       	ldi	r24, 0x5F	; 95
    588c:	90 e0       	ldi	r25, 0x00	; 0
    588e:	29 81       	ldd	r18, Y+1	; 0x01
    5890:	fc 01       	movw	r30, r24
    5892:	20 83       	st	Z, r18
}
    5894:	00 00       	nop
    5896:	0f 90       	pop	r0
    5898:	df 91       	pop	r29
    589a:	cf 91       	pop	r28
    589c:	08 95       	ret

0000589e <softuart_init>:

void softuart_init( void )
{
    589e:	cf 93       	push	r28
    58a0:	df 93       	push	r29
    58a2:	cd b7       	in	r28, 0x3d	; 61
    58a4:	de b7       	in	r29, 0x3e	; 62
	flag_tx_busy  = SU_FALSE;
    58a6:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <flag_tx_busy>
	flag_rx_ready = SU_FALSE;
    58aa:	10 92 b5 03 	sts	0x03B5, r1	; 0x8003b5 <flag_rx_ready>
	flag_rx_off   = SU_FALSE;
    58ae:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <flag_rx_off>

	set_tx_pin_high(); /* mt: set to high to avoid garbage on init */
    58b2:	8b e2       	ldi	r24, 0x2B	; 43
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	fc 01       	movw	r30, r24
    58b8:	20 81       	ld	r18, Z
    58ba:	8b e2       	ldi	r24, 0x2B	; 43
    58bc:	90 e0       	ldi	r25, 0x00	; 0
    58be:	28 60       	ori	r18, 0x08	; 8
    58c0:	fc 01       	movw	r30, r24
    58c2:	20 83       	st	Z, r18

	io_init();
    58c4:	0e 94 04 2c 	call	0x5808	; 0x5808 <io_init>
	timer_init();
    58c8:	0e 94 1e 2c 	call	0x583c	; 0x583c <timer_init>
}
    58cc:	00 00       	nop
    58ce:	df 91       	pop	r29
    58d0:	cf 91       	pop	r28
    58d2:	08 95       	ret

000058d4 <idle>:

static void idle(void)
{
    58d4:	cf 93       	push	r28
    58d6:	df 93       	push	r29
    58d8:	cd b7       	in	r28, 0x3d	; 61
    58da:	de b7       	in	r29, 0x3e	; 62
	// timeout handling goes here
	// - but there is a "softuart_kbhit" in this code...
	// add watchdog-reset here if needed
}
    58dc:	00 00       	nop
    58de:	df 91       	pop	r29
    58e0:	cf 91       	pop	r28
    58e2:	08 95       	ret

000058e4 <softuart_turn_rx_on>:

void softuart_turn_rx_on( void )
{
    58e4:	cf 93       	push	r28
    58e6:	df 93       	push	r29
    58e8:	cd b7       	in	r28, 0x3d	; 61
    58ea:	de b7       	in	r29, 0x3e	; 62
	flag_rx_off = SU_FALSE;
    58ec:	10 92 b4 03 	sts	0x03B4, r1	; 0x8003b4 <flag_rx_off>
}
    58f0:	00 00       	nop
    58f2:	df 91       	pop	r29
    58f4:	cf 91       	pop	r28
    58f6:	08 95       	ret

000058f8 <softuart_turn_rx_off>:

void softuart_turn_rx_off( void )
{
    58f8:	cf 93       	push	r28
    58fa:	df 93       	push	r29
    58fc:	cd b7       	in	r28, 0x3d	; 61
    58fe:	de b7       	in	r29, 0x3e	; 62
	flag_rx_off = SU_TRUE;
    5900:	81 e0       	ldi	r24, 0x01	; 1
    5902:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <flag_rx_off>
}
    5906:	00 00       	nop
    5908:	df 91       	pop	r29
    590a:	cf 91       	pop	r28
    590c:	08 95       	ret

0000590e <softuart_getchar>:

char softuart_getchar( void )
{
    590e:	cf 93       	push	r28
    5910:	df 93       	push	r29
    5912:	0f 92       	push	r0
    5914:	cd b7       	in	r28, 0x3d	; 61
    5916:	de b7       	in	r29, 0x3e	; 62
	char ch;

	while ( qout == qin ) {
    5918:	02 c0       	rjmp	.+4      	; 0x591e <softuart_getchar+0x10>
		idle();
    591a:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <idle>
	while ( qout == qin ) {
    591e:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <qout>
    5922:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <qin>
    5926:	98 17       	cp	r25, r24
    5928:	c1 f3       	breq	.-16     	; 0x591a <softuart_getchar+0xc>
	}
	ch = inbuf[qout];
    592a:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <qout>
    592e:	88 2f       	mov	r24, r24
    5930:	90 e0       	ldi	r25, 0x00	; 0
    5932:	8e 56       	subi	r24, 0x6E	; 110
    5934:	9c 4f       	sbci	r25, 0xFC	; 252
    5936:	fc 01       	movw	r30, r24
    5938:	80 81       	ld	r24, Z
    593a:	89 83       	std	Y+1, r24	; 0x01
	if ( ++qout >= SOFTUART_IN_BUF_SIZE ) {
    593c:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <qout>
    5940:	8f 5f       	subi	r24, 0xFF	; 255
    5942:	80 93 b3 03 	sts	0x03B3, r24	; 0x8003b3 <qout>
    5946:	80 91 b3 03 	lds	r24, 0x03B3	; 0x8003b3 <qout>
    594a:	80 32       	cpi	r24, 0x20	; 32
    594c:	10 f0       	brcs	.+4      	; 0x5952 <softuart_getchar+0x44>
		qout = 0;
    594e:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <qout>
	}

	return( ch );
    5952:	89 81       	ldd	r24, Y+1	; 0x01
}
    5954:	0f 90       	pop	r0
    5956:	df 91       	pop	r29
    5958:	cf 91       	pop	r28
    595a:	08 95       	ret

0000595c <softuart_kbhit>:

unsigned char softuart_kbhit( void )
{
    595c:	cf 93       	push	r28
    595e:	df 93       	push	r29
    5960:	cd b7       	in	r28, 0x3d	; 61
    5962:	de b7       	in	r29, 0x3e	; 62
	return( qin != qout );
    5964:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <qin>
    5968:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <qout>
    596c:	81 e0       	ldi	r24, 0x01	; 1
    596e:	29 17       	cp	r18, r25
    5970:	09 f4       	brne	.+2      	; 0x5974 <softuart_kbhit+0x18>
    5972:	80 e0       	ldi	r24, 0x00	; 0
}
    5974:	df 91       	pop	r29
    5976:	cf 91       	pop	r28
    5978:	08 95       	ret

0000597a <softuart_flush_input_buffer>:

void softuart_flush_input_buffer( void )
{
    597a:	cf 93       	push	r28
    597c:	df 93       	push	r29
    597e:	cd b7       	in	r28, 0x3d	; 61
    5980:	de b7       	in	r29, 0x3e	; 62
	qin  = 0;
    5982:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <qin>
	qout = 0;
    5986:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <qout>
}
    598a:	00 00       	nop
    598c:	df 91       	pop	r29
    598e:	cf 91       	pop	r28
    5990:	08 95       	ret

00005992 <softuart_transmit_busy>:

unsigned char softuart_transmit_busy( void )
{
    5992:	cf 93       	push	r28
    5994:	df 93       	push	r29
    5996:	cd b7       	in	r28, 0x3d	; 61
    5998:	de b7       	in	r29, 0x3e	; 62
	return ( flag_tx_busy == SU_TRUE ) ? 1 : 0;
    599a:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <flag_tx_busy>
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	91 30       	cpi	r25, 0x01	; 1
    59a2:	09 f0       	breq	.+2      	; 0x59a6 <softuart_transmit_busy+0x14>
    59a4:	80 e0       	ldi	r24, 0x00	; 0
}
    59a6:	df 91       	pop	r29
    59a8:	cf 91       	pop	r28
    59aa:	08 95       	ret

000059ac <softuart_putchar>:

void softuart_putchar(  char ch )
{
    59ac:	cf 93       	push	r28
    59ae:	df 93       	push	r29
    59b0:	0f 92       	push	r0
    59b2:	cd b7       	in	r28, 0x3d	; 61
    59b4:	de b7       	in	r29, 0x3e	; 62
    59b6:	89 83       	std	Y+1, r24	; 0x01
	while ( flag_tx_busy == SU_TRUE ) {
    59b8:	00 00       	nop
    59ba:	80 91 b6 03 	lds	r24, 0x03B6	; 0x8003b6 <flag_tx_busy>
    59be:	81 30       	cpi	r24, 0x01	; 1
    59c0:	e1 f3       	breq	.-8      	; 0x59ba <softuart_putchar+0xe>
		; // wait for transmitter ready
		  // add watchdog-reset here if needed;
	}

	// invoke_UART_transmit
	timer_tx_ctr       = 3;
    59c2:	83 e0       	ldi	r24, 0x03	; 3
    59c4:	80 93 b7 03 	sts	0x03B7, r24	; 0x8003b7 <timer_tx_ctr>
	bits_left_in_tx    = TX_NUM_OF_BITS;
    59c8:	8a e0       	ldi	r24, 0x0A	; 10
    59ca:	80 93 b8 03 	sts	0x03B8, r24	; 0x8003b8 <bits_left_in_tx>
	internal_tx_buffer = ( ch << 1 ) | 0x200;
    59ce:	89 81       	ldd	r24, Y+1	; 0x01
    59d0:	08 2e       	mov	r0, r24
    59d2:	00 0c       	add	r0, r0
    59d4:	99 0b       	sbc	r25, r25
    59d6:	88 0f       	add	r24, r24
    59d8:	99 1f       	adc	r25, r25
    59da:	92 60       	ori	r25, 0x02	; 2
    59dc:	90 93 ba 03 	sts	0x03BA, r25	; 0x8003ba <internal_tx_buffer+0x1>
    59e0:	80 93 b9 03 	sts	0x03B9, r24	; 0x8003b9 <internal_tx_buffer>
	flag_tx_busy       = SU_TRUE;
    59e4:	81 e0       	ldi	r24, 0x01	; 1
    59e6:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <flag_tx_busy>
}
    59ea:	00 00       	nop
    59ec:	0f 90       	pop	r0
    59ee:	df 91       	pop	r29
    59f0:	cf 91       	pop	r28
    59f2:	08 95       	ret

000059f4 <softuart_puts>:

void softuart_puts( char *s )
{
    59f4:	cf 93       	push	r28
    59f6:	df 93       	push	r29
    59f8:	00 d0       	rcall	.+0      	; 0x59fa <softuart_puts+0x6>
    59fa:	cd b7       	in	r28, 0x3d	; 61
    59fc:	de b7       	in	r29, 0x3e	; 62
    59fe:	9a 83       	std	Y+2, r25	; 0x02
    5a00:	89 83       	std	Y+1, r24	; 0x01
	while ( *s ) {
    5a02:	0b c0       	rjmp	.+22     	; 0x5a1a <softuart_puts+0x26>
		softuart_putchar( *s++ );
    5a04:	89 81       	ldd	r24, Y+1	; 0x01
    5a06:	9a 81       	ldd	r25, Y+2	; 0x02
    5a08:	9c 01       	movw	r18, r24
    5a0a:	2f 5f       	subi	r18, 0xFF	; 255
    5a0c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a0e:	3a 83       	std	Y+2, r19	; 0x02
    5a10:	29 83       	std	Y+1, r18	; 0x01
    5a12:	fc 01       	movw	r30, r24
    5a14:	80 81       	ld	r24, Z
    5a16:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <softuart_putchar>
	while ( *s ) {
    5a1a:	89 81       	ldd	r24, Y+1	; 0x01
    5a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a1e:	fc 01       	movw	r30, r24
    5a20:	80 81       	ld	r24, Z
    5a22:	88 23       	and	r24, r24
    5a24:	79 f7       	brne	.-34     	; 0x5a04 <softuart_puts+0x10>
	}
}
    5a26:	00 00       	nop
    5a28:	00 00       	nop
    5a2a:	0f 90       	pop	r0
    5a2c:	0f 90       	pop	r0
    5a2e:	df 91       	pop	r29
    5a30:	cf 91       	pop	r28
    5a32:	08 95       	ret

00005a34 <softuart_puts_ln>:
void softuart_puts_ln(  char *s )
{
    5a34:	cf 93       	push	r28
    5a36:	df 93       	push	r29
    5a38:	00 d0       	rcall	.+0      	; 0x5a3a <softuart_puts_ln+0x6>
    5a3a:	cd b7       	in	r28, 0x3d	; 61
    5a3c:	de b7       	in	r29, 0x3e	; 62
    5a3e:	9a 83       	std	Y+2, r25	; 0x02
    5a40:	89 83       	std	Y+1, r24	; 0x01
	while ( *s ) {
    5a42:	0b c0       	rjmp	.+22     	; 0x5a5a <softuart_puts_ln+0x26>
		softuart_putchar( *s++ );
    5a44:	89 81       	ldd	r24, Y+1	; 0x01
    5a46:	9a 81       	ldd	r25, Y+2	; 0x02
    5a48:	9c 01       	movw	r18, r24
    5a4a:	2f 5f       	subi	r18, 0xFF	; 255
    5a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a4e:	3a 83       	std	Y+2, r19	; 0x02
    5a50:	29 83       	std	Y+1, r18	; 0x01
    5a52:	fc 01       	movw	r30, r24
    5a54:	80 81       	ld	r24, Z
    5a56:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <softuart_putchar>
	while ( *s ) {
    5a5a:	89 81       	ldd	r24, Y+1	; 0x01
    5a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    5a5e:	fc 01       	movw	r30, r24
    5a60:	80 81       	ld	r24, Z
    5a62:	88 23       	and	r24, r24
    5a64:	79 f7       	brne	.-34     	; 0x5a44 <softuart_puts_ln+0x10>
	}
	softuart_puts("\r\n" );
    5a66:	87 e9       	ldi	r24, 0x97	; 151
    5a68:	91 e0       	ldi	r25, 0x01	; 1
    5a6a:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <softuart_puts>
}
    5a6e:	00 00       	nop
    5a70:	0f 90       	pop	r0
    5a72:	0f 90       	pop	r0
    5a74:	df 91       	pop	r29
    5a76:	cf 91       	pop	r28
    5a78:	08 95       	ret

00005a7a <softuart_puts_p>:
void softuart_puts_p( const char *prg_s )
{
    5a7a:	cf 93       	push	r28
    5a7c:	df 93       	push	r29
    5a7e:	00 d0       	rcall	.+0      	; 0x5a80 <softuart_puts_p+0x6>
    5a80:	00 d0       	rcall	.+0      	; 0x5a82 <softuart_puts_p+0x8>
    5a82:	00 d0       	rcall	.+0      	; 0x5a84 <softuart_puts_p+0xa>
    5a84:	cd b7       	in	r28, 0x3d	; 61
    5a86:	de b7       	in	r29, 0x3e	; 62
    5a88:	9e 83       	std	Y+6, r25	; 0x06
    5a8a:	8d 83       	std	Y+5, r24	; 0x05
	char c;

	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
    5a8c:	03 c0       	rjmp	.+6      	; 0x5a94 <softuart_puts_p+0x1a>
		softuart_putchar(c);
    5a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    5a90:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <softuart_putchar>
	while ( ( c = pgm_read_byte( prg_s++ ) ) ) {
    5a94:	8d 81       	ldd	r24, Y+5	; 0x05
    5a96:	9e 81       	ldd	r25, Y+6	; 0x06
    5a98:	9c 01       	movw	r18, r24
    5a9a:	2f 5f       	subi	r18, 0xFF	; 255
    5a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    5a9e:	3e 83       	std	Y+6, r19	; 0x06
    5aa0:	2d 83       	std	Y+5, r18	; 0x05
    5aa2:	9a 83       	std	Y+2, r25	; 0x02
    5aa4:	89 83       	std	Y+1, r24	; 0x01
    5aa6:	89 81       	ldd	r24, Y+1	; 0x01
    5aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    5aaa:	fc 01       	movw	r30, r24
    5aac:	84 91       	lpm	r24, Z
    5aae:	8b 83       	std	Y+3, r24	; 0x03
    5ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    5ab2:	8c 83       	std	Y+4, r24	; 0x04
    5ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    5ab6:	88 23       	and	r24, r24
    5ab8:	51 f7       	brne	.-44     	; 0x5a8e <softuart_puts_p+0x14>
	}
	softuart_puts( "\r\n" );
    5aba:	87 e9       	ldi	r24, 0x97	; 151
    5abc:	91 e0       	ldi	r25, 0x01	; 1
    5abe:	0e 94 fa 2c 	call	0x59f4	; 0x59f4 <softuart_puts>
}
    5ac2:	00 00       	nop
    5ac4:	26 96       	adiw	r28, 0x06	; 6
    5ac6:	0f b6       	in	r0, 0x3f	; 63
    5ac8:	f8 94       	cli
    5aca:	de bf       	out	0x3e, r29	; 62
    5acc:	0f be       	out	0x3f, r0	; 63
    5ace:	cd bf       	out	0x3d, r28	; 61
    5ad0:	df 91       	pop	r29
    5ad2:	cf 91       	pop	r28
    5ad4:	08 95       	ret

00005ad6 <timer1_init>:

//*******************************************************************************************************************

// период переполнения 10 мс
void timer1_init(void)
{
    5ad6:	cf 93       	push	r28
    5ad8:	df 93       	push	r29
    5ada:	cd b7       	in	r28, 0x3d	; 61
    5adc:	de b7       	in	r29, 0x3e	; 62
    cli(); // stop interrupts
    5ade:	f8 94       	cli
    TCCR1A = 0;
    5ae0:	80 e8       	ldi	r24, 0x80	; 128
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	fc 01       	movw	r30, r24
    5ae6:	10 82       	st	Z, r1
    TCCR1B = 0;
    5ae8:	81 e8       	ldi	r24, 0x81	; 129
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	fc 01       	movw	r30, r24
    5aee:	10 82       	st	Z, r1
    TCNT1 = 0;
    5af0:	84 e8       	ldi	r24, 0x84	; 132
    5af2:	90 e0       	ldi	r25, 0x00	; 0
    5af4:	fc 01       	movw	r30, r24
    5af6:	11 82       	std	Z+1, r1	; 0x01
    5af8:	10 82       	st	Z, r1

    // 100 Hz (7372800/((71+1)*1024))
    OCR1A = 71;
    5afa:	88 e8       	ldi	r24, 0x88	; 136
    5afc:	90 e0       	ldi	r25, 0x00	; 0
    5afe:	27 e4       	ldi	r18, 0x47	; 71
    5b00:	30 e0       	ldi	r19, 0x00	; 0
    5b02:	fc 01       	movw	r30, r24
    5b04:	31 83       	std	Z+1, r19	; 0x01
    5b06:	20 83       	st	Z, r18
    // CTC
    TCCR1B |= (1 << WGM12);
    5b08:	81 e8       	ldi	r24, 0x81	; 129
    5b0a:	90 e0       	ldi	r25, 0x00	; 0
    5b0c:	fc 01       	movw	r30, r24
    5b0e:	20 81       	ld	r18, Z
    5b10:	81 e8       	ldi	r24, 0x81	; 129
    5b12:	90 e0       	ldi	r25, 0x00	; 0
    5b14:	28 60       	ori	r18, 0x08	; 8
    5b16:	fc 01       	movw	r30, r24
    5b18:	20 83       	st	Z, r18
    // Prescaler 1024
    TCCR1B |= (1 << CS12) | (1 << CS10);
    5b1a:	81 e8       	ldi	r24, 0x81	; 129
    5b1c:	90 e0       	ldi	r25, 0x00	; 0
    5b1e:	fc 01       	movw	r30, r24
    5b20:	20 81       	ld	r18, Z
    5b22:	81 e8       	ldi	r24, 0x81	; 129
    5b24:	90 e0       	ldi	r25, 0x00	; 0
    5b26:	25 60       	ori	r18, 0x05	; 5
    5b28:	fc 01       	movw	r30, r24
    5b2a:	20 83       	st	Z, r18
    // Output Compare Match A Interrupt Enable
    TIMSK1 |= (1 << OCIE1A);
    5b2c:	8f e6       	ldi	r24, 0x6F	; 111
    5b2e:	90 e0       	ldi	r25, 0x00	; 0
    5b30:	fc 01       	movw	r30, r24
    5b32:	20 81       	ld	r18, Z
    5b34:	8f e6       	ldi	r24, 0x6F	; 111
    5b36:	90 e0       	ldi	r25, 0x00	; 0
    5b38:	22 60       	ori	r18, 0x02	; 2
    5b3a:	fc 01       	movw	r30, r24
    5b3c:	20 83       	st	Z, r18
}
    5b3e:	00 00       	nop
    5b40:	df 91       	pop	r29
    5b42:	cf 91       	pop	r28
    5b44:	08 95       	ret

00005b46 <__vector_11>:

//*******************************************************************************************************************

// прерывание вызывается с периодом 10 мс
ISR(TIMER1_COMPA_vect)
{
    5b46:	1f 92       	push	r1
    5b48:	0f 92       	push	r0
    5b4a:	0f b6       	in	r0, 0x3f	; 63
    5b4c:	0f 92       	push	r0
    5b4e:	11 24       	eor	r1, r1
    5b50:	2f 93       	push	r18
    5b52:	3f 93       	push	r19
    5b54:	4f 93       	push	r20
    5b56:	5f 93       	push	r21
    5b58:	6f 93       	push	r22
    5b5a:	7f 93       	push	r23
    5b5c:	8f 93       	push	r24
    5b5e:	9f 93       	push	r25
    5b60:	af 93       	push	r26
    5b62:	bf 93       	push	r27
    5b64:	ef 93       	push	r30
    5b66:	ff 93       	push	r31
    5b68:	cf 93       	push	r28
    5b6a:	df 93       	push	r29
    5b6c:	cd b7       	in	r28, 0x3d	; 61
    5b6e:	de b7       	in	r29, 0x3e	; 62
    static uint8_t i=0;
    static uint8_t j=0;

    time_ms+=10;
    5b70:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <time_ms>
    5b74:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <time_ms+0x1>
    5b78:	a0 91 c2 03 	lds	r26, 0x03C2	; 0x8003c2 <time_ms+0x2>
    5b7c:	b0 91 c3 03 	lds	r27, 0x03C3	; 0x8003c3 <time_ms+0x3>
    5b80:	0a 96       	adiw	r24, 0x0a	; 10
    5b82:	a1 1d       	adc	r26, r1
    5b84:	b1 1d       	adc	r27, r1
    5b86:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <time_ms>
    5b8a:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <time_ms+0x1>
    5b8e:	a0 93 c2 03 	sts	0x03C2, r26	; 0x8003c2 <time_ms+0x2>
    5b92:	b0 93 c3 03 	sts	0x03C3, r27	; 0x8003c3 <time_ms+0x3>
    i++;
    5b96:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <i.1>
    5b9a:	8f 5f       	subi	r24, 0xFF	; 255
    5b9c:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <i.1>
    check_volt_input();
    5ba0:	0e 94 59 24 	call	0x48b2	; 0x48b2 <check_volt_input>
    if(i>=100) // 1 секунда
    5ba4:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <i.1>
    5ba8:	84 36       	cpi	r24, 0x64	; 100
    5baa:	08 f4       	brcc	.+2      	; 0x5bae <__vector_11+0x68>
    5bac:	64 c0       	rjmp	.+200    	; 0x5c76 <__vector_11+0x130>
    {
        i=0;
    5bae:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <i.1>
        time_s++;
    5bb2:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <time_s>
    5bb6:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <time_s+0x1>
    5bba:	a0 91 c6 03 	lds	r26, 0x03C6	; 0x8003c6 <time_s+0x2>
    5bbe:	b0 91 c7 03 	lds	r27, 0x03C7	; 0x8003c7 <time_s+0x3>
    5bc2:	01 96       	adiw	r24, 0x01	; 1
    5bc4:	a1 1d       	adc	r26, r1
    5bc6:	b1 1d       	adc	r27, r1
    5bc8:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <time_s>
    5bcc:	90 93 c5 03 	sts	0x03C5, r25	; 0x8003c5 <time_s+0x1>
    5bd0:	a0 93 c6 03 	sts	0x03C6, r26	; 0x8003c6 <time_s+0x2>
    5bd4:	b0 93 c7 03 	sts	0x03C7, r27	; 0x8003c7 <time_s+0x3>
        time_from_start_s++;
    5bd8:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <time_from_start_s>
    5bdc:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <time_from_start_s+0x1>
    5be0:	a0 91 d0 03 	lds	r26, 0x03D0	; 0x8003d0 <time_from_start_s+0x2>
    5be4:	b0 91 d1 03 	lds	r27, 0x03D1	; 0x8003d1 <time_from_start_s+0x3>
    5be8:	01 96       	adiw	r24, 0x01	; 1
    5bea:	a1 1d       	adc	r26, r1
    5bec:	b1 1d       	adc	r27, r1
    5bee:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <time_from_start_s>
    5bf2:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <time_from_start_s+0x1>
    5bf6:	a0 93 d0 03 	sts	0x03D0, r26	; 0x8003d0 <time_from_start_s+0x2>
    5bfa:	b0 93 d1 03 	sts	0x03D1, r27	; 0x8003d1 <time_from_start_s+0x3>
        soft_wdt++;
    5bfe:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <soft_wdt>
    5c02:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <soft_wdt+0x1>
    5c06:	01 96       	adiw	r24, 0x01	; 1
    5c08:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <soft_wdt+0x1>
    5c0c:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <soft_wdt>
        j++;
    5c10:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <j.0>
    5c14:	8f 5f       	subi	r24, 0xFF	; 255
    5c16:	80 93 d3 03 	sts	0x03D3, r24	; 0x8003d3 <j.0>
        DigitalLevelToggle(RED_LED);
    5c1a:	85 e2       	ldi	r24, 0x25	; 37
    5c1c:	90 e0       	ldi	r25, 0x00	; 0
    5c1e:	fc 01       	movw	r30, r24
    5c20:	30 81       	ld	r19, Z
    5c22:	85 e2       	ldi	r24, 0x25	; 37
    5c24:	90 e0       	ldi	r25, 0x00	; 0
    5c26:	20 e2       	ldi	r18, 0x20	; 32
    5c28:	23 27       	eor	r18, r19
    5c2a:	fc 01       	movw	r30, r24
    5c2c:	20 83       	st	Z, r18
        check_power();
    5c2e:	0e 94 a1 06 	call	0xd42	; 0xd42 <check_power>
        if(j>=60)
    5c32:	80 91 d3 03 	lds	r24, 0x03D3	; 0x8003d3 <j.0>
    5c36:	8c 33       	cpi	r24, 0x3C	; 60
    5c38:	a8 f0       	brcs	.+42     	; 0x5c64 <__vector_11+0x11e>
        {
            j=0;
    5c3a:	10 92 d3 03 	sts	0x03D3, r1	; 0x8003d3 <j.0>
            time_m++;
    5c3e:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <time_m>
    5c42:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <time_m+0x1>
    5c46:	a0 91 ca 03 	lds	r26, 0x03CA	; 0x8003ca <time_m+0x2>
    5c4a:	b0 91 cb 03 	lds	r27, 0x03CB	; 0x8003cb <time_m+0x3>
    5c4e:	01 96       	adiw	r24, 0x01	; 1
    5c50:	a1 1d       	adc	r26, r1
    5c52:	b1 1d       	adc	r27, r1
    5c54:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <time_m>
    5c58:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <time_m+0x1>
    5c5c:	a0 93 ca 03 	sts	0x03CA, r26	; 0x8003ca <time_m+0x2>
    5c60:	b0 93 cb 03 	sts	0x03CB, r27	; 0x8003cb <time_m+0x3>
        }
        if(soft_wdt > 120) //  sec
    5c64:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <soft_wdt>
    5c68:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <soft_wdt+0x1>
    5c6c:	89 37       	cpi	r24, 0x79	; 121
    5c6e:	91 05       	cpc	r25, r1
    5c70:	10 f0       	brcs	.+4      	; 0x5c76 <__vector_11+0x130>
            reset_mcu();
    5c72:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <reset_mcu>
    }
    _WDT_RESET(); // сброс сторожевого таймера
    5c76:	a8 95       	wdr
}
    5c78:	00 00       	nop
    5c7a:	df 91       	pop	r29
    5c7c:	cf 91       	pop	r28
    5c7e:	ff 91       	pop	r31
    5c80:	ef 91       	pop	r30
    5c82:	bf 91       	pop	r27
    5c84:	af 91       	pop	r26
    5c86:	9f 91       	pop	r25
    5c88:	8f 91       	pop	r24
    5c8a:	7f 91       	pop	r23
    5c8c:	6f 91       	pop	r22
    5c8e:	5f 91       	pop	r21
    5c90:	4f 91       	pop	r20
    5c92:	3f 91       	pop	r19
    5c94:	2f 91       	pop	r18
    5c96:	0f 90       	pop	r0
    5c98:	0f be       	out	0x3f, r0	; 63
    5c9a:	0f 90       	pop	r0
    5c9c:	1f 90       	pop	r1
    5c9e:	18 95       	reti

00005ca0 <get_time_ms>:

//*******************************************************************************************************************

uint32_t get_time_ms(void)
{
    5ca0:	cf 93       	push	r28
    5ca2:	df 93       	push	r29
    5ca4:	cd b7       	in	r28, 0x3d	; 61
    5ca6:	de b7       	in	r29, 0x3e	; 62
    5ca8:	29 97       	sbiw	r28, 0x09	; 9
    5caa:	0f b6       	in	r0, 0x3f	; 63
    5cac:	f8 94       	cli
    5cae:	de bf       	out	0x3e, r29	; 62
    5cb0:	0f be       	out	0x3f, r0	; 63
    5cb2:	cd bf       	out	0x3d, r28	; 61
    return get_val(time_ms);
    5cb4:	8f e5       	ldi	r24, 0x5F	; 95
    5cb6:	90 e0       	ldi	r25, 0x00	; 0
    5cb8:	fc 01       	movw	r30, r24
    5cba:	80 81       	ld	r24, Z
    5cbc:	89 83       	std	Y+1, r24	; 0x01
    5cbe:	f8 94       	cli
    5cc0:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <time_ms>
    5cc4:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <time_ms+0x1>
    5cc8:	a0 91 c2 03 	lds	r26, 0x03C2	; 0x8003c2 <time_ms+0x2>
    5ccc:	b0 91 c3 03 	lds	r27, 0x03C3	; 0x8003c3 <time_ms+0x3>
    5cd0:	8a 83       	std	Y+2, r24	; 0x02
    5cd2:	9b 83       	std	Y+3, r25	; 0x03
    5cd4:	ac 83       	std	Y+4, r26	; 0x04
    5cd6:	bd 83       	std	Y+5, r27	; 0x05
    5cd8:	8f e5       	ldi	r24, 0x5F	; 95
    5cda:	90 e0       	ldi	r25, 0x00	; 0
    5cdc:	29 81       	ldd	r18, Y+1	; 0x01
    5cde:	fc 01       	movw	r30, r24
    5ce0:	20 83       	st	Z, r18
    5ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    5ce6:	ac 81       	ldd	r26, Y+4	; 0x04
    5ce8:	bd 81       	ldd	r27, Y+5	; 0x05
    5cea:	8e 83       	std	Y+6, r24	; 0x06
    5cec:	9f 83       	std	Y+7, r25	; 0x07
    5cee:	a8 87       	std	Y+8, r26	; 0x08
    5cf0:	b9 87       	std	Y+9, r27	; 0x09
}
    5cf2:	6e 81       	ldd	r22, Y+6	; 0x06
    5cf4:	7f 81       	ldd	r23, Y+7	; 0x07
    5cf6:	88 85       	ldd	r24, Y+8	; 0x08
    5cf8:	99 85       	ldd	r25, Y+9	; 0x09
    5cfa:	29 96       	adiw	r28, 0x09	; 9
    5cfc:	0f b6       	in	r0, 0x3f	; 63
    5cfe:	f8 94       	cli
    5d00:	de bf       	out	0x3e, r29	; 62
    5d02:	0f be       	out	0x3f, r0	; 63
    5d04:	cd bf       	out	0x3d, r28	; 61
    5d06:	df 91       	pop	r29
    5d08:	cf 91       	pop	r28
    5d0a:	08 95       	ret

00005d0c <get_time_s>:
//*******************************************************************************************************************

uint32_t get_time_s(void)
{
    5d0c:	cf 93       	push	r28
    5d0e:	df 93       	push	r29
    5d10:	cd b7       	in	r28, 0x3d	; 61
    5d12:	de b7       	in	r29, 0x3e	; 62
    5d14:	29 97       	sbiw	r28, 0x09	; 9
    5d16:	0f b6       	in	r0, 0x3f	; 63
    5d18:	f8 94       	cli
    5d1a:	de bf       	out	0x3e, r29	; 62
    5d1c:	0f be       	out	0x3f, r0	; 63
    5d1e:	cd bf       	out	0x3d, r28	; 61
    return get_val(time_s);
    5d20:	8f e5       	ldi	r24, 0x5F	; 95
    5d22:	90 e0       	ldi	r25, 0x00	; 0
    5d24:	fc 01       	movw	r30, r24
    5d26:	80 81       	ld	r24, Z
    5d28:	89 83       	std	Y+1, r24	; 0x01
    5d2a:	f8 94       	cli
    5d2c:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <time_s>
    5d30:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <time_s+0x1>
    5d34:	a0 91 c6 03 	lds	r26, 0x03C6	; 0x8003c6 <time_s+0x2>
    5d38:	b0 91 c7 03 	lds	r27, 0x03C7	; 0x8003c7 <time_s+0x3>
    5d3c:	8a 83       	std	Y+2, r24	; 0x02
    5d3e:	9b 83       	std	Y+3, r25	; 0x03
    5d40:	ac 83       	std	Y+4, r26	; 0x04
    5d42:	bd 83       	std	Y+5, r27	; 0x05
    5d44:	8f e5       	ldi	r24, 0x5F	; 95
    5d46:	90 e0       	ldi	r25, 0x00	; 0
    5d48:	29 81       	ldd	r18, Y+1	; 0x01
    5d4a:	fc 01       	movw	r30, r24
    5d4c:	20 83       	st	Z, r18
    5d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d50:	9b 81       	ldd	r25, Y+3	; 0x03
    5d52:	ac 81       	ldd	r26, Y+4	; 0x04
    5d54:	bd 81       	ldd	r27, Y+5	; 0x05
    5d56:	8e 83       	std	Y+6, r24	; 0x06
    5d58:	9f 83       	std	Y+7, r25	; 0x07
    5d5a:	a8 87       	std	Y+8, r26	; 0x08
    5d5c:	b9 87       	std	Y+9, r27	; 0x09
}
    5d5e:	6e 81       	ldd	r22, Y+6	; 0x06
    5d60:	7f 81       	ldd	r23, Y+7	; 0x07
    5d62:	88 85       	ldd	r24, Y+8	; 0x08
    5d64:	99 85       	ldd	r25, Y+9	; 0x09
    5d66:	29 96       	adiw	r28, 0x09	; 9
    5d68:	0f b6       	in	r0, 0x3f	; 63
    5d6a:	f8 94       	cli
    5d6c:	de bf       	out	0x3e, r29	; 62
    5d6e:	0f be       	out	0x3f, r0	; 63
    5d70:	cd bf       	out	0x3d, r28	; 61
    5d72:	df 91       	pop	r29
    5d74:	cf 91       	pop	r28
    5d76:	08 95       	ret

00005d78 <get_time_m>:

//*******************************************************************************************************************

uint32_t get_time_m(void)
{
    5d78:	cf 93       	push	r28
    5d7a:	df 93       	push	r29
    5d7c:	cd b7       	in	r28, 0x3d	; 61
    5d7e:	de b7       	in	r29, 0x3e	; 62
    5d80:	29 97       	sbiw	r28, 0x09	; 9
    5d82:	0f b6       	in	r0, 0x3f	; 63
    5d84:	f8 94       	cli
    5d86:	de bf       	out	0x3e, r29	; 62
    5d88:	0f be       	out	0x3f, r0	; 63
    5d8a:	cd bf       	out	0x3d, r28	; 61
    return get_val(time_m);
    5d8c:	8f e5       	ldi	r24, 0x5F	; 95
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	fc 01       	movw	r30, r24
    5d92:	80 81       	ld	r24, Z
    5d94:	89 83       	std	Y+1, r24	; 0x01
    5d96:	f8 94       	cli
    5d98:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <time_m>
    5d9c:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <time_m+0x1>
    5da0:	a0 91 ca 03 	lds	r26, 0x03CA	; 0x8003ca <time_m+0x2>
    5da4:	b0 91 cb 03 	lds	r27, 0x03CB	; 0x8003cb <time_m+0x3>
    5da8:	8a 83       	std	Y+2, r24	; 0x02
    5daa:	9b 83       	std	Y+3, r25	; 0x03
    5dac:	ac 83       	std	Y+4, r26	; 0x04
    5dae:	bd 83       	std	Y+5, r27	; 0x05
    5db0:	8f e5       	ldi	r24, 0x5F	; 95
    5db2:	90 e0       	ldi	r25, 0x00	; 0
    5db4:	29 81       	ldd	r18, Y+1	; 0x01
    5db6:	fc 01       	movw	r30, r24
    5db8:	20 83       	st	Z, r18
    5dba:	8a 81       	ldd	r24, Y+2	; 0x02
    5dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    5dbe:	ac 81       	ldd	r26, Y+4	; 0x04
    5dc0:	bd 81       	ldd	r27, Y+5	; 0x05
    5dc2:	8e 83       	std	Y+6, r24	; 0x06
    5dc4:	9f 83       	std	Y+7, r25	; 0x07
    5dc6:	a8 87       	std	Y+8, r26	; 0x08
    5dc8:	b9 87       	std	Y+9, r27	; 0x09
}
    5dca:	6e 81       	ldd	r22, Y+6	; 0x06
    5dcc:	7f 81       	ldd	r23, Y+7	; 0x07
    5dce:	88 85       	ldd	r24, Y+8	; 0x08
    5dd0:	99 85       	ldd	r25, Y+9	; 0x09
    5dd2:	29 96       	adiw	r28, 0x09	; 9
    5dd4:	0f b6       	in	r0, 0x3f	; 63
    5dd6:	f8 94       	cli
    5dd8:	de bf       	out	0x3e, r29	; 62
    5dda:	0f be       	out	0x3f, r0	; 63
    5ddc:	cd bf       	out	0x3d, r28	; 61
    5dde:	df 91       	pop	r29
    5de0:	cf 91       	pop	r28
    5de2:	08 95       	ret

00005de4 <reset_soft_wdt>:

//*******************************************************************************************************************

void reset_soft_wdt(void)
{
    5de4:	cf 93       	push	r28
    5de6:	df 93       	push	r29
    5de8:	0f 92       	push	r0
    5dea:	cd b7       	in	r28, 0x3d	; 61
    5dec:	de b7       	in	r29, 0x3e	; 62
    set_val(soft_wdt, 0);
    5dee:	8f e5       	ldi	r24, 0x5F	; 95
    5df0:	90 e0       	ldi	r25, 0x00	; 0
    5df2:	fc 01       	movw	r30, r24
    5df4:	80 81       	ld	r24, Z
    5df6:	89 83       	std	Y+1, r24	; 0x01
    5df8:	f8 94       	cli
    5dfa:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <soft_wdt+0x1>
    5dfe:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <soft_wdt>
    5e02:	8f e5       	ldi	r24, 0x5F	; 95
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	29 81       	ldd	r18, Y+1	; 0x01
    5e08:	fc 01       	movw	r30, r24
    5e0a:	20 83       	st	Z, r18
}
    5e0c:	00 00       	nop
    5e0e:	0f 90       	pop	r0
    5e10:	df 91       	pop	r29
    5e12:	cf 91       	pop	r28
    5e14:	08 95       	ret

00005e16 <delay_ms>:

//*******************************************************************************************************************
// задержка на х милисекунд
void delay_ms(uint16_t delay)
{
    5e16:	cf 93       	push	r28
    5e18:	df 93       	push	r29
    5e1a:	cd b7       	in	r28, 0x3d	; 61
    5e1c:	de b7       	in	r29, 0x3e	; 62
    5e1e:	2e 97       	sbiw	r28, 0x0e	; 14
    5e20:	0f b6       	in	r0, 0x3f	; 63
    5e22:	f8 94       	cli
    5e24:	de bf       	out	0x3e, r29	; 62
    5e26:	0f be       	out	0x3f, r0	; 63
    5e28:	cd bf       	out	0x3d, r28	; 61
    5e2a:	9e 83       	std	Y+6, r25	; 0x06
    5e2c:	8d 83       	std	Y+5, r24	; 0x05
    uint32_t time_stamp = get_time_ms() + delay;
    5e2e:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    5e32:	6f 83       	std	Y+7, r22	; 0x07
    5e34:	78 87       	std	Y+8, r23	; 0x08
    5e36:	89 87       	std	Y+9, r24	; 0x09
    5e38:	9a 87       	std	Y+10, r25	; 0x0a
    5e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    5e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    5e3e:	cc 01       	movw	r24, r24
    5e40:	a0 e0       	ldi	r26, 0x00	; 0
    5e42:	b0 e0       	ldi	r27, 0x00	; 0
    5e44:	2f 81       	ldd	r18, Y+7	; 0x07
    5e46:	38 85       	ldd	r19, Y+8	; 0x08
    5e48:	49 85       	ldd	r20, Y+9	; 0x09
    5e4a:	5a 85       	ldd	r21, Y+10	; 0x0a
    5e4c:	82 0f       	add	r24, r18
    5e4e:	93 1f       	adc	r25, r19
    5e50:	a4 1f       	adc	r26, r20
    5e52:	b5 1f       	adc	r27, r21
    5e54:	89 83       	std	Y+1, r24	; 0x01
    5e56:	9a 83       	std	Y+2, r25	; 0x02
    5e58:	ab 83       	std	Y+3, r26	; 0x03
    5e5a:	bc 83       	std	Y+4, r27	; 0x04
    while((get_time_ms() < time_stamp))
    5e5c:	08 c0       	rjmp	.+16     	; 0x5e6e <delay_ms+0x58>
    {
        _SLEEP();
    5e5e:	88 95       	sleep
        while(is_queue_not_empty()) // тем временем, проверяем входной буфер
    5e60:	02 c0       	rjmp	.+4      	; 0x5e66 <delay_ms+0x50>
            get_message_from_mdm();
    5e62:	0e 94 40 1a 	call	0x3480	; 0x3480 <get_message_from_mdm>
        while(is_queue_not_empty()) // тем временем, проверяем входной буфер
    5e66:	0e 94 4c 30 	call	0x6098	; 0x6098 <is_queue_not_empty>
    5e6a:	88 23       	and	r24, r24
    5e6c:	d1 f7       	brne	.-12     	; 0x5e62 <delay_ms+0x4c>
    while((get_time_ms() < time_stamp))
    5e6e:	0e 94 50 2e 	call	0x5ca0	; 0x5ca0 <get_time_ms>
    5e72:	6b 87       	std	Y+11, r22	; 0x0b
    5e74:	7c 87       	std	Y+12, r23	; 0x0c
    5e76:	8d 87       	std	Y+13, r24	; 0x0d
    5e78:	9e 87       	std	Y+14, r25	; 0x0e
    5e7a:	89 81       	ldd	r24, Y+1	; 0x01
    5e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5e7e:	ab 81       	ldd	r26, Y+3	; 0x03
    5e80:	bc 81       	ldd	r27, Y+4	; 0x04
    5e82:	2b 85       	ldd	r18, Y+11	; 0x0b
    5e84:	3c 85       	ldd	r19, Y+12	; 0x0c
    5e86:	4d 85       	ldd	r20, Y+13	; 0x0d
    5e88:	5e 85       	ldd	r21, Y+14	; 0x0e
    5e8a:	28 17       	cp	r18, r24
    5e8c:	39 07       	cpc	r19, r25
    5e8e:	4a 07       	cpc	r20, r26
    5e90:	5b 07       	cpc	r21, r27
    5e92:	28 f3       	brcs	.-54     	; 0x5e5e <delay_ms+0x48>
    }
}
    5e94:	00 00       	nop
    5e96:	00 00       	nop
    5e98:	2e 96       	adiw	r28, 0x0e	; 14
    5e9a:	0f b6       	in	r0, 0x3f	; 63
    5e9c:	f8 94       	cli
    5e9e:	de bf       	out	0x3e, r29	; 62
    5ea0:	0f be       	out	0x3f, r0	; 63
    5ea2:	cd bf       	out	0x3d, r28	; 61
    5ea4:	df 91       	pop	r29
    5ea6:	cf 91       	pop	r28
    5ea8:	08 95       	ret

00005eaa <delay_s>:

//*******************************************************************************************************************
// задержка на х секунд
void delay_s(uint8_t delay)
{
    5eaa:	cf 93       	push	r28
    5eac:	df 93       	push	r29
    5eae:	cd b7       	in	r28, 0x3d	; 61
    5eb0:	de b7       	in	r29, 0x3e	; 62
    5eb2:	2d 97       	sbiw	r28, 0x0d	; 13
    5eb4:	0f b6       	in	r0, 0x3f	; 63
    5eb6:	f8 94       	cli
    5eb8:	de bf       	out	0x3e, r29	; 62
    5eba:	0f be       	out	0x3f, r0	; 63
    5ebc:	cd bf       	out	0x3d, r28	; 61
    5ebe:	8d 83       	std	Y+5, r24	; 0x05
    uint32_t time_stamp = get_time_s() + delay;
    5ec0:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    5ec4:	6e 83       	std	Y+6, r22	; 0x06
    5ec6:	7f 83       	std	Y+7, r23	; 0x07
    5ec8:	88 87       	std	Y+8, r24	; 0x08
    5eca:	99 87       	std	Y+9, r25	; 0x09
    5ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    5ece:	88 2f       	mov	r24, r24
    5ed0:	90 e0       	ldi	r25, 0x00	; 0
    5ed2:	a0 e0       	ldi	r26, 0x00	; 0
    5ed4:	b0 e0       	ldi	r27, 0x00	; 0
    5ed6:	2e 81       	ldd	r18, Y+6	; 0x06
    5ed8:	3f 81       	ldd	r19, Y+7	; 0x07
    5eda:	48 85       	ldd	r20, Y+8	; 0x08
    5edc:	59 85       	ldd	r21, Y+9	; 0x09
    5ede:	82 0f       	add	r24, r18
    5ee0:	93 1f       	adc	r25, r19
    5ee2:	a4 1f       	adc	r26, r20
    5ee4:	b5 1f       	adc	r27, r21
    5ee6:	89 83       	std	Y+1, r24	; 0x01
    5ee8:	9a 83       	std	Y+2, r25	; 0x02
    5eea:	ab 83       	std	Y+3, r26	; 0x03
    5eec:	bc 83       	std	Y+4, r27	; 0x04
    while((get_time_s() < time_stamp))
    5eee:	08 c0       	rjmp	.+16     	; 0x5f00 <delay_s+0x56>
    {
        _SLEEP();
    5ef0:	88 95       	sleep
        while(is_queue_not_empty()) // тем временем, проверяем входной буфер
    5ef2:	02 c0       	rjmp	.+4      	; 0x5ef8 <delay_s+0x4e>
            get_message_from_mdm();
    5ef4:	0e 94 40 1a 	call	0x3480	; 0x3480 <get_message_from_mdm>
        while(is_queue_not_empty()) // тем временем, проверяем входной буфер
    5ef8:	0e 94 4c 30 	call	0x6098	; 0x6098 <is_queue_not_empty>
    5efc:	88 23       	and	r24, r24
    5efe:	d1 f7       	brne	.-12     	; 0x5ef4 <delay_s+0x4a>
    while((get_time_s() < time_stamp))
    5f00:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    5f04:	6a 87       	std	Y+10, r22	; 0x0a
    5f06:	7b 87       	std	Y+11, r23	; 0x0b
    5f08:	8c 87       	std	Y+12, r24	; 0x0c
    5f0a:	9d 87       	std	Y+13, r25	; 0x0d
    5f0c:	89 81       	ldd	r24, Y+1	; 0x01
    5f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f10:	ab 81       	ldd	r26, Y+3	; 0x03
    5f12:	bc 81       	ldd	r27, Y+4	; 0x04
    5f14:	2a 85       	ldd	r18, Y+10	; 0x0a
    5f16:	3b 85       	ldd	r19, Y+11	; 0x0b
    5f18:	4c 85       	ldd	r20, Y+12	; 0x0c
    5f1a:	5d 85       	ldd	r21, Y+13	; 0x0d
    5f1c:	28 17       	cp	r18, r24
    5f1e:	39 07       	cpc	r19, r25
    5f20:	4a 07       	cpc	r20, r26
    5f22:	5b 07       	cpc	r21, r27
    5f24:	28 f3       	brcs	.-54     	; 0x5ef0 <delay_s+0x46>
    }
}
    5f26:	00 00       	nop
    5f28:	00 00       	nop
    5f2a:	2d 96       	adiw	r28, 0x0d	; 13
    5f2c:	0f b6       	in	r0, 0x3f	; 63
    5f2e:	f8 94       	cli
    5f30:	de bf       	out	0x3e, r29	; 62
    5f32:	0f be       	out	0x3f, r0	; 63
    5f34:	cd bf       	out	0x3d, r28	; 61
    5f36:	df 91       	pop	r29
    5f38:	cf 91       	pop	r28
    5f3a:	08 95       	ret

00005f3c <get_time_from_start_s>:
//*******************************************************************************************************************


/////////////////////// time_from_start_s //////////////////////////
uint32_t get_time_from_start_s()
{
    5f3c:	cf 93       	push	r28
    5f3e:	df 93       	push	r29
    5f40:	cd b7       	in	r28, 0x3d	; 61
    5f42:	de b7       	in	r29, 0x3e	; 62
    5f44:	29 97       	sbiw	r28, 0x09	; 9
    5f46:	0f b6       	in	r0, 0x3f	; 63
    5f48:	f8 94       	cli
    5f4a:	de bf       	out	0x3e, r29	; 62
    5f4c:	0f be       	out	0x3f, r0	; 63
    5f4e:	cd bf       	out	0x3d, r28	; 61
    return get_val(time_from_start_s);
    5f50:	8f e5       	ldi	r24, 0x5F	; 95
    5f52:	90 e0       	ldi	r25, 0x00	; 0
    5f54:	fc 01       	movw	r30, r24
    5f56:	80 81       	ld	r24, Z
    5f58:	89 83       	std	Y+1, r24	; 0x01
    5f5a:	f8 94       	cli
    5f5c:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <time_from_start_s>
    5f60:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <time_from_start_s+0x1>
    5f64:	a0 91 d0 03 	lds	r26, 0x03D0	; 0x8003d0 <time_from_start_s+0x2>
    5f68:	b0 91 d1 03 	lds	r27, 0x03D1	; 0x8003d1 <time_from_start_s+0x3>
    5f6c:	8a 83       	std	Y+2, r24	; 0x02
    5f6e:	9b 83       	std	Y+3, r25	; 0x03
    5f70:	ac 83       	std	Y+4, r26	; 0x04
    5f72:	bd 83       	std	Y+5, r27	; 0x05
    5f74:	8f e5       	ldi	r24, 0x5F	; 95
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	29 81       	ldd	r18, Y+1	; 0x01
    5f7a:	fc 01       	movw	r30, r24
    5f7c:	20 83       	st	Z, r18
    5f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    5f80:	9b 81       	ldd	r25, Y+3	; 0x03
    5f82:	ac 81       	ldd	r26, Y+4	; 0x04
    5f84:	bd 81       	ldd	r27, Y+5	; 0x05
    5f86:	8e 83       	std	Y+6, r24	; 0x06
    5f88:	9f 83       	std	Y+7, r25	; 0x07
    5f8a:	a8 87       	std	Y+8, r26	; 0x08
    5f8c:	b9 87       	std	Y+9, r27	; 0x09
}
    5f8e:	6e 81       	ldd	r22, Y+6	; 0x06
    5f90:	7f 81       	ldd	r23, Y+7	; 0x07
    5f92:	88 85       	ldd	r24, Y+8	; 0x08
    5f94:	99 85       	ldd	r25, Y+9	; 0x09
    5f96:	29 96       	adiw	r28, 0x09	; 9
    5f98:	0f b6       	in	r0, 0x3f	; 63
    5f9a:	f8 94       	cli
    5f9c:	de bf       	out	0x3e, r29	; 62
    5f9e:	0f be       	out	0x3f, r0	; 63
    5fa0:	cd bf       	out	0x3d, r28	; 61
    5fa2:	df 91       	pop	r29
    5fa4:	cf 91       	pop	r28
    5fa6:	08 95       	ret

00005fa8 <init_uart>:
static char uart_in_buf[UART_BUF_SIZE];
volatile unsigned char head;
volatile unsigned char tail;

void init_uart()
{
    5fa8:	cf 93       	push	r28
    5faa:	df 93       	push	r29
    5fac:	cd b7       	in	r28, 0x3d	; 61
    5fae:	de b7       	in	r29, 0x3e	; 62
	UBRR0H = BAUD_PRESCALER >> 8;
    5fb0:	85 ec       	ldi	r24, 0xC5	; 197
    5fb2:	90 e0       	ldi	r25, 0x00	; 0
    5fb4:	fc 01       	movw	r30, r24
    5fb6:	10 82       	st	Z, r1
	UBRR0L = BAUD_PRESCALER;
    5fb8:	84 ec       	ldi	r24, 0xC4	; 196
    5fba:	90 e0       	ldi	r25, 0x00	; 0
    5fbc:	2f e2       	ldi	r18, 0x2F	; 47
    5fbe:	fc 01       	movw	r30, r24
    5fc0:	20 83       	st	Z, r18

	// Set Frame Format
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
    5fc2:	82 ec       	ldi	r24, 0xC2	; 194
    5fc4:	90 e0       	ldi	r25, 0x00	; 0
    5fc6:	26 e0       	ldi	r18, 0x06	; 6
    5fc8:	fc 01       	movw	r30, r24
    5fca:	20 83       	st	Z, r18
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UCSR0B = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    5fcc:	81 ec       	ldi	r24, 0xC1	; 193
    5fce:	90 e0       	ldi	r25, 0x00	; 0
    5fd0:	28 e9       	ldi	r18, 0x98	; 152
    5fd2:	fc 01       	movw	r30, r24
    5fd4:	20 83       	st	Z, r18

	head = tail = 0;
    5fd6:	80 e0       	ldi	r24, 0x00	; 0
    5fd8:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <tail>
    5fdc:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <head>
}
    5fe0:	00 00       	nop
    5fe2:	df 91       	pop	r29
    5fe4:	cf 91       	pop	r28
    5fe6:	08 95       	ret

00005fe8 <__vector_18>:

//*******************************************************************************************************************

// USART Receiver interrupt service routine
ISR(USART_RX_vect)
{
    5fe8:	1f 92       	push	r1
    5fea:	0f 92       	push	r0
    5fec:	0f b6       	in	r0, 0x3f	; 63
    5fee:	0f 92       	push	r0
    5ff0:	11 24       	eor	r1, r1
    5ff2:	2f 93       	push	r18
    5ff4:	8f 93       	push	r24
    5ff6:	9f 93       	push	r25
    5ff8:	ef 93       	push	r30
    5ffa:	ff 93       	push	r31
    5ffc:	cf 93       	push	r28
    5ffe:	df 93       	push	r29
    6000:	00 d0       	rcall	.+0      	; 0x6002 <__vector_18+0x1a>
    6002:	cd b7       	in	r28, 0x3d	; 61
    6004:	de b7       	in	r29, 0x3e	; 62
	char status, data;

	status=UCSR0A;
    6006:	80 ec       	ldi	r24, 0xC0	; 192
    6008:	90 e0       	ldi	r25, 0x00	; 0
    600a:	fc 01       	movw	r30, r24
    600c:	80 81       	ld	r24, Z
    600e:	89 83       	std	Y+1, r24	; 0x01
	data=UDR0;
    6010:	86 ec       	ldi	r24, 0xC6	; 198
    6012:	90 e0       	ldi	r25, 0x00	; 0
    6014:	fc 01       	movw	r30, r24
    6016:	80 81       	ld	r24, Z
    6018:	8a 83       	std	Y+2, r24	; 0x02
	if ((status & ((1<<FE0) | (1<<DOR0)))==0)
    601a:	89 81       	ldd	r24, Y+1	; 0x01
    601c:	08 2e       	mov	r0, r24
    601e:	00 0c       	add	r0, r0
    6020:	99 0b       	sbc	r25, r25
    6022:	88 71       	andi	r24, 0x18	; 24
    6024:	99 27       	eor	r25, r25
    6026:	89 2b       	or	r24, r25
    6028:	79 f4       	brne	.+30     	; 0x6048 <__vector_18+0x60>
	{
		uart_in_buf[head] = data;
    602a:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <head>
    602e:	88 2f       	mov	r24, r24
    6030:	90 e0       	ldi	r25, 0x00	; 0
    6032:	8a 52       	subi	r24, 0x2A	; 42
    6034:	9c 4f       	sbci	r25, 0xFC	; 252
    6036:	2a 81       	ldd	r18, Y+2	; 0x02
    6038:	fc 01       	movw	r30, r24
    603a:	20 83       	st	Z, r18
		head = (head+1)&(UART_BUF_SIZE-1);
    603c:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <head>
    6040:	8f 5f       	subi	r24, 0xFF	; 255
    6042:	8f 77       	andi	r24, 0x7F	; 127
    6044:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <head>
	}
}
    6048:	00 00       	nop
    604a:	0f 90       	pop	r0
    604c:	0f 90       	pop	r0
    604e:	df 91       	pop	r29
    6050:	cf 91       	pop	r28
    6052:	ff 91       	pop	r31
    6054:	ef 91       	pop	r30
    6056:	9f 91       	pop	r25
    6058:	8f 91       	pop	r24
    605a:	2f 91       	pop	r18
    605c:	0f 90       	pop	r0
    605e:	0f be       	out	0x3f, r0	; 63
    6060:	0f 90       	pop	r0
    6062:	1f 90       	pop	r1
    6064:	18 95       	reti

00006066 <get_byte_from_queue>:


//*******************************************************************************************************************

char get_byte_from_queue(void)
{
    6066:	cf 93       	push	r28
    6068:	df 93       	push	r29
    606a:	0f 92       	push	r0
    606c:	cd b7       	in	r28, 0x3d	; 61
    606e:	de b7       	in	r29, 0x3e	; 62
	char data;
	data = uart_in_buf[tail];
    6070:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <tail>
    6074:	88 2f       	mov	r24, r24
    6076:	90 e0       	ldi	r25, 0x00	; 0
    6078:	8a 52       	subi	r24, 0x2A	; 42
    607a:	9c 4f       	sbci	r25, 0xFC	; 252
    607c:	fc 01       	movw	r30, r24
    607e:	80 81       	ld	r24, Z
    6080:	89 83       	std	Y+1, r24	; 0x01
	tail = (tail+1)&(UART_BUF_SIZE-1);
    6082:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <tail>
    6086:	8f 5f       	subi	r24, 0xFF	; 255
    6088:	8f 77       	andi	r24, 0x7F	; 127
    608a:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <tail>
	return data;
    608e:	89 81       	ldd	r24, Y+1	; 0x01
}
    6090:	0f 90       	pop	r0
    6092:	df 91       	pop	r29
    6094:	cf 91       	pop	r28
    6096:	08 95       	ret

00006098 <is_queue_not_empty>:

//*******************************************************************************************************************

uint8_t is_queue_not_empty(void)
 {
    6098:	cf 93       	push	r28
    609a:	df 93       	push	r29
    609c:	cd b7       	in	r28, 0x3d	; 61
    609e:	de b7       	in	r29, 0x3e	; 62

	if(head!=tail)
    60a0:	90 91 d4 03 	lds	r25, 0x03D4	; 0x8003d4 <head>
    60a4:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <tail>
    60a8:	98 17       	cp	r25, r24
    60aa:	11 f0       	breq	.+4      	; 0x60b0 <is_queue_not_empty+0x18>

		return TRUE;
    60ac:	81 e0       	ldi	r24, 0x01	; 1
    60ae:	01 c0       	rjmp	.+2      	; 0x60b2 <is_queue_not_empty+0x1a>
	else
		return FALSE;
    60b0:	80 e0       	ldi	r24, 0x00	; 0
}
    60b2:	df 91       	pop	r29
    60b4:	cf 91       	pop	r28
    60b6:	08 95       	ret

000060b8 <uart_send_buf>:

//*******************************************************************************************************************

void uart_send_buf(char* buf, char len)
{
    60b8:	cf 93       	push	r28
    60ba:	df 93       	push	r29
    60bc:	00 d0       	rcall	.+0      	; 0x60be <uart_send_buf+0x6>
    60be:	0f 92       	push	r0
    60c0:	cd b7       	in	r28, 0x3d	; 61
    60c2:	de b7       	in	r29, 0x3e	; 62
    60c4:	9a 83       	std	Y+2, r25	; 0x02
    60c6:	89 83       	std	Y+1, r24	; 0x01
    60c8:	6b 83       	std	Y+3, r22	; 0x03
	while(len--)
    60ca:	18 c0       	rjmp	.+48     	; 0x60fc <uart_send_buf+0x44>
	{
		while( (UCSR0A & (1<<UDRE0)) == 0 ); // ждем готовности буферного регистра
    60cc:	00 00       	nop
    60ce:	80 ec       	ldi	r24, 0xC0	; 192
    60d0:	90 e0       	ldi	r25, 0x00	; 0
    60d2:	fc 01       	movw	r30, r24
    60d4:	80 81       	ld	r24, Z
    60d6:	88 2f       	mov	r24, r24
    60d8:	90 e0       	ldi	r25, 0x00	; 0
    60da:	80 72       	andi	r24, 0x20	; 32
    60dc:	99 27       	eor	r25, r25
    60de:	89 2b       	or	r24, r25
    60e0:	b1 f3       	breq	.-20     	; 0x60ce <uart_send_buf+0x16>
		UDR0 = *(buf++);
    60e2:	89 81       	ldd	r24, Y+1	; 0x01
    60e4:	9a 81       	ldd	r25, Y+2	; 0x02
    60e6:	9c 01       	movw	r18, r24
    60e8:	2f 5f       	subi	r18, 0xFF	; 255
    60ea:	3f 4f       	sbci	r19, 0xFF	; 255
    60ec:	3a 83       	std	Y+2, r19	; 0x02
    60ee:	29 83       	std	Y+1, r18	; 0x01
    60f0:	fc 01       	movw	r30, r24
    60f2:	20 81       	ld	r18, Z
    60f4:	86 ec       	ldi	r24, 0xC6	; 198
    60f6:	90 e0       	ldi	r25, 0x00	; 0
    60f8:	fc 01       	movw	r30, r24
    60fa:	20 83       	st	Z, r18
	while(len--)
    60fc:	8b 81       	ldd	r24, Y+3	; 0x03
    60fe:	98 2f       	mov	r25, r24
    6100:	91 50       	subi	r25, 0x01	; 1
    6102:	9b 83       	std	Y+3, r25	; 0x03
    6104:	88 23       	and	r24, r24
    6106:	11 f7       	brne	.-60     	; 0x60cc <uart_send_buf+0x14>
	}
}
    6108:	00 00       	nop
    610a:	00 00       	nop
    610c:	0f 90       	pop	r0
    610e:	0f 90       	pop	r0
    6110:	0f 90       	pop	r0
    6112:	df 91       	pop	r29
    6114:	cf 91       	pop	r28
    6116:	08 95       	ret

00006118 <uart_send_str>:

//*******************************************************************************************************************

void uart_send_str(char *str)
{
    6118:	cf 93       	push	r28
    611a:	df 93       	push	r29
    611c:	00 d0       	rcall	.+0      	; 0x611e <uart_send_str+0x6>
    611e:	cd b7       	in	r28, 0x3d	; 61
    6120:	de b7       	in	r29, 0x3e	; 62
    6122:	9a 83       	std	Y+2, r25	; 0x02
    6124:	89 83       	std	Y+1, r24	; 0x01
	while(*str)
    6126:	18 c0       	rjmp	.+48     	; 0x6158 <uart_send_str+0x40>
	{
		while( (UCSR0A & (1<<UDRE0)) == 0 ); // ждем готовности буферного регистра
    6128:	00 00       	nop
    612a:	80 ec       	ldi	r24, 0xC0	; 192
    612c:	90 e0       	ldi	r25, 0x00	; 0
    612e:	fc 01       	movw	r30, r24
    6130:	80 81       	ld	r24, Z
    6132:	88 2f       	mov	r24, r24
    6134:	90 e0       	ldi	r25, 0x00	; 0
    6136:	80 72       	andi	r24, 0x20	; 32
    6138:	99 27       	eor	r25, r25
    613a:	89 2b       	or	r24, r25
    613c:	b1 f3       	breq	.-20     	; 0x612a <uart_send_str+0x12>
		UDR0 = *str++;
    613e:	89 81       	ldd	r24, Y+1	; 0x01
    6140:	9a 81       	ldd	r25, Y+2	; 0x02
    6142:	9c 01       	movw	r18, r24
    6144:	2f 5f       	subi	r18, 0xFF	; 255
    6146:	3f 4f       	sbci	r19, 0xFF	; 255
    6148:	3a 83       	std	Y+2, r19	; 0x02
    614a:	29 83       	std	Y+1, r18	; 0x01
    614c:	fc 01       	movw	r30, r24
    614e:	20 81       	ld	r18, Z
    6150:	86 ec       	ldi	r24, 0xC6	; 198
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	fc 01       	movw	r30, r24
    6156:	20 83       	st	Z, r18
	while(*str)
    6158:	89 81       	ldd	r24, Y+1	; 0x01
    615a:	9a 81       	ldd	r25, Y+2	; 0x02
    615c:	fc 01       	movw	r30, r24
    615e:	80 81       	ld	r24, Z
    6160:	88 23       	and	r24, r24
    6162:	11 f7       	brne	.-60     	; 0x6128 <uart_send_str+0x10>
	}
}
    6164:	00 00       	nop
    6166:	00 00       	nop
    6168:	0f 90       	pop	r0
    616a:	0f 90       	pop	r0
    616c:	df 91       	pop	r29
    616e:	cf 91       	pop	r28
    6170:	08 95       	ret

00006172 <uart_send_str_p>:

//*******************************************************************************************************************

void uart_send_str_p(const char *progmem_s)
{
    6172:	1f 93       	push	r17
    6174:	cf 93       	push	r28
    6176:	df 93       	push	r29
    6178:	00 d0       	rcall	.+0      	; 0x617a <uart_send_str_p+0x8>
    617a:	00 d0       	rcall	.+0      	; 0x617c <uart_send_str_p+0xa>
    617c:	0f 92       	push	r0
    617e:	cd b7       	in	r28, 0x3d	; 61
    6180:	de b7       	in	r29, 0x3e	; 62
    6182:	9d 83       	std	Y+5, r25	; 0x05
    6184:	8c 83       	std	Y+4, r24	; 0x04
	register char c;

	while ((c = pgm_read_byte(progmem_s++))) {
    6186:	03 c0       	rjmp	.+6      	; 0x618e <uart_send_str_p+0x1c>
		uart_send_byte(c);
    6188:	81 2f       	mov	r24, r17
    618a:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <uart_send_byte>
	while ((c = pgm_read_byte(progmem_s++))) {
    618e:	8c 81       	ldd	r24, Y+4	; 0x04
    6190:	9d 81       	ldd	r25, Y+5	; 0x05
    6192:	9c 01       	movw	r18, r24
    6194:	2f 5f       	subi	r18, 0xFF	; 255
    6196:	3f 4f       	sbci	r19, 0xFF	; 255
    6198:	3d 83       	std	Y+5, r19	; 0x05
    619a:	2c 83       	std	Y+4, r18	; 0x04
    619c:	9a 83       	std	Y+2, r25	; 0x02
    619e:	89 83       	std	Y+1, r24	; 0x01
    61a0:	89 81       	ldd	r24, Y+1	; 0x01
    61a2:	9a 81       	ldd	r25, Y+2	; 0x02
    61a4:	fc 01       	movw	r30, r24
    61a6:	84 91       	lpm	r24, Z
    61a8:	8b 83       	std	Y+3, r24	; 0x03
    61aa:	8b 81       	ldd	r24, Y+3	; 0x03
    61ac:	18 2f       	mov	r17, r24
    61ae:	11 23       	and	r17, r17
    61b0:	59 f7       	brne	.-42     	; 0x6188 <uart_send_str_p+0x16>
	}
}
    61b2:	00 00       	nop
    61b4:	00 00       	nop
    61b6:	0f 90       	pop	r0
    61b8:	0f 90       	pop	r0
    61ba:	0f 90       	pop	r0
    61bc:	0f 90       	pop	r0
    61be:	0f 90       	pop	r0
    61c0:	df 91       	pop	r29
    61c2:	cf 91       	pop	r28
    61c4:	1f 91       	pop	r17
    61c6:	08 95       	ret

000061c8 <uart_send_byte>:
//*******************************************************************************************************************

void uart_send_byte(char data)
{
    61c8:	cf 93       	push	r28
    61ca:	df 93       	push	r29
    61cc:	0f 92       	push	r0
    61ce:	cd b7       	in	r28, 0x3d	; 61
    61d0:	de b7       	in	r29, 0x3e	; 62
    61d2:	89 83       	std	Y+1, r24	; 0x01
	while( (UCSR0A & (1<<UDRE0)) == 0 ); // ждем готовности буферного регистра
    61d4:	00 00       	nop
    61d6:	80 ec       	ldi	r24, 0xC0	; 192
    61d8:	90 e0       	ldi	r25, 0x00	; 0
    61da:	fc 01       	movw	r30, r24
    61dc:	80 81       	ld	r24, Z
    61de:	88 2f       	mov	r24, r24
    61e0:	90 e0       	ldi	r25, 0x00	; 0
    61e2:	80 72       	andi	r24, 0x20	; 32
    61e4:	99 27       	eor	r25, r25
    61e6:	89 2b       	or	r24, r25
    61e8:	b1 f3       	breq	.-20     	; 0x61d6 <uart_send_byte+0xe>
	UDR0 = data;
    61ea:	86 ec       	ldi	r24, 0xC6	; 198
    61ec:	90 e0       	ldi	r25, 0x00	; 0
    61ee:	29 81       	ldd	r18, Y+1	; 0x01
    61f0:	fc 01       	movw	r30, r24
    61f2:	20 83       	st	Z, r18
}
    61f4:	00 00       	nop
    61f6:	0f 90       	pop	r0
    61f8:	df 91       	pop	r29
    61fa:	cf 91       	pop	r28
    61fc:	08 95       	ret

000061fe <reset_uart_queue>:

//*******************************************************************************************************************

void reset_uart_queue(void)
{
    61fe:	cf 93       	push	r28
    6200:	df 93       	push	r29
    6202:	cd b7       	in	r28, 0x3d	; 61
    6204:	de b7       	in	r29, 0x3e	; 62
	tail = head = 0;
    6206:	80 e0       	ldi	r24, 0x00	; 0
    6208:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <head>
    620c:	80 93 d5 03 	sts	0x03D5, r24	; 0x8003d5 <tail>
}
    6210:	00 00       	nop
    6212:	df 91       	pop	r29
    6214:	cf 91       	pop	r28
    6216:	08 95       	ret

00006218 <uart_flush>:

void uart_flush(void)
{
    6218:	cf 93       	push	r28
    621a:	df 93       	push	r29
    621c:	cd b7       	in	r28, 0x3d	; 61
    621e:	de b7       	in	r29, 0x3e	; 62
    6220:	2d 97       	sbiw	r28, 0x0d	; 13
    6222:	0f b6       	in	r0, 0x3f	; 63
    6224:	f8 94       	cli
    6226:	de bf       	out	0x3e, r29	; 62
    6228:	0f be       	out	0x3f, r0	; 63
    622a:	cd bf       	out	0x3d, r28	; 61
	volatile char dummy;
	uint32_t time_stamp = get_time_s() + 3;
    622c:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    6230:	6e 83       	std	Y+6, r22	; 0x06
    6232:	7f 83       	std	Y+7, r23	; 0x07
    6234:	88 87       	std	Y+8, r24	; 0x08
    6236:	99 87       	std	Y+9, r25	; 0x09
    6238:	8e 81       	ldd	r24, Y+6	; 0x06
    623a:	9f 81       	ldd	r25, Y+7	; 0x07
    623c:	a8 85       	ldd	r26, Y+8	; 0x08
    623e:	b9 85       	ldd	r27, Y+9	; 0x09
    6240:	03 96       	adiw	r24, 0x03	; 3
    6242:	a1 1d       	adc	r26, r1
    6244:	b1 1d       	adc	r27, r1
    6246:	89 83       	std	Y+1, r24	; 0x01
    6248:	9a 83       	std	Y+2, r25	; 0x02
    624a:	ab 83       	std	Y+3, r26	; 0x03
    624c:	bc 83       	std	Y+4, r27	; 0x04
	while ( UCSR0A & (1<<RXC0) )
    624e:	1a c0       	rjmp	.+52     	; 0x6284 <uart_flush+0x6c>
	{
        if(get_time_s() > time_stamp)
    6250:	0e 94 86 2e 	call	0x5d0c	; 0x5d0c <get_time_s>
    6254:	6a 87       	std	Y+10, r22	; 0x0a
    6256:	7b 87       	std	Y+11, r23	; 0x0b
    6258:	8c 87       	std	Y+12, r24	; 0x0c
    625a:	9d 87       	std	Y+13, r25	; 0x0d
    625c:	89 81       	ldd	r24, Y+1	; 0x01
    625e:	9a 81       	ldd	r25, Y+2	; 0x02
    6260:	ab 81       	ldd	r26, Y+3	; 0x03
    6262:	bc 81       	ldd	r27, Y+4	; 0x04
    6264:	2a 85       	ldd	r18, Y+10	; 0x0a
    6266:	3b 85       	ldd	r19, Y+11	; 0x0b
    6268:	4c 85       	ldd	r20, Y+12	; 0x0c
    626a:	5d 85       	ldd	r21, Y+13	; 0x0d
    626c:	82 17       	cp	r24, r18
    626e:	93 07       	cpc	r25, r19
    6270:	a4 07       	cpc	r26, r20
    6272:	b5 07       	cpc	r27, r21
    6274:	70 f0       	brcs	.+28     	; 0x6292 <uart_flush+0x7a>
            return;
		dummy = UDR0;
    6276:	86 ec       	ldi	r24, 0xC6	; 198
    6278:	90 e0       	ldi	r25, 0x00	; 0
    627a:	fc 01       	movw	r30, r24
    627c:	80 81       	ld	r24, Z
    627e:	8d 83       	std	Y+5, r24	; 0x05
		dummy = dummy;
    6280:	8d 81       	ldd	r24, Y+5	; 0x05
    6282:	8d 83       	std	Y+5, r24	; 0x05
	while ( UCSR0A & (1<<RXC0) )
    6284:	80 ec       	ldi	r24, 0xC0	; 192
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	fc 01       	movw	r30, r24
    628a:	80 81       	ld	r24, Z
    628c:	88 23       	and	r24, r24
    628e:	04 f3       	brlt	.-64     	; 0x6250 <uart_flush+0x38>
    6290:	01 c0       	rjmp	.+2      	; 0x6294 <uart_flush+0x7c>
            return;
    6292:	00 00       	nop
	}
}
    6294:	2d 96       	adiw	r28, 0x0d	; 13
    6296:	0f b6       	in	r0, 0x3f	; 63
    6298:	f8 94       	cli
    629a:	de bf       	out	0x3e, r29	; 62
    629c:	0f be       	out	0x3f, r0	; 63
    629e:	cd bf       	out	0x3d, r28	; 61
    62a0:	df 91       	pop	r29
    62a2:	cf 91       	pop	r28
    62a4:	08 95       	ret

000062a6 <__mulsi3>:
    62a6:	db 01       	movw	r26, r22
    62a8:	8f 93       	push	r24
    62aa:	9f 93       	push	r25
    62ac:	0e 94 be 31 	call	0x637c	; 0x637c <__muluhisi3>
    62b0:	bf 91       	pop	r27
    62b2:	af 91       	pop	r26
    62b4:	a2 9f       	mul	r26, r18
    62b6:	80 0d       	add	r24, r0
    62b8:	91 1d       	adc	r25, r1
    62ba:	a3 9f       	mul	r26, r19
    62bc:	90 0d       	add	r25, r0
    62be:	b2 9f       	mul	r27, r18
    62c0:	90 0d       	add	r25, r0
    62c2:	11 24       	eor	r1, r1
    62c4:	08 95       	ret

000062c6 <__udivmodhi4>:
    62c6:	aa 1b       	sub	r26, r26
    62c8:	bb 1b       	sub	r27, r27
    62ca:	51 e1       	ldi	r21, 0x11	; 17
    62cc:	07 c0       	rjmp	.+14     	; 0x62dc <__udivmodhi4_ep>

000062ce <__udivmodhi4_loop>:
    62ce:	aa 1f       	adc	r26, r26
    62d0:	bb 1f       	adc	r27, r27
    62d2:	a6 17       	cp	r26, r22
    62d4:	b7 07       	cpc	r27, r23
    62d6:	10 f0       	brcs	.+4      	; 0x62dc <__udivmodhi4_ep>
    62d8:	a6 1b       	sub	r26, r22
    62da:	b7 0b       	sbc	r27, r23

000062dc <__udivmodhi4_ep>:
    62dc:	88 1f       	adc	r24, r24
    62de:	99 1f       	adc	r25, r25
    62e0:	5a 95       	dec	r21
    62e2:	a9 f7       	brne	.-22     	; 0x62ce <__udivmodhi4_loop>
    62e4:	80 95       	com	r24
    62e6:	90 95       	com	r25
    62e8:	bc 01       	movw	r22, r24
    62ea:	cd 01       	movw	r24, r26
    62ec:	08 95       	ret

000062ee <__udivmodsi4>:
    62ee:	a1 e2       	ldi	r26, 0x21	; 33
    62f0:	1a 2e       	mov	r1, r26
    62f2:	aa 1b       	sub	r26, r26
    62f4:	bb 1b       	sub	r27, r27
    62f6:	fd 01       	movw	r30, r26
    62f8:	0d c0       	rjmp	.+26     	; 0x6314 <__udivmodsi4_ep>

000062fa <__udivmodsi4_loop>:
    62fa:	aa 1f       	adc	r26, r26
    62fc:	bb 1f       	adc	r27, r27
    62fe:	ee 1f       	adc	r30, r30
    6300:	ff 1f       	adc	r31, r31
    6302:	a2 17       	cp	r26, r18
    6304:	b3 07       	cpc	r27, r19
    6306:	e4 07       	cpc	r30, r20
    6308:	f5 07       	cpc	r31, r21
    630a:	20 f0       	brcs	.+8      	; 0x6314 <__udivmodsi4_ep>
    630c:	a2 1b       	sub	r26, r18
    630e:	b3 0b       	sbc	r27, r19
    6310:	e4 0b       	sbc	r30, r20
    6312:	f5 0b       	sbc	r31, r21

00006314 <__udivmodsi4_ep>:
    6314:	66 1f       	adc	r22, r22
    6316:	77 1f       	adc	r23, r23
    6318:	88 1f       	adc	r24, r24
    631a:	99 1f       	adc	r25, r25
    631c:	1a 94       	dec	r1
    631e:	69 f7       	brne	.-38     	; 0x62fa <__udivmodsi4_loop>
    6320:	60 95       	com	r22
    6322:	70 95       	com	r23
    6324:	80 95       	com	r24
    6326:	90 95       	com	r25
    6328:	9b 01       	movw	r18, r22
    632a:	ac 01       	movw	r20, r24
    632c:	bd 01       	movw	r22, r26
    632e:	cf 01       	movw	r24, r30
    6330:	08 95       	ret

00006332 <__divmodsi4>:
    6332:	05 2e       	mov	r0, r21
    6334:	97 fb       	bst	r25, 7
    6336:	1e f4       	brtc	.+6      	; 0x633e <__divmodsi4+0xc>
    6338:	00 94       	com	r0
    633a:	0e 94 b0 31 	call	0x6360	; 0x6360 <__negsi2>
    633e:	57 fd       	sbrc	r21, 7
    6340:	07 d0       	rcall	.+14     	; 0x6350 <__divmodsi4_neg2>
    6342:	0e 94 77 31 	call	0x62ee	; 0x62ee <__udivmodsi4>
    6346:	07 fc       	sbrc	r0, 7
    6348:	03 d0       	rcall	.+6      	; 0x6350 <__divmodsi4_neg2>
    634a:	4e f4       	brtc	.+18     	; 0x635e <__divmodsi4_exit>
    634c:	0c 94 b0 31 	jmp	0x6360	; 0x6360 <__negsi2>

00006350 <__divmodsi4_neg2>:
    6350:	50 95       	com	r21
    6352:	40 95       	com	r20
    6354:	30 95       	com	r19
    6356:	21 95       	neg	r18
    6358:	3f 4f       	sbci	r19, 0xFF	; 255
    635a:	4f 4f       	sbci	r20, 0xFF	; 255
    635c:	5f 4f       	sbci	r21, 0xFF	; 255

0000635e <__divmodsi4_exit>:
    635e:	08 95       	ret

00006360 <__negsi2>:
    6360:	90 95       	com	r25
    6362:	80 95       	com	r24
    6364:	70 95       	com	r23
    6366:	61 95       	neg	r22
    6368:	7f 4f       	sbci	r23, 0xFF	; 255
    636a:	8f 4f       	sbci	r24, 0xFF	; 255
    636c:	9f 4f       	sbci	r25, 0xFF	; 255
    636e:	08 95       	ret

00006370 <__tablejump2__>:
    6370:	ee 0f       	add	r30, r30
    6372:	ff 1f       	adc	r31, r31
    6374:	05 90       	lpm	r0, Z+
    6376:	f4 91       	lpm	r31, Z
    6378:	e0 2d       	mov	r30, r0
    637a:	09 94       	ijmp

0000637c <__muluhisi3>:
    637c:	0e 94 c9 31 	call	0x6392	; 0x6392 <__umulhisi3>
    6380:	a5 9f       	mul	r26, r21
    6382:	90 0d       	add	r25, r0
    6384:	b4 9f       	mul	r27, r20
    6386:	90 0d       	add	r25, r0
    6388:	a4 9f       	mul	r26, r20
    638a:	80 0d       	add	r24, r0
    638c:	91 1d       	adc	r25, r1
    638e:	11 24       	eor	r1, r1
    6390:	08 95       	ret

00006392 <__umulhisi3>:
    6392:	a2 9f       	mul	r26, r18
    6394:	b0 01       	movw	r22, r0
    6396:	b3 9f       	mul	r27, r19
    6398:	c0 01       	movw	r24, r0
    639a:	a3 9f       	mul	r26, r19
    639c:	70 0d       	add	r23, r0
    639e:	81 1d       	adc	r24, r1
    63a0:	11 24       	eor	r1, r1
    63a2:	91 1d       	adc	r25, r1
    63a4:	b2 9f       	mul	r27, r18
    63a6:	70 0d       	add	r23, r0
    63a8:	81 1d       	adc	r24, r1
    63aa:	11 24       	eor	r1, r1
    63ac:	91 1d       	adc	r25, r1
    63ae:	08 95       	ret

000063b0 <malloc>:
    63b0:	0f 93       	push	r16
    63b2:	1f 93       	push	r17
    63b4:	cf 93       	push	r28
    63b6:	df 93       	push	r29
    63b8:	9c 01       	movw	r18, r24
    63ba:	02 97       	sbiw	r24, 0x02	; 2
    63bc:	10 f4       	brcc	.+4      	; 0x63c2 <malloc+0x12>
    63be:	22 e0       	ldi	r18, 0x02	; 2
    63c0:	30 e0       	ldi	r19, 0x00	; 0
    63c2:	e0 91 56 04 	lds	r30, 0x0456	; 0x800456 <__flp>
    63c6:	f0 91 57 04 	lds	r31, 0x0457	; 0x800457 <__flp+0x1>
    63ca:	90 e0       	ldi	r25, 0x00	; 0
    63cc:	80 e0       	ldi	r24, 0x00	; 0
    63ce:	b0 e0       	ldi	r27, 0x00	; 0
    63d0:	a0 e0       	ldi	r26, 0x00	; 0
    63d2:	30 97       	sbiw	r30, 0x00	; 0
    63d4:	91 f4       	brne	.+36     	; 0x63fa <malloc+0x4a>
    63d6:	00 97       	sbiw	r24, 0x00	; 0
    63d8:	09 f4       	brne	.+2      	; 0x63dc <malloc+0x2c>
    63da:	45 c0       	rjmp	.+138    	; 0x6466 <malloc+0xb6>
    63dc:	82 1b       	sub	r24, r18
    63de:	93 0b       	sbc	r25, r19
    63e0:	84 30       	cpi	r24, 0x04	; 4
    63e2:	91 05       	cpc	r25, r1
    63e4:	b8 f5       	brcc	.+110    	; 0x6454 <malloc+0xa4>
    63e6:	8a 81       	ldd	r24, Y+2	; 0x02
    63e8:	9b 81       	ldd	r25, Y+3	; 0x03
    63ea:	61 15       	cp	r22, r1
    63ec:	71 05       	cpc	r23, r1
    63ee:	69 f1       	breq	.+90     	; 0x644a <malloc+0x9a>
    63f0:	fb 01       	movw	r30, r22
    63f2:	93 83       	std	Z+3, r25	; 0x03
    63f4:	82 83       	std	Z+2, r24	; 0x02
    63f6:	fe 01       	movw	r30, r28
    63f8:	11 c0       	rjmp	.+34     	; 0x641c <malloc+0x6c>
    63fa:	40 81       	ld	r20, Z
    63fc:	51 81       	ldd	r21, Z+1	; 0x01
    63fe:	02 81       	ldd	r16, Z+2	; 0x02
    6400:	13 81       	ldd	r17, Z+3	; 0x03
    6402:	42 17       	cp	r20, r18
    6404:	53 07       	cpc	r21, r19
    6406:	f0 f0       	brcs	.+60     	; 0x6444 <malloc+0x94>
    6408:	42 17       	cp	r20, r18
    640a:	53 07       	cpc	r21, r19
    640c:	99 f4       	brne	.+38     	; 0x6434 <malloc+0x84>
    640e:	10 97       	sbiw	r26, 0x00	; 0
    6410:	61 f0       	breq	.+24     	; 0x642a <malloc+0x7a>
    6412:	12 96       	adiw	r26, 0x02	; 2
    6414:	0c 93       	st	X, r16
    6416:	12 97       	sbiw	r26, 0x02	; 2
    6418:	13 96       	adiw	r26, 0x03	; 3
    641a:	1c 93       	st	X, r17
    641c:	32 96       	adiw	r30, 0x02	; 2
    641e:	cf 01       	movw	r24, r30
    6420:	df 91       	pop	r29
    6422:	cf 91       	pop	r28
    6424:	1f 91       	pop	r17
    6426:	0f 91       	pop	r16
    6428:	08 95       	ret
    642a:	00 93 56 04 	sts	0x0456, r16	; 0x800456 <__flp>
    642e:	10 93 57 04 	sts	0x0457, r17	; 0x800457 <__flp+0x1>
    6432:	f4 cf       	rjmp	.-24     	; 0x641c <malloc+0x6c>
    6434:	00 97       	sbiw	r24, 0x00	; 0
    6436:	19 f0       	breq	.+6      	; 0x643e <malloc+0x8e>
    6438:	48 17       	cp	r20, r24
    643a:	59 07       	cpc	r21, r25
    643c:	18 f4       	brcc	.+6      	; 0x6444 <malloc+0x94>
    643e:	ca 01       	movw	r24, r20
    6440:	bd 01       	movw	r22, r26
    6442:	ef 01       	movw	r28, r30
    6444:	df 01       	movw	r26, r30
    6446:	f8 01       	movw	r30, r16
    6448:	c4 cf       	rjmp	.-120    	; 0x63d2 <malloc+0x22>
    644a:	90 93 57 04 	sts	0x0457, r25	; 0x800457 <__flp+0x1>
    644e:	80 93 56 04 	sts	0x0456, r24	; 0x800456 <__flp>
    6452:	d1 cf       	rjmp	.-94     	; 0x63f6 <malloc+0x46>
    6454:	fe 01       	movw	r30, r28
    6456:	e8 0f       	add	r30, r24
    6458:	f9 1f       	adc	r31, r25
    645a:	21 93       	st	Z+, r18
    645c:	31 93       	st	Z+, r19
    645e:	02 97       	sbiw	r24, 0x02	; 2
    6460:	99 83       	std	Y+1, r25	; 0x01
    6462:	88 83       	st	Y, r24
    6464:	dc cf       	rjmp	.-72     	; 0x641e <malloc+0x6e>
    6466:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <__brkval>
    646a:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <__brkval+0x1>
    646e:	89 2b       	or	r24, r25
    6470:	41 f4       	brne	.+16     	; 0x6482 <malloc+0xd2>
    6472:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__malloc_heap_start>
    6476:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__malloc_heap_start+0x1>
    647a:	90 93 59 04 	sts	0x0459, r25	; 0x800459 <__brkval+0x1>
    647e:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <__brkval>
    6482:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__malloc_heap_end>
    6486:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__malloc_heap_end+0x1>
    648a:	00 97       	sbiw	r24, 0x00	; 0
    648c:	41 f4       	brne	.+16     	; 0x649e <malloc+0xee>
    648e:	8d b7       	in	r24, 0x3d	; 61
    6490:	9e b7       	in	r25, 0x3e	; 62
    6492:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <__malloc_margin>
    6496:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <__malloc_margin+0x1>
    649a:	84 1b       	sub	r24, r20
    649c:	95 0b       	sbc	r25, r21
    649e:	40 91 58 04 	lds	r20, 0x0458	; 0x800458 <__brkval>
    64a2:	50 91 59 04 	lds	r21, 0x0459	; 0x800459 <__brkval+0x1>
    64a6:	48 17       	cp	r20, r24
    64a8:	59 07       	cpc	r21, r25
    64aa:	08 f0       	brcs	.+2      	; 0x64ae <malloc+0xfe>
    64ac:	b8 cf       	rjmp	.-144    	; 0x641e <malloc+0x6e>
    64ae:	84 1b       	sub	r24, r20
    64b0:	95 0b       	sbc	r25, r21
    64b2:	82 17       	cp	r24, r18
    64b4:	93 07       	cpc	r25, r19
    64b6:	08 f4       	brcc	.+2      	; 0x64ba <malloc+0x10a>
    64b8:	b2 cf       	rjmp	.-156    	; 0x641e <malloc+0x6e>
    64ba:	b9 01       	movw	r22, r18
    64bc:	6e 5f       	subi	r22, 0xFE	; 254
    64be:	7f 4f       	sbci	r23, 0xFF	; 255
    64c0:	86 17       	cp	r24, r22
    64c2:	97 07       	cpc	r25, r23
    64c4:	08 f4       	brcc	.+2      	; 0x64c8 <malloc+0x118>
    64c6:	ab cf       	rjmp	.-170    	; 0x641e <malloc+0x6e>
    64c8:	64 0f       	add	r22, r20
    64ca:	75 1f       	adc	r23, r21
    64cc:	70 93 59 04 	sts	0x0459, r23	; 0x800459 <__brkval+0x1>
    64d0:	60 93 58 04 	sts	0x0458, r22	; 0x800458 <__brkval>
    64d4:	fa 01       	movw	r30, r20
    64d6:	21 93       	st	Z+, r18
    64d8:	31 93       	st	Z+, r19
    64da:	a1 cf       	rjmp	.-190    	; 0x641e <malloc+0x6e>

000064dc <free>:
    64dc:	cf 93       	push	r28
    64de:	df 93       	push	r29
    64e0:	9c 01       	movw	r18, r24
    64e2:	00 97       	sbiw	r24, 0x00	; 0
    64e4:	e9 f0       	breq	.+58     	; 0x6520 <free+0x44>
    64e6:	fc 01       	movw	r30, r24
    64e8:	32 97       	sbiw	r30, 0x02	; 2
    64ea:	13 82       	std	Z+3, r1	; 0x03
    64ec:	12 82       	std	Z+2, r1	; 0x02
    64ee:	c0 91 56 04 	lds	r28, 0x0456	; 0x800456 <__flp>
    64f2:	d0 91 57 04 	lds	r29, 0x0457	; 0x800457 <__flp+0x1>
    64f6:	de 01       	movw	r26, r28
    64f8:	90 e0       	ldi	r25, 0x00	; 0
    64fa:	80 e0       	ldi	r24, 0x00	; 0
    64fc:	20 97       	sbiw	r28, 0x00	; 0
    64fe:	a1 f4       	brne	.+40     	; 0x6528 <free+0x4c>
    6500:	80 81       	ld	r24, Z
    6502:	91 81       	ldd	r25, Z+1	; 0x01
    6504:	28 0f       	add	r18, r24
    6506:	39 1f       	adc	r19, r25
    6508:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <__brkval>
    650c:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <__brkval+0x1>
    6510:	82 17       	cp	r24, r18
    6512:	93 07       	cpc	r25, r19
    6514:	09 f0       	breq	.+2      	; 0x6518 <free+0x3c>
    6516:	67 c0       	rjmp	.+206    	; 0x65e6 <free+0x10a>
    6518:	f0 93 59 04 	sts	0x0459, r31	; 0x800459 <__brkval+0x1>
    651c:	e0 93 58 04 	sts	0x0458, r30	; 0x800458 <__brkval>
    6520:	df 91       	pop	r29
    6522:	cf 91       	pop	r28
    6524:	08 95       	ret
    6526:	da 01       	movw	r26, r20
    6528:	ae 17       	cp	r26, r30
    652a:	bf 07       	cpc	r27, r31
    652c:	08 f0       	brcs	.+2      	; 0x6530 <free+0x54>
    652e:	41 c0       	rjmp	.+130    	; 0x65b2 <free+0xd6>
    6530:	12 96       	adiw	r26, 0x02	; 2
    6532:	4d 91       	ld	r20, X+
    6534:	5c 91       	ld	r21, X
    6536:	13 97       	sbiw	r26, 0x03	; 3
    6538:	cd 01       	movw	r24, r26
    653a:	41 15       	cp	r20, r1
    653c:	51 05       	cpc	r21, r1
    653e:	99 f7       	brne	.-26     	; 0x6526 <free+0x4a>
    6540:	dc 01       	movw	r26, r24
    6542:	13 96       	adiw	r26, 0x03	; 3
    6544:	fc 93       	st	X, r31
    6546:	ee 93       	st	-X, r30
    6548:	12 97       	sbiw	r26, 0x02	; 2
    654a:	4d 91       	ld	r20, X+
    654c:	5d 91       	ld	r21, X+
    654e:	a4 0f       	add	r26, r20
    6550:	b5 1f       	adc	r27, r21
    6552:	ea 17       	cp	r30, r26
    6554:	fb 07       	cpc	r31, r27
    6556:	81 f4       	brne	.+32     	; 0x6578 <free+0x9c>
    6558:	20 81       	ld	r18, Z
    655a:	31 81       	ldd	r19, Z+1	; 0x01
    655c:	2e 5f       	subi	r18, 0xFE	; 254
    655e:	3f 4f       	sbci	r19, 0xFF	; 255
    6560:	24 0f       	add	r18, r20
    6562:	35 1f       	adc	r19, r21
    6564:	dc 01       	movw	r26, r24
    6566:	11 96       	adiw	r26, 0x01	; 1
    6568:	3c 93       	st	X, r19
    656a:	2e 93       	st	-X, r18
    656c:	22 81       	ldd	r18, Z+2	; 0x02
    656e:	33 81       	ldd	r19, Z+3	; 0x03
    6570:	13 96       	adiw	r26, 0x03	; 3
    6572:	3c 93       	st	X, r19
    6574:	2e 93       	st	-X, r18
    6576:	12 97       	sbiw	r26, 0x02	; 2
    6578:	b0 e0       	ldi	r27, 0x00	; 0
    657a:	a0 e0       	ldi	r26, 0x00	; 0
    657c:	8a 81       	ldd	r24, Y+2	; 0x02
    657e:	9b 81       	ldd	r25, Y+3	; 0x03
    6580:	00 97       	sbiw	r24, 0x00	; 0
    6582:	b1 f5       	brne	.+108    	; 0x65f0 <free+0x114>
    6584:	fe 01       	movw	r30, r28
    6586:	81 91       	ld	r24, Z+
    6588:	91 91       	ld	r25, Z+
    658a:	e8 0f       	add	r30, r24
    658c:	f9 1f       	adc	r31, r25
    658e:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <__brkval>
    6592:	90 91 59 04 	lds	r25, 0x0459	; 0x800459 <__brkval+0x1>
    6596:	8e 17       	cp	r24, r30
    6598:	9f 07       	cpc	r25, r31
    659a:	11 f6       	brne	.-124    	; 0x6520 <free+0x44>
    659c:	10 97       	sbiw	r26, 0x00	; 0
    659e:	59 f5       	brne	.+86     	; 0x65f6 <free+0x11a>
    65a0:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <__flp+0x1>
    65a4:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <__flp>
    65a8:	d0 93 59 04 	sts	0x0459, r29	; 0x800459 <__brkval+0x1>
    65ac:	c0 93 58 04 	sts	0x0458, r28	; 0x800458 <__brkval>
    65b0:	b7 cf       	rjmp	.-146    	; 0x6520 <free+0x44>
    65b2:	b3 83       	std	Z+3, r27	; 0x03
    65b4:	a2 83       	std	Z+2, r26	; 0x02
    65b6:	40 81       	ld	r20, Z
    65b8:	51 81       	ldd	r21, Z+1	; 0x01
    65ba:	24 0f       	add	r18, r20
    65bc:	35 1f       	adc	r19, r21
    65be:	a2 17       	cp	r26, r18
    65c0:	b3 07       	cpc	r27, r19
    65c2:	71 f4       	brne	.+28     	; 0x65e0 <free+0x104>
    65c4:	4e 5f       	subi	r20, 0xFE	; 254
    65c6:	5f 4f       	sbci	r21, 0xFF	; 255
    65c8:	2d 91       	ld	r18, X+
    65ca:	3c 91       	ld	r19, X
    65cc:	11 97       	sbiw	r26, 0x01	; 1
    65ce:	24 0f       	add	r18, r20
    65d0:	35 1f       	adc	r19, r21
    65d2:	31 83       	std	Z+1, r19	; 0x01
    65d4:	20 83       	st	Z, r18
    65d6:	12 96       	adiw	r26, 0x02	; 2
    65d8:	2d 91       	ld	r18, X+
    65da:	3c 91       	ld	r19, X
    65dc:	33 83       	std	Z+3, r19	; 0x03
    65de:	22 83       	std	Z+2, r18	; 0x02
    65e0:	00 97       	sbiw	r24, 0x00	; 0
    65e2:	09 f0       	breq	.+2      	; 0x65e6 <free+0x10a>
    65e4:	ad cf       	rjmp	.-166    	; 0x6540 <free+0x64>
    65e6:	f0 93 57 04 	sts	0x0457, r31	; 0x800457 <__flp+0x1>
    65ea:	e0 93 56 04 	sts	0x0456, r30	; 0x800456 <__flp>
    65ee:	98 cf       	rjmp	.-208    	; 0x6520 <free+0x44>
    65f0:	de 01       	movw	r26, r28
    65f2:	ec 01       	movw	r28, r24
    65f4:	c3 cf       	rjmp	.-122    	; 0x657c <free+0xa0>
    65f6:	13 96       	adiw	r26, 0x03	; 3
    65f8:	1c 92       	st	X, r1
    65fa:	1e 92       	st	-X, r1
    65fc:	12 97       	sbiw	r26, 0x02	; 2
    65fe:	d4 cf       	rjmp	.-88     	; 0x65a8 <free+0xcc>

00006600 <strtoul>:
    6600:	a6 e0       	ldi	r26, 0x06	; 6
    6602:	b0 e0       	ldi	r27, 0x00	; 0
    6604:	e6 e0       	ldi	r30, 0x06	; 6
    6606:	f3 e3       	ldi	r31, 0x33	; 51
    6608:	0c 94 65 38 	jmp	0x70ca	; 0x70ca <__prologue_saves__+0x4>
    660c:	8d 83       	std	Y+5, r24	; 0x05
    660e:	9e 83       	std	Y+6, r25	; 0x06
    6610:	6b 01       	movw	r12, r22
    6612:	7a 01       	movw	r14, r20
    6614:	61 15       	cp	r22, r1
    6616:	71 05       	cpc	r23, r1
    6618:	29 f0       	breq	.+10     	; 0x6624 <strtoul+0x24>
    661a:	ed 81       	ldd	r30, Y+5	; 0x05
    661c:	fe 81       	ldd	r31, Y+6	; 0x06
    661e:	db 01       	movw	r26, r22
    6620:	ed 93       	st	X+, r30
    6622:	fc 93       	st	X, r31
    6624:	e1 14       	cp	r14, r1
    6626:	f1 04       	cpc	r15, r1
    6628:	29 f0       	breq	.+10     	; 0x6634 <strtoul+0x34>
    662a:	c7 01       	movw	r24, r14
    662c:	02 97       	sbiw	r24, 0x02	; 2
    662e:	83 97       	sbiw	r24, 0x23	; 35
    6630:	08 f0       	brcs	.+2      	; 0x6634 <strtoul+0x34>
    6632:	a6 c0       	rjmp	.+332    	; 0x6780 <strtoul+0x180>
    6634:	ad 80       	ldd	r10, Y+5	; 0x05
    6636:	be 80       	ldd	r11, Y+6	; 0x06
    6638:	95 01       	movw	r18, r10
    663a:	2f 5f       	subi	r18, 0xFF	; 255
    663c:	3f 4f       	sbci	r19, 0xFF	; 255
    663e:	3e 83       	std	Y+6, r19	; 0x06
    6640:	2d 83       	std	Y+5, r18	; 0x05
    6642:	d5 01       	movw	r26, r10
    6644:	1c 91       	ld	r17, X
    6646:	81 2f       	mov	r24, r17
    6648:	90 e0       	ldi	r25, 0x00	; 0
    664a:	0e 94 66 34 	call	0x68cc	; 0x68cc <isspace>
    664e:	89 2b       	or	r24, r25
    6650:	89 f7       	brne	.-30     	; 0x6634 <strtoul+0x34>
    6652:	1d 32       	cpi	r17, 0x2D	; 45
    6654:	b1 f4       	brne	.+44     	; 0x6682 <strtoul+0x82>
    6656:	ed 81       	ldd	r30, Y+5	; 0x05
    6658:	fe 81       	ldd	r31, Y+6	; 0x06
    665a:	10 81       	ld	r17, Z
    665c:	95 01       	movw	r18, r10
    665e:	2e 5f       	subi	r18, 0xFE	; 254
    6660:	3f 4f       	sbci	r19, 0xFF	; 255
    6662:	3e 83       	std	Y+6, r19	; 0x06
    6664:	2d 83       	std	Y+5, r18	; 0x05
    6666:	01 e0       	ldi	r16, 0x01	; 1
    6668:	e1 14       	cp	r14, r1
    666a:	f1 04       	cpc	r15, r1
    666c:	09 f4       	brne	.+2      	; 0x6670 <strtoul+0x70>
    666e:	01 c1       	rjmp	.+514    	; 0x6872 <strtoul+0x272>
    6670:	f0 e1       	ldi	r31, 0x10	; 16
    6672:	ef 16       	cp	r14, r31
    6674:	f1 04       	cpc	r15, r1
    6676:	09 f0       	breq	.+2      	; 0x667a <strtoul+0x7a>
    6678:	04 c1       	rjmp	.+520    	; 0x6882 <strtoul+0x282>
    667a:	10 33       	cpi	r17, 0x30	; 48
    667c:	69 f0       	breq	.+26     	; 0x6698 <strtoul+0x98>
    667e:	e0 2f       	mov	r30, r16
    6680:	1d c0       	rjmp	.+58     	; 0x66bc <strtoul+0xbc>
    6682:	1b 32       	cpi	r17, 0x2B	; 43
    6684:	39 f4       	brne	.+14     	; 0x6694 <strtoul+0x94>
    6686:	ad 81       	ldd	r26, Y+5	; 0x05
    6688:	be 81       	ldd	r27, Y+6	; 0x06
    668a:	1c 91       	ld	r17, X
    668c:	f5 01       	movw	r30, r10
    668e:	32 96       	adiw	r30, 0x02	; 2
    6690:	fe 83       	std	Y+6, r31	; 0x06
    6692:	ed 83       	std	Y+5, r30	; 0x05
    6694:	00 e0       	ldi	r16, 0x00	; 0
    6696:	e8 cf       	rjmp	.-48     	; 0x6668 <strtoul+0x68>
    6698:	ad 81       	ldd	r26, Y+5	; 0x05
    669a:	be 81       	ldd	r27, Y+6	; 0x06
    669c:	8c 91       	ld	r24, X
    669e:	8f 7d       	andi	r24, 0xDF	; 223
    66a0:	88 35       	cpi	r24, 0x58	; 88
    66a2:	09 f0       	breq	.+2      	; 0x66a6 <strtoul+0xa6>
    66a4:	72 c0       	rjmp	.+228    	; 0x678a <strtoul+0x18a>
    66a6:	11 96       	adiw	r26, 0x01	; 1
    66a8:	1c 91       	ld	r17, X
    66aa:	11 97       	sbiw	r26, 0x01	; 1
    66ac:	12 96       	adiw	r26, 0x02	; 2
    66ae:	be 83       	std	Y+6, r27	; 0x06
    66b0:	ad 83       	std	Y+5, r26	; 0x05
    66b2:	e0 2f       	mov	r30, r16
    66b4:	e2 60       	ori	r30, 0x02	; 2
    66b6:	50 e1       	ldi	r21, 0x10	; 16
    66b8:	e5 2e       	mov	r14, r21
    66ba:	f1 2c       	mov	r15, r1
    66bc:	88 24       	eor	r8, r8
    66be:	8a 94       	dec	r8
    66c0:	98 2c       	mov	r9, r8
    66c2:	a8 2c       	mov	r10, r8
    66c4:	8f e0       	ldi	r24, 0x0F	; 15
    66c6:	b8 2e       	mov	r11, r24
    66c8:	81 c0       	rjmp	.+258    	; 0x67cc <strtoul+0x1cc>
    66ca:	e0 2f       	mov	r30, r16
    66cc:	10 e3       	ldi	r17, 0x30	; 48
    66ce:	29 e9       	ldi	r18, 0x99	; 153
    66d0:	82 2e       	mov	r8, r18
    66d2:	98 2c       	mov	r9, r8
    66d4:	a8 2c       	mov	r10, r8
    66d6:	29 e1       	ldi	r18, 0x19	; 25
    66d8:	b2 2e       	mov	r11, r18
    66da:	78 c0       	rjmp	.+240    	; 0x67cc <strtoul+0x1cc>
    66dc:	e0 2f       	mov	r30, r16
    66de:	10 e3       	ldi	r17, 0x30	; 48
    66e0:	ed cf       	rjmp	.-38     	; 0x66bc <strtoul+0xbc>
    66e2:	e0 2f       	mov	r30, r16
    66e4:	88 24       	eor	r8, r8
    66e6:	8a 94       	dec	r8
    66e8:	98 2c       	mov	r9, r8
    66ea:	a8 2c       	mov	r10, r8
    66ec:	3f e1       	ldi	r19, 0x1F	; 31
    66ee:	b3 2e       	mov	r11, r19
    66f0:	6d c0       	rjmp	.+218    	; 0x67cc <strtoul+0x1cc>
    66f2:	e0 2f       	mov	r30, r16
    66f4:	10 e3       	ldi	r17, 0x30	; 48
    66f6:	48 e0       	ldi	r20, 0x08	; 8
    66f8:	e4 2e       	mov	r14, r20
    66fa:	f1 2c       	mov	r15, r1
    66fc:	f3 cf       	rjmp	.-26     	; 0x66e4 <strtoul+0xe4>
    66fe:	8f ef       	ldi	r24, 0xFF	; 255
    6700:	b2 c0       	rjmp	.+356    	; 0x6866 <strtoul+0x266>
    6702:	c1 14       	cp	r12, r1
    6704:	d1 04       	cpc	r13, r1
    6706:	49 f0       	breq	.+18     	; 0x671a <strtoul+0x11a>
    6708:	88 23       	and	r24, r24
    670a:	79 f1       	breq	.+94     	; 0x676a <strtoul+0x16a>
    670c:	2d 81       	ldd	r18, Y+5	; 0x05
    670e:	3e 81       	ldd	r19, Y+6	; 0x06
    6710:	21 50       	subi	r18, 0x01	; 1
    6712:	31 09       	sbc	r19, r1
    6714:	f6 01       	movw	r30, r12
    6716:	31 83       	std	Z+1, r19	; 0x01
    6718:	20 83       	st	Z, r18
    671a:	00 23       	and	r16, r16
    671c:	79 f0       	breq	.+30     	; 0x673c <strtoul+0x13c>
    671e:	29 81       	ldd	r18, Y+1	; 0x01
    6720:	3a 81       	ldd	r19, Y+2	; 0x02
    6722:	4b 81       	ldd	r20, Y+3	; 0x03
    6724:	5c 81       	ldd	r21, Y+4	; 0x04
    6726:	50 95       	com	r21
    6728:	40 95       	com	r20
    672a:	30 95       	com	r19
    672c:	21 95       	neg	r18
    672e:	3f 4f       	sbci	r19, 0xFF	; 255
    6730:	4f 4f       	sbci	r20, 0xFF	; 255
    6732:	5f 4f       	sbci	r21, 0xFF	; 255
    6734:	29 83       	std	Y+1, r18	; 0x01
    6736:	3a 83       	std	Y+2, r19	; 0x02
    6738:	4b 83       	std	Y+3, r20	; 0x03
    673a:	5c 83       	std	Y+4, r21	; 0x04
    673c:	8f 3f       	cpi	r24, 0xFF	; 255
    673e:	69 f4       	brne	.+26     	; 0x675a <strtoul+0x15a>
    6740:	82 e2       	ldi	r24, 0x22	; 34
    6742:	90 e0       	ldi	r25, 0x00	; 0
    6744:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <errno+0x1>
    6748:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <errno>
    674c:	8f ef       	ldi	r24, 0xFF	; 255
    674e:	9f ef       	ldi	r25, 0xFF	; 255
    6750:	dc 01       	movw	r26, r24
    6752:	89 83       	std	Y+1, r24	; 0x01
    6754:	9a 83       	std	Y+2, r25	; 0x02
    6756:	ab 83       	std	Y+3, r26	; 0x03
    6758:	bc 83       	std	Y+4, r27	; 0x04
    675a:	69 81       	ldd	r22, Y+1	; 0x01
    675c:	7a 81       	ldd	r23, Y+2	; 0x02
    675e:	8b 81       	ldd	r24, Y+3	; 0x03
    6760:	9c 81       	ldd	r25, Y+4	; 0x04
    6762:	26 96       	adiw	r28, 0x06	; 6
    6764:	e0 e1       	ldi	r30, 0x10	; 16
    6766:	0c 94 81 38 	jmp	0x7102	; 0x7102 <__epilogue_restores__+0x4>
    676a:	e1 ff       	sbrs	r30, 1
    676c:	06 c0       	rjmp	.+12     	; 0x677a <strtoul+0x17a>
    676e:	ed 81       	ldd	r30, Y+5	; 0x05
    6770:	fe 81       	ldd	r31, Y+6	; 0x06
    6772:	32 97       	sbiw	r30, 0x02	; 2
    6774:	d6 01       	movw	r26, r12
    6776:	ed 93       	st	X+, r30
    6778:	fc 93       	st	X, r31
    677a:	00 23       	and	r16, r16
    677c:	71 f3       	breq	.-36     	; 0x675a <strtoul+0x15a>
    677e:	cf cf       	rjmp	.-98     	; 0x671e <strtoul+0x11e>
    6780:	19 82       	std	Y+1, r1	; 0x01
    6782:	1a 82       	std	Y+2, r1	; 0x02
    6784:	1b 82       	std	Y+3, r1	; 0x03
    6786:	1c 82       	std	Y+4, r1	; 0x04
    6788:	e8 cf       	rjmp	.-48     	; 0x675a <strtoul+0x15a>
    678a:	e1 14       	cp	r14, r1
    678c:	f1 04       	cpc	r15, r1
    678e:	09 f4       	brne	.+2      	; 0x6792 <strtoul+0x192>
    6790:	b0 cf       	rjmp	.-160    	; 0x66f2 <strtoul+0xf2>
    6792:	ba e0       	ldi	r27, 0x0A	; 10
    6794:	eb 16       	cp	r14, r27
    6796:	f1 04       	cpc	r15, r1
    6798:	09 f4       	brne	.+2      	; 0x679c <strtoul+0x19c>
    679a:	97 cf       	rjmp	.-210    	; 0x66ca <strtoul+0xca>
    679c:	e0 e1       	ldi	r30, 0x10	; 16
    679e:	ee 16       	cp	r14, r30
    67a0:	f1 04       	cpc	r15, r1
    67a2:	09 f4       	brne	.+2      	; 0x67a6 <strtoul+0x1a6>
    67a4:	9b cf       	rjmp	.-202    	; 0x66dc <strtoul+0xdc>
    67a6:	10 e3       	ldi	r17, 0x30	; 48
    67a8:	f8 e0       	ldi	r31, 0x08	; 8
    67aa:	ef 16       	cp	r14, r31
    67ac:	f1 04       	cpc	r15, r1
    67ae:	09 f4       	brne	.+2      	; 0x67b2 <strtoul+0x1b2>
    67b0:	98 cf       	rjmp	.-208    	; 0x66e2 <strtoul+0xe2>
    67b2:	6f ef       	ldi	r22, 0xFF	; 255
    67b4:	7f ef       	ldi	r23, 0xFF	; 255
    67b6:	cb 01       	movw	r24, r22
    67b8:	97 01       	movw	r18, r14
    67ba:	0f 2c       	mov	r0, r15
    67bc:	00 0c       	add	r0, r0
    67be:	44 0b       	sbc	r20, r20
    67c0:	55 0b       	sbc	r21, r21
    67c2:	0e 94 77 31 	call	0x62ee	; 0x62ee <__udivmodsi4>
    67c6:	49 01       	movw	r8, r18
    67c8:	5a 01       	movw	r10, r20
    67ca:	e0 2f       	mov	r30, r16
    67cc:	80 e0       	ldi	r24, 0x00	; 0
    67ce:	19 82       	std	Y+1, r1	; 0x01
    67d0:	1a 82       	std	Y+2, r1	; 0x02
    67d2:	1b 82       	std	Y+3, r1	; 0x03
    67d4:	1c 82       	std	Y+4, r1	; 0x04
    67d6:	27 01       	movw	r4, r14
    67d8:	0f 2c       	mov	r0, r15
    67da:	00 0c       	add	r0, r0
    67dc:	66 08       	sbc	r6, r6
    67de:	77 08       	sbc	r7, r7
    67e0:	f0 ed       	ldi	r31, 0xD0	; 208
    67e2:	f1 0f       	add	r31, r17
    67e4:	fa 30       	cpi	r31, 0x0A	; 10
    67e6:	60 f0       	brcs	.+24     	; 0x6800 <strtoul+0x200>
    67e8:	9f eb       	ldi	r25, 0xBF	; 191
    67ea:	91 0f       	add	r25, r17
    67ec:	f9 ec       	ldi	r31, 0xC9	; 201
    67ee:	9a 31       	cpi	r25, 0x1A	; 26
    67f0:	30 f0       	brcs	.+12     	; 0x67fe <strtoul+0x1fe>
    67f2:	9f e9       	ldi	r25, 0x9F	; 159
    67f4:	91 0f       	add	r25, r17
    67f6:	9a 31       	cpi	r25, 0x1A	; 26
    67f8:	08 f0       	brcs	.+2      	; 0x67fc <strtoul+0x1fc>
    67fa:	83 cf       	rjmp	.-250    	; 0x6702 <strtoul+0x102>
    67fc:	f9 ea       	ldi	r31, 0xA9	; 169
    67fe:	f1 0f       	add	r31, r17
    6800:	fe 15       	cp	r31, r14
    6802:	1f 04       	cpc	r1, r15
    6804:	0c f0       	brlt	.+2      	; 0x6808 <strtoul+0x208>
    6806:	7d cf       	rjmp	.-262    	; 0x6702 <strtoul+0x102>
    6808:	8f 3f       	cpi	r24, 0xFF	; 255
    680a:	69 f1       	breq	.+90     	; 0x6866 <strtoul+0x266>
    680c:	29 81       	ldd	r18, Y+1	; 0x01
    680e:	3a 81       	ldd	r19, Y+2	; 0x02
    6810:	4b 81       	ldd	r20, Y+3	; 0x03
    6812:	5c 81       	ldd	r21, Y+4	; 0x04
    6814:	82 16       	cp	r8, r18
    6816:	93 06       	cpc	r9, r19
    6818:	a4 06       	cpc	r10, r20
    681a:	b5 06       	cpc	r11, r21
    681c:	08 f4       	brcc	.+2      	; 0x6820 <strtoul+0x220>
    681e:	6f cf       	rjmp	.-290    	; 0x66fe <strtoul+0xfe>
    6820:	a3 01       	movw	r20, r6
    6822:	92 01       	movw	r18, r4
    6824:	69 81       	ldd	r22, Y+1	; 0x01
    6826:	7a 81       	ldd	r23, Y+2	; 0x02
    6828:	8b 81       	ldd	r24, Y+3	; 0x03
    682a:	9c 81       	ldd	r25, Y+4	; 0x04
    682c:	0e 94 53 31 	call	0x62a6	; 0x62a6 <__mulsi3>
    6830:	69 83       	std	Y+1, r22	; 0x01
    6832:	7a 83       	std	Y+2, r23	; 0x02
    6834:	8b 83       	std	Y+3, r24	; 0x03
    6836:	9c 83       	std	Y+4, r25	; 0x04
    6838:	8f 2f       	mov	r24, r31
    683a:	90 e0       	ldi	r25, 0x00	; 0
    683c:	b0 e0       	ldi	r27, 0x00	; 0
    683e:	a0 e0       	ldi	r26, 0x00	; 0
    6840:	29 81       	ldd	r18, Y+1	; 0x01
    6842:	3a 81       	ldd	r19, Y+2	; 0x02
    6844:	4b 81       	ldd	r20, Y+3	; 0x03
    6846:	5c 81       	ldd	r21, Y+4	; 0x04
    6848:	28 0f       	add	r18, r24
    684a:	39 1f       	adc	r19, r25
    684c:	4a 1f       	adc	r20, r26
    684e:	5b 1f       	adc	r21, r27
    6850:	29 83       	std	Y+1, r18	; 0x01
    6852:	3a 83       	std	Y+2, r19	; 0x02
    6854:	4b 83       	std	Y+3, r20	; 0x03
    6856:	5c 83       	std	Y+4, r21	; 0x04
    6858:	28 17       	cp	r18, r24
    685a:	39 07       	cpc	r19, r25
    685c:	4a 07       	cpc	r20, r26
    685e:	5b 07       	cpc	r21, r27
    6860:	08 f4       	brcc	.+2      	; 0x6864 <strtoul+0x264>
    6862:	4d cf       	rjmp	.-358    	; 0x66fe <strtoul+0xfe>
    6864:	81 e0       	ldi	r24, 0x01	; 1
    6866:	ad 81       	ldd	r26, Y+5	; 0x05
    6868:	be 81       	ldd	r27, Y+6	; 0x06
    686a:	1d 91       	ld	r17, X+
    686c:	be 83       	std	Y+6, r27	; 0x06
    686e:	ad 83       	std	Y+5, r26	; 0x05
    6870:	b7 cf       	rjmp	.-146    	; 0x67e0 <strtoul+0x1e0>
    6872:	10 33       	cpi	r17, 0x30	; 48
    6874:	09 f4       	brne	.+2      	; 0x6878 <strtoul+0x278>
    6876:	10 cf       	rjmp	.-480    	; 0x6698 <strtoul+0x98>
    6878:	e0 2f       	mov	r30, r16
    687a:	9a e0       	ldi	r25, 0x0A	; 10
    687c:	e9 2e       	mov	r14, r25
    687e:	f1 2c       	mov	r15, r1
    6880:	26 cf       	rjmp	.-436    	; 0x66ce <strtoul+0xce>
    6882:	9a e0       	ldi	r25, 0x0A	; 10
    6884:	e9 16       	cp	r14, r25
    6886:	f1 04       	cpc	r15, r1
    6888:	09 f0       	breq	.+2      	; 0x688c <strtoul+0x28c>
    688a:	8e cf       	rjmp	.-228    	; 0x67a8 <strtoul+0x1a8>
    688c:	e0 2f       	mov	r30, r16
    688e:	1f cf       	rjmp	.-450    	; 0x66ce <strtoul+0xce>

00006890 <atoi>:
    6890:	fc 01       	movw	r30, r24
    6892:	88 27       	eor	r24, r24
    6894:	99 27       	eor	r25, r25
    6896:	e8 94       	clt
    6898:	21 91       	ld	r18, Z+
    689a:	20 32       	cpi	r18, 0x20	; 32
    689c:	e9 f3       	breq	.-6      	; 0x6898 <atoi+0x8>
    689e:	29 30       	cpi	r18, 0x09	; 9
    68a0:	10 f0       	brcs	.+4      	; 0x68a6 <atoi+0x16>
    68a2:	2e 30       	cpi	r18, 0x0E	; 14
    68a4:	c8 f3       	brcs	.-14     	; 0x6898 <atoi+0x8>
    68a6:	2b 32       	cpi	r18, 0x2B	; 43
    68a8:	41 f0       	breq	.+16     	; 0x68ba <atoi+0x2a>
    68aa:	2d 32       	cpi	r18, 0x2D	; 45
    68ac:	39 f4       	brne	.+14     	; 0x68bc <atoi+0x2c>
    68ae:	68 94       	set
    68b0:	04 c0       	rjmp	.+8      	; 0x68ba <atoi+0x2a>
    68b2:	0e 94 4a 35 	call	0x6a94	; 0x6a94 <__mulhi_const_10>
    68b6:	82 0f       	add	r24, r18
    68b8:	91 1d       	adc	r25, r1
    68ba:	21 91       	ld	r18, Z+
    68bc:	20 53       	subi	r18, 0x30	; 48
    68be:	2a 30       	cpi	r18, 0x0A	; 10
    68c0:	c0 f3       	brcs	.-16     	; 0x68b2 <atoi+0x22>
    68c2:	1e f4       	brtc	.+6      	; 0x68ca <atoi+0x3a>
    68c4:	90 95       	com	r25
    68c6:	81 95       	neg	r24
    68c8:	9f 4f       	sbci	r25, 0xFF	; 255
    68ca:	08 95       	ret

000068cc <isspace>:
    68cc:	91 11       	cpse	r25, r1
    68ce:	0c 94 62 37 	jmp	0x6ec4	; 0x6ec4 <__ctype_isfalse>
    68d2:	80 32       	cpi	r24, 0x20	; 32
    68d4:	19 f0       	breq	.+6      	; 0x68dc <isspace+0x10>
    68d6:	89 50       	subi	r24, 0x09	; 9
    68d8:	85 50       	subi	r24, 0x05	; 5
    68da:	c8 f7       	brcc	.-14     	; 0x68ce <isspace+0x2>
    68dc:	08 95       	ret

000068de <memcmp_P>:
    68de:	fb 01       	movw	r30, r22
    68e0:	dc 01       	movw	r26, r24
    68e2:	04 c0       	rjmp	.+8      	; 0x68ec <memcmp_P+0xe>
    68e4:	8d 91       	ld	r24, X+
    68e6:	05 90       	lpm	r0, Z+
    68e8:	80 19       	sub	r24, r0
    68ea:	21 f4       	brne	.+8      	; 0x68f4 <memcmp_P+0x16>
    68ec:	41 50       	subi	r20, 0x01	; 1
    68ee:	50 40       	sbci	r21, 0x00	; 0
    68f0:	c8 f7       	brcc	.-14     	; 0x68e4 <memcmp_P+0x6>
    68f2:	88 1b       	sub	r24, r24
    68f4:	99 0b       	sbc	r25, r25
    68f6:	08 95       	ret

000068f8 <strcat_P>:
    68f8:	fb 01       	movw	r30, r22
    68fa:	dc 01       	movw	r26, r24
    68fc:	0d 90       	ld	r0, X+
    68fe:	00 20       	and	r0, r0
    6900:	e9 f7       	brne	.-6      	; 0x68fc <strcat_P+0x4>
    6902:	11 97       	sbiw	r26, 0x01	; 1
    6904:	05 90       	lpm	r0, Z+
    6906:	0d 92       	st	X+, r0
    6908:	00 20       	and	r0, r0
    690a:	e1 f7       	brne	.-8      	; 0x6904 <strcat_P+0xc>
    690c:	08 95       	ret

0000690e <strstr_P>:
    690e:	fb 01       	movw	r30, r22
    6910:	55 91       	lpm	r21, Z+
    6912:	55 23       	and	r21, r21
    6914:	a9 f0       	breq	.+42     	; 0x6940 <strstr_P+0x32>
    6916:	bf 01       	movw	r22, r30
    6918:	dc 01       	movw	r26, r24
    691a:	4d 91       	ld	r20, X+
    691c:	45 17       	cp	r20, r21
    691e:	41 11       	cpse	r20, r1
    6920:	e1 f7       	brne	.-8      	; 0x691a <strstr_P+0xc>
    6922:	59 f4       	brne	.+22     	; 0x693a <strstr_P+0x2c>
    6924:	cd 01       	movw	r24, r26
    6926:	05 90       	lpm	r0, Z+
    6928:	00 20       	and	r0, r0
    692a:	49 f0       	breq	.+18     	; 0x693e <strstr_P+0x30>
    692c:	4d 91       	ld	r20, X+
    692e:	40 15       	cp	r20, r0
    6930:	41 11       	cpse	r20, r1
    6932:	c9 f3       	breq	.-14     	; 0x6926 <strstr_P+0x18>
    6934:	fb 01       	movw	r30, r22
    6936:	41 11       	cpse	r20, r1
    6938:	ef cf       	rjmp	.-34     	; 0x6918 <strstr_P+0xa>
    693a:	81 e0       	ldi	r24, 0x01	; 1
    693c:	90 e0       	ldi	r25, 0x00	; 0
    693e:	01 97       	sbiw	r24, 0x01	; 1
    6940:	08 95       	ret

00006942 <strtok>:
    6942:	4a e5       	ldi	r20, 0x5A	; 90
    6944:	54 e0       	ldi	r21, 0x04	; 4
    6946:	0e 94 0d 35 	call	0x6a1a	; 0x6a1a <strtok_r>
    694a:	08 95       	ret

0000694c <memcmp>:
    694c:	fb 01       	movw	r30, r22
    694e:	dc 01       	movw	r26, r24
    6950:	04 c0       	rjmp	.+8      	; 0x695a <memcmp+0xe>
    6952:	8d 91       	ld	r24, X+
    6954:	01 90       	ld	r0, Z+
    6956:	80 19       	sub	r24, r0
    6958:	21 f4       	brne	.+8      	; 0x6962 <memcmp+0x16>
    695a:	41 50       	subi	r20, 0x01	; 1
    695c:	50 40       	sbci	r21, 0x00	; 0
    695e:	c8 f7       	brcc	.-14     	; 0x6952 <memcmp+0x6>
    6960:	88 1b       	sub	r24, r24
    6962:	99 0b       	sbc	r25, r25
    6964:	08 95       	ret

00006966 <memcpy>:
    6966:	fb 01       	movw	r30, r22
    6968:	dc 01       	movw	r26, r24
    696a:	02 c0       	rjmp	.+4      	; 0x6970 <memcpy+0xa>
    696c:	01 90       	ld	r0, Z+
    696e:	0d 92       	st	X+, r0
    6970:	41 50       	subi	r20, 0x01	; 1
    6972:	50 40       	sbci	r21, 0x00	; 0
    6974:	d8 f7       	brcc	.-10     	; 0x696c <memcpy+0x6>
    6976:	08 95       	ret

00006978 <memmove>:
    6978:	68 17       	cp	r22, r24
    697a:	79 07       	cpc	r23, r25
    697c:	68 f4       	brcc	.+26     	; 0x6998 <memmove+0x20>
    697e:	fb 01       	movw	r30, r22
    6980:	dc 01       	movw	r26, r24
    6982:	e4 0f       	add	r30, r20
    6984:	f5 1f       	adc	r31, r21
    6986:	a4 0f       	add	r26, r20
    6988:	b5 1f       	adc	r27, r21
    698a:	02 c0       	rjmp	.+4      	; 0x6990 <memmove+0x18>
    698c:	02 90       	ld	r0, -Z
    698e:	0e 92       	st	-X, r0
    6990:	41 50       	subi	r20, 0x01	; 1
    6992:	50 40       	sbci	r21, 0x00	; 0
    6994:	d8 f7       	brcc	.-10     	; 0x698c <memmove+0x14>
    6996:	08 95       	ret
    6998:	0c 94 b3 34 	jmp	0x6966	; 0x6966 <memcpy>

0000699c <memset>:
    699c:	dc 01       	movw	r26, r24
    699e:	01 c0       	rjmp	.+2      	; 0x69a2 <memset+0x6>
    69a0:	6d 93       	st	X+, r22
    69a2:	41 50       	subi	r20, 0x01	; 1
    69a4:	50 40       	sbci	r21, 0x00	; 0
    69a6:	e0 f7       	brcc	.-8      	; 0x69a0 <memset+0x4>
    69a8:	08 95       	ret

000069aa <strchr>:
    69aa:	fc 01       	movw	r30, r24
    69ac:	81 91       	ld	r24, Z+
    69ae:	86 17       	cp	r24, r22
    69b0:	21 f0       	breq	.+8      	; 0x69ba <strchr+0x10>
    69b2:	88 23       	and	r24, r24
    69b4:	d9 f7       	brne	.-10     	; 0x69ac <strchr+0x2>
    69b6:	99 27       	eor	r25, r25
    69b8:	08 95       	ret
    69ba:	31 97       	sbiw	r30, 0x01	; 1
    69bc:	cf 01       	movw	r24, r30
    69be:	08 95       	ret

000069c0 <strlen>:
    69c0:	fc 01       	movw	r30, r24
    69c2:	01 90       	ld	r0, Z+
    69c4:	00 20       	and	r0, r0
    69c6:	e9 f7       	brne	.-6      	; 0x69c2 <strlen+0x2>
    69c8:	80 95       	com	r24
    69ca:	90 95       	com	r25
    69cc:	8e 0f       	add	r24, r30
    69ce:	9f 1f       	adc	r25, r31
    69d0:	08 95       	ret

000069d2 <strlwr>:
    69d2:	dc 01       	movw	r26, r24
    69d4:	6c 91       	ld	r22, X
    69d6:	61 54       	subi	r22, 0x41	; 65
    69d8:	6a 31       	cpi	r22, 0x1A	; 26
    69da:	08 f0       	brcs	.+2      	; 0x69de <strlwr+0xc>
    69dc:	60 52       	subi	r22, 0x20	; 32
    69de:	6f 59       	subi	r22, 0x9F	; 159
    69e0:	6d 93       	st	X+, r22
    69e2:	c1 f7       	brne	.-16     	; 0x69d4 <strlwr+0x2>
    69e4:	08 95       	ret

000069e6 <strstr>:
    69e6:	fb 01       	movw	r30, r22
    69e8:	51 91       	ld	r21, Z+
    69ea:	55 23       	and	r21, r21
    69ec:	a9 f0       	breq	.+42     	; 0x6a18 <strstr+0x32>
    69ee:	bf 01       	movw	r22, r30
    69f0:	dc 01       	movw	r26, r24
    69f2:	4d 91       	ld	r20, X+
    69f4:	45 17       	cp	r20, r21
    69f6:	41 11       	cpse	r20, r1
    69f8:	e1 f7       	brne	.-8      	; 0x69f2 <strstr+0xc>
    69fa:	59 f4       	brne	.+22     	; 0x6a12 <strstr+0x2c>
    69fc:	cd 01       	movw	r24, r26
    69fe:	01 90       	ld	r0, Z+
    6a00:	00 20       	and	r0, r0
    6a02:	49 f0       	breq	.+18     	; 0x6a16 <strstr+0x30>
    6a04:	4d 91       	ld	r20, X+
    6a06:	40 15       	cp	r20, r0
    6a08:	41 11       	cpse	r20, r1
    6a0a:	c9 f3       	breq	.-14     	; 0x69fe <strstr+0x18>
    6a0c:	fb 01       	movw	r30, r22
    6a0e:	41 11       	cpse	r20, r1
    6a10:	ef cf       	rjmp	.-34     	; 0x69f0 <strstr+0xa>
    6a12:	81 e0       	ldi	r24, 0x01	; 1
    6a14:	90 e0       	ldi	r25, 0x00	; 0
    6a16:	01 97       	sbiw	r24, 0x01	; 1
    6a18:	08 95       	ret

00006a1a <strtok_r>:
    6a1a:	fa 01       	movw	r30, r20
    6a1c:	a1 91       	ld	r26, Z+
    6a1e:	b0 81       	ld	r27, Z
    6a20:	00 97       	sbiw	r24, 0x00	; 0
    6a22:	19 f4       	brne	.+6      	; 0x6a2a <strtok_r+0x10>
    6a24:	10 97       	sbiw	r26, 0x00	; 0
    6a26:	e1 f0       	breq	.+56     	; 0x6a60 <strtok_r+0x46>
    6a28:	cd 01       	movw	r24, r26
    6a2a:	dc 01       	movw	r26, r24
    6a2c:	cd 01       	movw	r24, r26
    6a2e:	0d 90       	ld	r0, X+
    6a30:	00 20       	and	r0, r0
    6a32:	11 f4       	brne	.+4      	; 0x6a38 <strtok_r+0x1e>
    6a34:	c0 01       	movw	r24, r0
    6a36:	13 c0       	rjmp	.+38     	; 0x6a5e <strtok_r+0x44>
    6a38:	fb 01       	movw	r30, r22
    6a3a:	21 91       	ld	r18, Z+
    6a3c:	22 23       	and	r18, r18
    6a3e:	19 f0       	breq	.+6      	; 0x6a46 <strtok_r+0x2c>
    6a40:	20 15       	cp	r18, r0
    6a42:	d9 f7       	brne	.-10     	; 0x6a3a <strtok_r+0x20>
    6a44:	f3 cf       	rjmp	.-26     	; 0x6a2c <strtok_r+0x12>
    6a46:	fb 01       	movw	r30, r22
    6a48:	21 91       	ld	r18, Z+
    6a4a:	20 15       	cp	r18, r0
    6a4c:	19 f4       	brne	.+6      	; 0x6a54 <strtok_r+0x3a>
    6a4e:	1e 92       	st	-X, r1
    6a50:	11 96       	adiw	r26, 0x01	; 1
    6a52:	06 c0       	rjmp	.+12     	; 0x6a60 <strtok_r+0x46>
    6a54:	22 23       	and	r18, r18
    6a56:	c1 f7       	brne	.-16     	; 0x6a48 <strtok_r+0x2e>
    6a58:	0d 90       	ld	r0, X+
    6a5a:	00 20       	and	r0, r0
    6a5c:	a1 f7       	brne	.-24     	; 0x6a46 <strtok_r+0x2c>
    6a5e:	d0 01       	movw	r26, r0
    6a60:	fa 01       	movw	r30, r20
    6a62:	a1 93       	st	Z+, r26
    6a64:	b0 83       	st	Z, r27
    6a66:	08 95       	ret

00006a68 <itoa>:
    6a68:	45 32       	cpi	r20, 0x25	; 37
    6a6a:	51 05       	cpc	r21, r1
    6a6c:	20 f4       	brcc	.+8      	; 0x6a76 <itoa+0xe>
    6a6e:	42 30       	cpi	r20, 0x02	; 2
    6a70:	10 f0       	brcs	.+4      	; 0x6a76 <itoa+0xe>
    6a72:	0c 94 3f 35 	jmp	0x6a7e	; 0x6a7e <__itoa_ncheck>
    6a76:	fb 01       	movw	r30, r22
    6a78:	10 82       	st	Z, r1
    6a7a:	cb 01       	movw	r24, r22
    6a7c:	08 95       	ret

00006a7e <__itoa_ncheck>:
    6a7e:	bb 27       	eor	r27, r27
    6a80:	4a 30       	cpi	r20, 0x0A	; 10
    6a82:	31 f4       	brne	.+12     	; 0x6a90 <__itoa_ncheck+0x12>
    6a84:	99 23       	and	r25, r25
    6a86:	22 f4       	brpl	.+8      	; 0x6a90 <__itoa_ncheck+0x12>
    6a88:	bd e2       	ldi	r27, 0x2D	; 45
    6a8a:	90 95       	com	r25
    6a8c:	81 95       	neg	r24
    6a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    6a90:	0c 94 53 35 	jmp	0x6aa6	; 0x6aa6 <__utoa_common>

00006a94 <__mulhi_const_10>:
    6a94:	7a e0       	ldi	r23, 0x0A	; 10
    6a96:	97 9f       	mul	r25, r23
    6a98:	90 2d       	mov	r25, r0
    6a9a:	87 9f       	mul	r24, r23
    6a9c:	80 2d       	mov	r24, r0
    6a9e:	91 0d       	add	r25, r1
    6aa0:	11 24       	eor	r1, r1
    6aa2:	08 95       	ret

00006aa4 <__utoa_ncheck>:
    6aa4:	bb 27       	eor	r27, r27

00006aa6 <__utoa_common>:
    6aa6:	fb 01       	movw	r30, r22
    6aa8:	55 27       	eor	r21, r21
    6aaa:	aa 27       	eor	r26, r26
    6aac:	88 0f       	add	r24, r24
    6aae:	99 1f       	adc	r25, r25
    6ab0:	aa 1f       	adc	r26, r26
    6ab2:	a4 17       	cp	r26, r20
    6ab4:	10 f0       	brcs	.+4      	; 0x6aba <__utoa_common+0x14>
    6ab6:	a4 1b       	sub	r26, r20
    6ab8:	83 95       	inc	r24
    6aba:	50 51       	subi	r21, 0x10	; 16
    6abc:	b9 f7       	brne	.-18     	; 0x6aac <__utoa_common+0x6>
    6abe:	a0 5d       	subi	r26, 0xD0	; 208
    6ac0:	aa 33       	cpi	r26, 0x3A	; 58
    6ac2:	08 f0       	brcs	.+2      	; 0x6ac6 <__utoa_common+0x20>
    6ac4:	a9 5d       	subi	r26, 0xD9	; 217
    6ac6:	a1 93       	st	Z+, r26
    6ac8:	00 97       	sbiw	r24, 0x00	; 0
    6aca:	79 f7       	brne	.-34     	; 0x6aaa <__utoa_common+0x4>
    6acc:	b1 11       	cpse	r27, r1
    6ace:	b1 93       	st	Z+, r27
    6ad0:	11 92       	st	Z+, r1
    6ad2:	cb 01       	movw	r24, r22
    6ad4:	0c 94 7b 37 	jmp	0x6ef6	; 0x6ef6 <strrev>

00006ad8 <sprintf_P>:
    6ad8:	ae e0       	ldi	r26, 0x0E	; 14
    6ada:	b0 e0       	ldi	r27, 0x00	; 0
    6adc:	e2 e7       	ldi	r30, 0x72	; 114
    6ade:	f5 e3       	ldi	r31, 0x35	; 53
    6ae0:	0c 94 71 38 	jmp	0x70e2	; 0x70e2 <__prologue_saves__+0x1c>
    6ae4:	0d 89       	ldd	r16, Y+21	; 0x15
    6ae6:	1e 89       	ldd	r17, Y+22	; 0x16
    6ae8:	8e e0       	ldi	r24, 0x0E	; 14
    6aea:	8c 83       	std	Y+4, r24	; 0x04
    6aec:	1a 83       	std	Y+2, r17	; 0x02
    6aee:	09 83       	std	Y+1, r16	; 0x01
    6af0:	8f ef       	ldi	r24, 0xFF	; 255
    6af2:	9f e7       	ldi	r25, 0x7F	; 127
    6af4:	9e 83       	std	Y+6, r25	; 0x06
    6af6:	8d 83       	std	Y+5, r24	; 0x05
    6af8:	ae 01       	movw	r20, r28
    6afa:	47 5e       	subi	r20, 0xE7	; 231
    6afc:	5f 4f       	sbci	r21, 0xFF	; 255
    6afe:	6f 89       	ldd	r22, Y+23	; 0x17
    6b00:	78 8d       	ldd	r23, Y+24	; 0x18
    6b02:	ce 01       	movw	r24, r28
    6b04:	01 96       	adiw	r24, 0x01	; 1
    6b06:	0e 94 8f 35 	call	0x6b1e	; 0x6b1e <vfprintf>
    6b0a:	2f 81       	ldd	r18, Y+7	; 0x07
    6b0c:	38 85       	ldd	r19, Y+8	; 0x08
    6b0e:	02 0f       	add	r16, r18
    6b10:	13 1f       	adc	r17, r19
    6b12:	f8 01       	movw	r30, r16
    6b14:	10 82       	st	Z, r1
    6b16:	2e 96       	adiw	r28, 0x0e	; 14
    6b18:	e4 e0       	ldi	r30, 0x04	; 4
    6b1a:	0c 94 8d 38 	jmp	0x711a	; 0x711a <__epilogue_restores__+0x1c>

00006b1e <vfprintf>:
    6b1e:	af e0       	ldi	r26, 0x0F	; 15
    6b20:	b0 e0       	ldi	r27, 0x00	; 0
    6b22:	e5 e9       	ldi	r30, 0x95	; 149
    6b24:	f5 e3       	ldi	r31, 0x35	; 53
    6b26:	0c 94 63 38 	jmp	0x70c6	; 0x70c6 <__prologue_saves__>
    6b2a:	7c 01       	movw	r14, r24
    6b2c:	3b 01       	movw	r6, r22
    6b2e:	8a 01       	movw	r16, r20
    6b30:	dc 01       	movw	r26, r24
    6b32:	17 96       	adiw	r26, 0x07	; 7
    6b34:	1c 92       	st	X, r1
    6b36:	1e 92       	st	-X, r1
    6b38:	16 97       	sbiw	r26, 0x06	; 6
    6b3a:	13 96       	adiw	r26, 0x03	; 3
    6b3c:	8c 91       	ld	r24, X
    6b3e:	81 ff       	sbrs	r24, 1
    6b40:	be c1       	rjmp	.+892    	; 0x6ebe <vfprintf+0x3a0>
    6b42:	9a e0       	ldi	r25, 0x0A	; 10
    6b44:	29 2e       	mov	r2, r25
    6b46:	fe 01       	movw	r30, r28
    6b48:	31 96       	adiw	r30, 0x01	; 1
    6b4a:	4f 01       	movw	r8, r30
    6b4c:	d7 01       	movw	r26, r14
    6b4e:	13 96       	adiw	r26, 0x03	; 3
    6b50:	9c 91       	ld	r25, X
    6b52:	f3 01       	movw	r30, r6
    6b54:	93 fd       	sbrc	r25, 3
    6b56:	85 91       	lpm	r24, Z+
    6b58:	93 ff       	sbrs	r25, 3
    6b5a:	81 91       	ld	r24, Z+
    6b5c:	3f 01       	movw	r6, r30
    6b5e:	88 23       	and	r24, r24
    6b60:	09 f4       	brne	.+2      	; 0x6b64 <vfprintf+0x46>
    6b62:	44 c1       	rjmp	.+648    	; 0x6dec <vfprintf+0x2ce>
    6b64:	85 32       	cpi	r24, 0x25	; 37
    6b66:	39 f4       	brne	.+14     	; 0x6b76 <vfprintf+0x58>
    6b68:	93 fd       	sbrc	r25, 3
    6b6a:	85 91       	lpm	r24, Z+
    6b6c:	93 ff       	sbrs	r25, 3
    6b6e:	81 91       	ld	r24, Z+
    6b70:	3f 01       	movw	r6, r30
    6b72:	85 32       	cpi	r24, 0x25	; 37
    6b74:	29 f4       	brne	.+10     	; 0x6b80 <vfprintf+0x62>
    6b76:	b7 01       	movw	r22, r14
    6b78:	90 e0       	ldi	r25, 0x00	; 0
    6b7a:	0e 94 8b 37 	call	0x6f16	; 0x6f16 <fputc>
    6b7e:	e6 cf       	rjmp	.-52     	; 0x6b4c <vfprintf+0x2e>
    6b80:	b1 2c       	mov	r11, r1
    6b82:	41 2c       	mov	r4, r1
    6b84:	51 2c       	mov	r5, r1
    6b86:	bf e1       	ldi	r27, 0x1F	; 31
    6b88:	b5 15       	cp	r27, r5
    6b8a:	38 f0       	brcs	.+14     	; 0x6b9a <vfprintf+0x7c>
    6b8c:	8b 32       	cpi	r24, 0x2B	; 43
    6b8e:	09 f1       	breq	.+66     	; 0x6bd2 <vfprintf+0xb4>
    6b90:	88 f4       	brcc	.+34     	; 0x6bb4 <vfprintf+0x96>
    6b92:	80 32       	cpi	r24, 0x20	; 32
    6b94:	01 f1       	breq	.+64     	; 0x6bd6 <vfprintf+0xb8>
    6b96:	83 32       	cpi	r24, 0x23	; 35
    6b98:	21 f1       	breq	.+72     	; 0x6be2 <vfprintf+0xc4>
    6b9a:	57 fc       	sbrc	r5, 7
    6b9c:	3a c0       	rjmp	.+116    	; 0x6c12 <vfprintf+0xf4>
    6b9e:	20 ed       	ldi	r18, 0xD0	; 208
    6ba0:	28 0f       	add	r18, r24
    6ba2:	2a 30       	cpi	r18, 0x0A	; 10
    6ba4:	40 f5       	brcc	.+80     	; 0x6bf6 <vfprintf+0xd8>
    6ba6:	56 fe       	sbrs	r5, 6
    6ba8:	1f c0       	rjmp	.+62     	; 0x6be8 <vfprintf+0xca>
    6baa:	b2 9c       	mul	r11, r2
    6bac:	20 0d       	add	r18, r0
    6bae:	11 24       	eor	r1, r1
    6bb0:	b2 2e       	mov	r11, r18
    6bb2:	06 c0       	rjmp	.+12     	; 0x6bc0 <vfprintf+0xa2>
    6bb4:	8d 32       	cpi	r24, 0x2D	; 45
    6bb6:	91 f0       	breq	.+36     	; 0x6bdc <vfprintf+0xbe>
    6bb8:	80 33       	cpi	r24, 0x30	; 48
    6bba:	79 f7       	brne	.-34     	; 0x6b9a <vfprintf+0x7c>
    6bbc:	68 94       	set
    6bbe:	50 f8       	bld	r5, 0
    6bc0:	f3 01       	movw	r30, r6
    6bc2:	93 fd       	sbrc	r25, 3
    6bc4:	85 91       	lpm	r24, Z+
    6bc6:	93 ff       	sbrs	r25, 3
    6bc8:	81 91       	ld	r24, Z+
    6bca:	3f 01       	movw	r6, r30
    6bcc:	81 11       	cpse	r24, r1
    6bce:	db cf       	rjmp	.-74     	; 0x6b86 <vfprintf+0x68>
    6bd0:	20 c0       	rjmp	.+64     	; 0x6c12 <vfprintf+0xf4>
    6bd2:	68 94       	set
    6bd4:	51 f8       	bld	r5, 1
    6bd6:	68 94       	set
    6bd8:	52 f8       	bld	r5, 2
    6bda:	f2 cf       	rjmp	.-28     	; 0x6bc0 <vfprintf+0xa2>
    6bdc:	68 94       	set
    6bde:	53 f8       	bld	r5, 3
    6be0:	ef cf       	rjmp	.-34     	; 0x6bc0 <vfprintf+0xa2>
    6be2:	68 94       	set
    6be4:	54 f8       	bld	r5, 4
    6be6:	ec cf       	rjmp	.-40     	; 0x6bc0 <vfprintf+0xa2>
    6be8:	42 9c       	mul	r4, r2
    6bea:	20 0d       	add	r18, r0
    6bec:	11 24       	eor	r1, r1
    6bee:	42 2e       	mov	r4, r18
    6bf0:	68 94       	set
    6bf2:	55 f8       	bld	r5, 5
    6bf4:	e5 cf       	rjmp	.-54     	; 0x6bc0 <vfprintf+0xa2>
    6bf6:	8e 32       	cpi	r24, 0x2E	; 46
    6bf8:	29 f4       	brne	.+10     	; 0x6c04 <vfprintf+0xe6>
    6bfa:	56 fc       	sbrc	r5, 6
    6bfc:	f7 c0       	rjmp	.+494    	; 0x6dec <vfprintf+0x2ce>
    6bfe:	68 94       	set
    6c00:	56 f8       	bld	r5, 6
    6c02:	de cf       	rjmp	.-68     	; 0x6bc0 <vfprintf+0xa2>
    6c04:	8c 36       	cpi	r24, 0x6C	; 108
    6c06:	19 f4       	brne	.+6      	; 0x6c0e <vfprintf+0xf0>
    6c08:	68 94       	set
    6c0a:	57 f8       	bld	r5, 7
    6c0c:	d9 cf       	rjmp	.-78     	; 0x6bc0 <vfprintf+0xa2>
    6c0e:	88 36       	cpi	r24, 0x68	; 104
    6c10:	b9 f2       	breq	.-82     	; 0x6bc0 <vfprintf+0xa2>
    6c12:	98 2f       	mov	r25, r24
    6c14:	9f 7d       	andi	r25, 0xDF	; 223
    6c16:	95 54       	subi	r25, 0x45	; 69
    6c18:	93 30       	cpi	r25, 0x03	; 3
    6c1a:	c0 f0       	brcs	.+48     	; 0x6c4c <vfprintf+0x12e>
    6c1c:	83 36       	cpi	r24, 0x63	; 99
    6c1e:	81 f1       	breq	.+96     	; 0x6c80 <vfprintf+0x162>
    6c20:	83 37       	cpi	r24, 0x73	; 115
    6c22:	a1 f1       	breq	.+104    	; 0x6c8c <vfprintf+0x16e>
    6c24:	83 35       	cpi	r24, 0x53	; 83
    6c26:	09 f0       	breq	.+2      	; 0x6c2a <vfprintf+0x10c>
    6c28:	5b c0       	rjmp	.+182    	; 0x6ce0 <vfprintf+0x1c2>
    6c2a:	d8 01       	movw	r26, r16
    6c2c:	cd 90       	ld	r12, X+
    6c2e:	dd 90       	ld	r13, X+
    6c30:	8d 01       	movw	r16, r26
    6c32:	6b 2d       	mov	r22, r11
    6c34:	70 e0       	ldi	r23, 0x00	; 0
    6c36:	56 fc       	sbrc	r5, 6
    6c38:	02 c0       	rjmp	.+4      	; 0x6c3e <vfprintf+0x120>
    6c3a:	6f ef       	ldi	r22, 0xFF	; 255
    6c3c:	7f ef       	ldi	r23, 0xFF	; 255
    6c3e:	c6 01       	movw	r24, r12
    6c40:	0e 94 65 37 	call	0x6eca	; 0x6eca <strnlen_P>
    6c44:	5c 01       	movw	r10, r24
    6c46:	68 94       	set
    6c48:	57 f8       	bld	r5, 7
    6c4a:	0a c0       	rjmp	.+20     	; 0x6c60 <vfprintf+0x142>
    6c4c:	0c 5f       	subi	r16, 0xFC	; 252
    6c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    6c50:	ef e3       	ldi	r30, 0x3F	; 63
    6c52:	e9 83       	std	Y+1, r30	; 0x01
    6c54:	aa 24       	eor	r10, r10
    6c56:	a3 94       	inc	r10
    6c58:	b1 2c       	mov	r11, r1
    6c5a:	64 01       	movw	r12, r8
    6c5c:	e8 94       	clt
    6c5e:	57 f8       	bld	r5, 7
    6c60:	53 fe       	sbrs	r5, 3
    6c62:	29 c0       	rjmp	.+82     	; 0x6cb6 <vfprintf+0x198>
    6c64:	34 2c       	mov	r3, r4
    6c66:	a1 14       	cp	r10, r1
    6c68:	b1 04       	cpc	r11, r1
    6c6a:	51 f5       	brne	.+84     	; 0x6cc0 <vfprintf+0x1a2>
    6c6c:	33 20       	and	r3, r3
    6c6e:	09 f4       	brne	.+2      	; 0x6c72 <vfprintf+0x154>
    6c70:	6d cf       	rjmp	.-294    	; 0x6b4c <vfprintf+0x2e>
    6c72:	b7 01       	movw	r22, r14
    6c74:	80 e2       	ldi	r24, 0x20	; 32
    6c76:	90 e0       	ldi	r25, 0x00	; 0
    6c78:	0e 94 8b 37 	call	0x6f16	; 0x6f16 <fputc>
    6c7c:	3a 94       	dec	r3
    6c7e:	f6 cf       	rjmp	.-20     	; 0x6c6c <vfprintf+0x14e>
    6c80:	d8 01       	movw	r26, r16
    6c82:	8c 91       	ld	r24, X
    6c84:	89 83       	std	Y+1, r24	; 0x01
    6c86:	0e 5f       	subi	r16, 0xFE	; 254
    6c88:	1f 4f       	sbci	r17, 0xFF	; 255
    6c8a:	e4 cf       	rjmp	.-56     	; 0x6c54 <vfprintf+0x136>
    6c8c:	f8 01       	movw	r30, r16
    6c8e:	c1 90       	ld	r12, Z+
    6c90:	d1 90       	ld	r13, Z+
    6c92:	8f 01       	movw	r16, r30
    6c94:	6b 2d       	mov	r22, r11
    6c96:	70 e0       	ldi	r23, 0x00	; 0
    6c98:	56 fc       	sbrc	r5, 6
    6c9a:	02 c0       	rjmp	.+4      	; 0x6ca0 <vfprintf+0x182>
    6c9c:	6f ef       	ldi	r22, 0xFF	; 255
    6c9e:	7f ef       	ldi	r23, 0xFF	; 255
    6ca0:	c6 01       	movw	r24, r12
    6ca2:	0e 94 70 37 	call	0x6ee0	; 0x6ee0 <strnlen>
    6ca6:	5c 01       	movw	r10, r24
    6ca8:	d9 cf       	rjmp	.-78     	; 0x6c5c <vfprintf+0x13e>
    6caa:	b7 01       	movw	r22, r14
    6cac:	80 e2       	ldi	r24, 0x20	; 32
    6cae:	90 e0       	ldi	r25, 0x00	; 0
    6cb0:	0e 94 8b 37 	call	0x6f16	; 0x6f16 <fputc>
    6cb4:	4a 94       	dec	r4
    6cb6:	4a 14       	cp	r4, r10
    6cb8:	1b 04       	cpc	r1, r11
    6cba:	09 f0       	breq	.+2      	; 0x6cbe <vfprintf+0x1a0>
    6cbc:	b0 f7       	brcc	.-20     	; 0x6caa <vfprintf+0x18c>
    6cbe:	d2 cf       	rjmp	.-92     	; 0x6c64 <vfprintf+0x146>
    6cc0:	f6 01       	movw	r30, r12
    6cc2:	57 fc       	sbrc	r5, 7
    6cc4:	85 91       	lpm	r24, Z+
    6cc6:	57 fe       	sbrs	r5, 7
    6cc8:	81 91       	ld	r24, Z+
    6cca:	6f 01       	movw	r12, r30
    6ccc:	b7 01       	movw	r22, r14
    6cce:	90 e0       	ldi	r25, 0x00	; 0
    6cd0:	0e 94 8b 37 	call	0x6f16	; 0x6f16 <fputc>
    6cd4:	31 10       	cpse	r3, r1
    6cd6:	3a 94       	dec	r3
    6cd8:	b1 e0       	ldi	r27, 0x01	; 1
    6cda:	ab 1a       	sub	r10, r27
    6cdc:	b1 08       	sbc	r11, r1
    6cde:	c3 cf       	rjmp	.-122    	; 0x6c66 <vfprintf+0x148>
    6ce0:	84 36       	cpi	r24, 0x64	; 100
    6ce2:	19 f0       	breq	.+6      	; 0x6cea <vfprintf+0x1cc>
    6ce4:	89 36       	cpi	r24, 0x69	; 105
    6ce6:	09 f0       	breq	.+2      	; 0x6cea <vfprintf+0x1cc>
    6ce8:	71 c0       	rjmp	.+226    	; 0x6dcc <vfprintf+0x2ae>
    6cea:	f8 01       	movw	r30, r16
    6cec:	57 fe       	sbrs	r5, 7
    6cee:	67 c0       	rjmp	.+206    	; 0x6dbe <vfprintf+0x2a0>
    6cf0:	61 91       	ld	r22, Z+
    6cf2:	71 91       	ld	r23, Z+
    6cf4:	81 91       	ld	r24, Z+
    6cf6:	91 91       	ld	r25, Z+
    6cf8:	8f 01       	movw	r16, r30
    6cfa:	e5 2d       	mov	r30, r5
    6cfc:	ef 76       	andi	r30, 0x6F	; 111
    6cfe:	de 2e       	mov	r13, r30
    6d00:	97 ff       	sbrs	r25, 7
    6d02:	09 c0       	rjmp	.+18     	; 0x6d16 <vfprintf+0x1f8>
    6d04:	90 95       	com	r25
    6d06:	80 95       	com	r24
    6d08:	70 95       	com	r23
    6d0a:	61 95       	neg	r22
    6d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    6d0e:	8f 4f       	sbci	r24, 0xFF	; 255
    6d10:	9f 4f       	sbci	r25, 0xFF	; 255
    6d12:	68 94       	set
    6d14:	d7 f8       	bld	r13, 7
    6d16:	2a e0       	ldi	r18, 0x0A	; 10
    6d18:	30 e0       	ldi	r19, 0x00	; 0
    6d1a:	a4 01       	movw	r20, r8
    6d1c:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <__ultoa_invert>
    6d20:	c8 2e       	mov	r12, r24
    6d22:	c8 18       	sub	r12, r8
    6d24:	ac 2c       	mov	r10, r12
    6d26:	5d 2c       	mov	r5, r13
    6d28:	d6 fe       	sbrs	r13, 6
    6d2a:	0c c0       	rjmp	.+24     	; 0x6d44 <vfprintf+0x226>
    6d2c:	e8 94       	clt
    6d2e:	50 f8       	bld	r5, 0
    6d30:	cb 14       	cp	r12, r11
    6d32:	40 f4       	brcc	.+16     	; 0x6d44 <vfprintf+0x226>
    6d34:	d4 fe       	sbrs	r13, 4
    6d36:	05 c0       	rjmp	.+10     	; 0x6d42 <vfprintf+0x224>
    6d38:	d2 fc       	sbrc	r13, 2
    6d3a:	03 c0       	rjmp	.+6      	; 0x6d42 <vfprintf+0x224>
    6d3c:	5d 2d       	mov	r21, r13
    6d3e:	5e 7e       	andi	r21, 0xEE	; 238
    6d40:	55 2e       	mov	r5, r21
    6d42:	ab 2c       	mov	r10, r11
    6d44:	54 fe       	sbrs	r5, 4
    6d46:	93 c0       	rjmp	.+294    	; 0x6e6e <vfprintf+0x350>
    6d48:	fe 01       	movw	r30, r28
    6d4a:	ec 0d       	add	r30, r12
    6d4c:	f1 1d       	adc	r31, r1
    6d4e:	80 81       	ld	r24, Z
    6d50:	80 33       	cpi	r24, 0x30	; 48
    6d52:	09 f0       	breq	.+2      	; 0x6d56 <vfprintf+0x238>
    6d54:	85 c0       	rjmp	.+266    	; 0x6e60 <vfprintf+0x342>
    6d56:	65 2d       	mov	r22, r5
    6d58:	69 7e       	andi	r22, 0xE9	; 233
    6d5a:	56 2e       	mov	r5, r22
    6d5c:	75 2d       	mov	r23, r5
    6d5e:	78 70       	andi	r23, 0x08	; 8
    6d60:	37 2e       	mov	r3, r23
    6d62:	53 fc       	sbrc	r5, 3
    6d64:	93 c0       	rjmp	.+294    	; 0x6e8c <vfprintf+0x36e>
    6d66:	50 fe       	sbrs	r5, 0
    6d68:	8d c0       	rjmp	.+282    	; 0x6e84 <vfprintf+0x366>
    6d6a:	bc 2c       	mov	r11, r12
    6d6c:	a4 14       	cp	r10, r4
    6d6e:	10 f4       	brcc	.+4      	; 0x6d74 <vfprintf+0x256>
    6d70:	b4 0c       	add	r11, r4
    6d72:	ba 18       	sub	r11, r10
    6d74:	54 fe       	sbrs	r5, 4
    6d76:	90 c0       	rjmp	.+288    	; 0x6e98 <vfprintf+0x37a>
    6d78:	b7 01       	movw	r22, r14
    6d7a:	80 e3       	ldi	r24, 0x30	; 48
    6d7c:	90 e0       	ldi	r25, 0x00	; 0
    6d7e:	0e 94 8b 37 	call	0x6f16	; 0x6f16 <fputc>
    6d82:	52 fe       	sbrs	r5, 2
    6d84:	07 c0       	rjmp	.+14     	; 0x6d94 <vfprintf+0x276>
    6d86:	88 e7       	ldi	r24, 0x78	; 120
    6d88:	51 fc       	sbrc	r5, 1
    6d8a:	88 e5       	ldi	r24, 0x58	; 88
    6d8c:	90 e0       	ldi	r25, 0x00	; 0
    6d8e:	b7 01       	movw	r22, r14
    6d90:	0e 94 8b 37 	call	0x6f16	; 0x6f16 <fputc>
    6d94:	cb 14       	cp	r12, r11
    6d96:	08 f4       	brcc	.+2      	; 0x6d9a <vfprintf+0x27c>
    6d98:	8b c0       	rjmp	.+278    	; 0x6eb0 <vfprintf+0x392>
    6d9a:	ca 94       	dec	r12
    6d9c:	d1 2c       	mov	r13, r1
    6d9e:	8f ef       	ldi	r24, 0xFF	; 255
    6da0:	c8 1a       	sub	r12, r24
    6da2:	d8 0a       	sbc	r13, r24
    6da4:	c8 0c       	add	r12, r8
    6da6:	d9 1c       	adc	r13, r9
    6da8:	d6 01       	movw	r26, r12
    6daa:	8e 91       	ld	r24, -X
    6dac:	6d 01       	movw	r12, r26
    6dae:	b7 01       	movw	r22, r14
    6db0:	90 e0       	ldi	r25, 0x00	; 0
    6db2:	0e 94 8b 37 	call	0x6f16	; 0x6f16 <fputc>
    6db6:	8c 14       	cp	r8, r12
    6db8:	9d 04       	cpc	r9, r13
    6dba:	b1 f7       	brne	.-20     	; 0x6da8 <vfprintf+0x28a>
    6dbc:	57 cf       	rjmp	.-338    	; 0x6c6c <vfprintf+0x14e>
    6dbe:	61 91       	ld	r22, Z+
    6dc0:	71 91       	ld	r23, Z+
    6dc2:	07 2e       	mov	r0, r23
    6dc4:	00 0c       	add	r0, r0
    6dc6:	88 0b       	sbc	r24, r24
    6dc8:	99 0b       	sbc	r25, r25
    6dca:	96 cf       	rjmp	.-212    	; 0x6cf8 <vfprintf+0x1da>
    6dcc:	d5 2c       	mov	r13, r5
    6dce:	e8 94       	clt
    6dd0:	d4 f8       	bld	r13, 4
    6dd2:	2a e0       	ldi	r18, 0x0A	; 10
    6dd4:	85 37       	cpi	r24, 0x75	; 117
    6dd6:	29 f1       	breq	.+74     	; 0x6e22 <vfprintf+0x304>
    6dd8:	f5 2d       	mov	r31, r5
    6dda:	f9 7f       	andi	r31, 0xF9	; 249
    6ddc:	df 2e       	mov	r13, r31
    6dde:	80 37       	cpi	r24, 0x70	; 112
    6de0:	a1 f0       	breq	.+40     	; 0x6e0a <vfprintf+0x2ec>
    6de2:	58 f4       	brcc	.+22     	; 0x6dfa <vfprintf+0x2dc>
    6de4:	88 35       	cpi	r24, 0x58	; 88
    6de6:	a1 f0       	breq	.+40     	; 0x6e10 <vfprintf+0x2f2>
    6de8:	8f 36       	cpi	r24, 0x6F	; 111
    6dea:	d1 f0       	breq	.+52     	; 0x6e20 <vfprintf+0x302>
    6dec:	f7 01       	movw	r30, r14
    6dee:	86 81       	ldd	r24, Z+6	; 0x06
    6df0:	97 81       	ldd	r25, Z+7	; 0x07
    6df2:	2f 96       	adiw	r28, 0x0f	; 15
    6df4:	e2 e1       	ldi	r30, 0x12	; 18
    6df6:	0c 94 7f 38 	jmp	0x70fe	; 0x70fe <__epilogue_restores__>
    6dfa:	88 37       	cpi	r24, 0x78	; 120
    6dfc:	b9 f7       	brne	.-18     	; 0x6dec <vfprintf+0x2ce>
    6dfe:	d4 fe       	sbrs	r13, 4
    6e00:	02 c0       	rjmp	.+4      	; 0x6e06 <vfprintf+0x2e8>
    6e02:	68 94       	set
    6e04:	d2 f8       	bld	r13, 2
    6e06:	20 e1       	ldi	r18, 0x10	; 16
    6e08:	0c c0       	rjmp	.+24     	; 0x6e22 <vfprintf+0x304>
    6e0a:	68 94       	set
    6e0c:	d4 f8       	bld	r13, 4
    6e0e:	f7 cf       	rjmp	.-18     	; 0x6dfe <vfprintf+0x2e0>
    6e10:	54 fe       	sbrs	r5, 4
    6e12:	03 c0       	rjmp	.+6      	; 0x6e1a <vfprintf+0x2fc>
    6e14:	2f 2f       	mov	r18, r31
    6e16:	26 60       	ori	r18, 0x06	; 6
    6e18:	d2 2e       	mov	r13, r18
    6e1a:	20 e1       	ldi	r18, 0x10	; 16
    6e1c:	32 e0       	ldi	r19, 0x02	; 2
    6e1e:	02 c0       	rjmp	.+4      	; 0x6e24 <vfprintf+0x306>
    6e20:	28 e0       	ldi	r18, 0x08	; 8
    6e22:	30 e0       	ldi	r19, 0x00	; 0
    6e24:	f8 01       	movw	r30, r16
    6e26:	d7 fe       	sbrs	r13, 7
    6e28:	15 c0       	rjmp	.+42     	; 0x6e54 <vfprintf+0x336>
    6e2a:	41 91       	ld	r20, Z+
    6e2c:	51 91       	ld	r21, Z+
    6e2e:	61 91       	ld	r22, Z+
    6e30:	71 91       	ld	r23, Z+
    6e32:	4c 87       	std	Y+12, r20	; 0x0c
    6e34:	5d 87       	std	Y+13, r21	; 0x0d
    6e36:	6e 87       	std	Y+14, r22	; 0x0e
    6e38:	7f 87       	std	Y+15, r23	; 0x0f
    6e3a:	8f 01       	movw	r16, r30
    6e3c:	a4 01       	movw	r20, r8
    6e3e:	6c 85       	ldd	r22, Y+12	; 0x0c
    6e40:	7d 85       	ldd	r23, Y+13	; 0x0d
    6e42:	8e 85       	ldd	r24, Y+14	; 0x0e
    6e44:	9f 85       	ldd	r25, Y+15	; 0x0f
    6e46:	0e 94 bb 37 	call	0x6f76	; 0x6f76 <__ultoa_invert>
    6e4a:	c8 2e       	mov	r12, r24
    6e4c:	c8 18       	sub	r12, r8
    6e4e:	e8 94       	clt
    6e50:	d7 f8       	bld	r13, 7
    6e52:	68 cf       	rjmp	.-304    	; 0x6d24 <vfprintf+0x206>
    6e54:	81 91       	ld	r24, Z+
    6e56:	91 91       	ld	r25, Z+
    6e58:	ac 01       	movw	r20, r24
    6e5a:	70 e0       	ldi	r23, 0x00	; 0
    6e5c:	60 e0       	ldi	r22, 0x00	; 0
    6e5e:	e9 cf       	rjmp	.-46     	; 0x6e32 <vfprintf+0x314>
    6e60:	52 fc       	sbrc	r5, 2
    6e62:	02 c0       	rjmp	.+4      	; 0x6e68 <vfprintf+0x34a>
    6e64:	a3 94       	inc	r10
    6e66:	7a cf       	rjmp	.-268    	; 0x6d5c <vfprintf+0x23e>
    6e68:	a3 94       	inc	r10
    6e6a:	a3 94       	inc	r10
    6e6c:	77 cf       	rjmp	.-274    	; 0x6d5c <vfprintf+0x23e>
    6e6e:	85 2d       	mov	r24, r5
    6e70:	86 78       	andi	r24, 0x86	; 134
    6e72:	09 f4       	brne	.+2      	; 0x6e76 <vfprintf+0x358>
    6e74:	73 cf       	rjmp	.-282    	; 0x6d5c <vfprintf+0x23e>
    6e76:	f6 cf       	rjmp	.-20     	; 0x6e64 <vfprintf+0x346>
    6e78:	b7 01       	movw	r22, r14
    6e7a:	80 e2       	ldi	r24, 0x20	; 32
    6e7c:	90 e0       	ldi	r25, 0x00	; 0
    6e7e:	0e 94 8b 37 	call	0x6f16	; 0x6f16 <fputc>
    6e82:	a3 94       	inc	r10
    6e84:	a4 14       	cp	r10, r4
    6e86:	c0 f3       	brcs	.-16     	; 0x6e78 <vfprintf+0x35a>
    6e88:	31 2c       	mov	r3, r1
    6e8a:	74 cf       	rjmp	.-280    	; 0x6d74 <vfprintf+0x256>
    6e8c:	34 2c       	mov	r3, r4
    6e8e:	3a 18       	sub	r3, r10
    6e90:	a4 14       	cp	r10, r4
    6e92:	08 f4       	brcc	.+2      	; 0x6e96 <vfprintf+0x378>
    6e94:	6f cf       	rjmp	.-290    	; 0x6d74 <vfprintf+0x256>
    6e96:	f8 cf       	rjmp	.-16     	; 0x6e88 <vfprintf+0x36a>
    6e98:	85 2d       	mov	r24, r5
    6e9a:	86 78       	andi	r24, 0x86	; 134
    6e9c:	09 f4       	brne	.+2      	; 0x6ea0 <vfprintf+0x382>
    6e9e:	7a cf       	rjmp	.-268    	; 0x6d94 <vfprintf+0x276>
    6ea0:	8b e2       	ldi	r24, 0x2B	; 43
    6ea2:	51 fe       	sbrs	r5, 1
    6ea4:	80 e2       	ldi	r24, 0x20	; 32
    6ea6:	57 fc       	sbrc	r5, 7
    6ea8:	8d e2       	ldi	r24, 0x2D	; 45
    6eaa:	b7 01       	movw	r22, r14
    6eac:	90 e0       	ldi	r25, 0x00	; 0
    6eae:	70 cf       	rjmp	.-288    	; 0x6d90 <vfprintf+0x272>
    6eb0:	b7 01       	movw	r22, r14
    6eb2:	80 e3       	ldi	r24, 0x30	; 48
    6eb4:	90 e0       	ldi	r25, 0x00	; 0
    6eb6:	0e 94 8b 37 	call	0x6f16	; 0x6f16 <fputc>
    6eba:	ba 94       	dec	r11
    6ebc:	6b cf       	rjmp	.-298    	; 0x6d94 <vfprintf+0x276>
    6ebe:	8f ef       	ldi	r24, 0xFF	; 255
    6ec0:	9f ef       	ldi	r25, 0xFF	; 255
    6ec2:	97 cf       	rjmp	.-210    	; 0x6df2 <vfprintf+0x2d4>

00006ec4 <__ctype_isfalse>:
    6ec4:	99 27       	eor	r25, r25
    6ec6:	88 27       	eor	r24, r24

00006ec8 <__ctype_istrue>:
    6ec8:	08 95       	ret

00006eca <strnlen_P>:
    6eca:	fc 01       	movw	r30, r24
    6ecc:	05 90       	lpm	r0, Z+
    6ece:	61 50       	subi	r22, 0x01	; 1
    6ed0:	70 40       	sbci	r23, 0x00	; 0
    6ed2:	01 10       	cpse	r0, r1
    6ed4:	d8 f7       	brcc	.-10     	; 0x6ecc <strnlen_P+0x2>
    6ed6:	80 95       	com	r24
    6ed8:	90 95       	com	r25
    6eda:	8e 0f       	add	r24, r30
    6edc:	9f 1f       	adc	r25, r31
    6ede:	08 95       	ret

00006ee0 <strnlen>:
    6ee0:	fc 01       	movw	r30, r24
    6ee2:	61 50       	subi	r22, 0x01	; 1
    6ee4:	70 40       	sbci	r23, 0x00	; 0
    6ee6:	01 90       	ld	r0, Z+
    6ee8:	01 10       	cpse	r0, r1
    6eea:	d8 f7       	brcc	.-10     	; 0x6ee2 <strnlen+0x2>
    6eec:	80 95       	com	r24
    6eee:	90 95       	com	r25
    6ef0:	8e 0f       	add	r24, r30
    6ef2:	9f 1f       	adc	r25, r31
    6ef4:	08 95       	ret

00006ef6 <strrev>:
    6ef6:	dc 01       	movw	r26, r24
    6ef8:	fc 01       	movw	r30, r24
    6efa:	67 2f       	mov	r22, r23
    6efc:	71 91       	ld	r23, Z+
    6efe:	77 23       	and	r23, r23
    6f00:	e1 f7       	brne	.-8      	; 0x6efa <strrev+0x4>
    6f02:	32 97       	sbiw	r30, 0x02	; 2
    6f04:	04 c0       	rjmp	.+8      	; 0x6f0e <strrev+0x18>
    6f06:	7c 91       	ld	r23, X
    6f08:	6d 93       	st	X+, r22
    6f0a:	70 83       	st	Z, r23
    6f0c:	62 91       	ld	r22, -Z
    6f0e:	ae 17       	cp	r26, r30
    6f10:	bf 07       	cpc	r27, r31
    6f12:	c8 f3       	brcs	.-14     	; 0x6f06 <strrev+0x10>
    6f14:	08 95       	ret

00006f16 <fputc>:
    6f16:	0f 93       	push	r16
    6f18:	1f 93       	push	r17
    6f1a:	cf 93       	push	r28
    6f1c:	df 93       	push	r29
    6f1e:	18 2f       	mov	r17, r24
    6f20:	09 2f       	mov	r16, r25
    6f22:	eb 01       	movw	r28, r22
    6f24:	8b 81       	ldd	r24, Y+3	; 0x03
    6f26:	81 fd       	sbrc	r24, 1
    6f28:	09 c0       	rjmp	.+18     	; 0x6f3c <fputc+0x26>
    6f2a:	1f ef       	ldi	r17, 0xFF	; 255
    6f2c:	0f ef       	ldi	r16, 0xFF	; 255
    6f2e:	81 2f       	mov	r24, r17
    6f30:	90 2f       	mov	r25, r16
    6f32:	df 91       	pop	r29
    6f34:	cf 91       	pop	r28
    6f36:	1f 91       	pop	r17
    6f38:	0f 91       	pop	r16
    6f3a:	08 95       	ret
    6f3c:	82 ff       	sbrs	r24, 2
    6f3e:	14 c0       	rjmp	.+40     	; 0x6f68 <fputc+0x52>
    6f40:	2e 81       	ldd	r18, Y+6	; 0x06
    6f42:	3f 81       	ldd	r19, Y+7	; 0x07
    6f44:	8c 81       	ldd	r24, Y+4	; 0x04
    6f46:	9d 81       	ldd	r25, Y+5	; 0x05
    6f48:	28 17       	cp	r18, r24
    6f4a:	39 07       	cpc	r19, r25
    6f4c:	3c f4       	brge	.+14     	; 0x6f5c <fputc+0x46>
    6f4e:	e8 81       	ld	r30, Y
    6f50:	f9 81       	ldd	r31, Y+1	; 0x01
    6f52:	cf 01       	movw	r24, r30
    6f54:	01 96       	adiw	r24, 0x01	; 1
    6f56:	99 83       	std	Y+1, r25	; 0x01
    6f58:	88 83       	st	Y, r24
    6f5a:	10 83       	st	Z, r17
    6f5c:	8e 81       	ldd	r24, Y+6	; 0x06
    6f5e:	9f 81       	ldd	r25, Y+7	; 0x07
    6f60:	01 96       	adiw	r24, 0x01	; 1
    6f62:	9f 83       	std	Y+7, r25	; 0x07
    6f64:	8e 83       	std	Y+6, r24	; 0x06
    6f66:	e3 cf       	rjmp	.-58     	; 0x6f2e <fputc+0x18>
    6f68:	e8 85       	ldd	r30, Y+8	; 0x08
    6f6a:	f9 85       	ldd	r31, Y+9	; 0x09
    6f6c:	81 2f       	mov	r24, r17
    6f6e:	09 95       	icall
    6f70:	89 2b       	or	r24, r25
    6f72:	a1 f3       	breq	.-24     	; 0x6f5c <fputc+0x46>
    6f74:	da cf       	rjmp	.-76     	; 0x6f2a <fputc+0x14>

00006f76 <__ultoa_invert>:
    6f76:	fa 01       	movw	r30, r20
    6f78:	aa 27       	eor	r26, r26
    6f7a:	28 30       	cpi	r18, 0x08	; 8
    6f7c:	51 f1       	breq	.+84     	; 0x6fd2 <__ultoa_invert+0x5c>
    6f7e:	20 31       	cpi	r18, 0x10	; 16
    6f80:	81 f1       	breq	.+96     	; 0x6fe2 <__ultoa_invert+0x6c>
    6f82:	e8 94       	clt
    6f84:	6f 93       	push	r22
    6f86:	6e 7f       	andi	r22, 0xFE	; 254
    6f88:	6e 5f       	subi	r22, 0xFE	; 254
    6f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    6f8c:	8f 4f       	sbci	r24, 0xFF	; 255
    6f8e:	9f 4f       	sbci	r25, 0xFF	; 255
    6f90:	af 4f       	sbci	r26, 0xFF	; 255
    6f92:	b1 e0       	ldi	r27, 0x01	; 1
    6f94:	3e d0       	rcall	.+124    	; 0x7012 <__ultoa_invert+0x9c>
    6f96:	b4 e0       	ldi	r27, 0x04	; 4
    6f98:	3c d0       	rcall	.+120    	; 0x7012 <__ultoa_invert+0x9c>
    6f9a:	67 0f       	add	r22, r23
    6f9c:	78 1f       	adc	r23, r24
    6f9e:	89 1f       	adc	r24, r25
    6fa0:	9a 1f       	adc	r25, r26
    6fa2:	a1 1d       	adc	r26, r1
    6fa4:	68 0f       	add	r22, r24
    6fa6:	79 1f       	adc	r23, r25
    6fa8:	8a 1f       	adc	r24, r26
    6faa:	91 1d       	adc	r25, r1
    6fac:	a1 1d       	adc	r26, r1
    6fae:	6a 0f       	add	r22, r26
    6fb0:	71 1d       	adc	r23, r1
    6fb2:	81 1d       	adc	r24, r1
    6fb4:	91 1d       	adc	r25, r1
    6fb6:	a1 1d       	adc	r26, r1
    6fb8:	20 d0       	rcall	.+64     	; 0x6ffa <__ultoa_invert+0x84>
    6fba:	09 f4       	brne	.+2      	; 0x6fbe <__ultoa_invert+0x48>
    6fbc:	68 94       	set
    6fbe:	3f 91       	pop	r19
    6fc0:	2a e0       	ldi	r18, 0x0A	; 10
    6fc2:	26 9f       	mul	r18, r22
    6fc4:	11 24       	eor	r1, r1
    6fc6:	30 19       	sub	r19, r0
    6fc8:	30 5d       	subi	r19, 0xD0	; 208
    6fca:	31 93       	st	Z+, r19
    6fcc:	de f6       	brtc	.-74     	; 0x6f84 <__ultoa_invert+0xe>
    6fce:	cf 01       	movw	r24, r30
    6fd0:	08 95       	ret
    6fd2:	46 2f       	mov	r20, r22
    6fd4:	47 70       	andi	r20, 0x07	; 7
    6fd6:	40 5d       	subi	r20, 0xD0	; 208
    6fd8:	41 93       	st	Z+, r20
    6fda:	b3 e0       	ldi	r27, 0x03	; 3
    6fdc:	0f d0       	rcall	.+30     	; 0x6ffc <__ultoa_invert+0x86>
    6fde:	c9 f7       	brne	.-14     	; 0x6fd2 <__ultoa_invert+0x5c>
    6fe0:	f6 cf       	rjmp	.-20     	; 0x6fce <__ultoa_invert+0x58>
    6fe2:	46 2f       	mov	r20, r22
    6fe4:	4f 70       	andi	r20, 0x0F	; 15
    6fe6:	40 5d       	subi	r20, 0xD0	; 208
    6fe8:	4a 33       	cpi	r20, 0x3A	; 58
    6fea:	18 f0       	brcs	.+6      	; 0x6ff2 <__ultoa_invert+0x7c>
    6fec:	49 5d       	subi	r20, 0xD9	; 217
    6fee:	31 fd       	sbrc	r19, 1
    6ff0:	40 52       	subi	r20, 0x20	; 32
    6ff2:	41 93       	st	Z+, r20
    6ff4:	02 d0       	rcall	.+4      	; 0x6ffa <__ultoa_invert+0x84>
    6ff6:	a9 f7       	brne	.-22     	; 0x6fe2 <__ultoa_invert+0x6c>
    6ff8:	ea cf       	rjmp	.-44     	; 0x6fce <__ultoa_invert+0x58>
    6ffa:	b4 e0       	ldi	r27, 0x04	; 4
    6ffc:	a6 95       	lsr	r26
    6ffe:	97 95       	ror	r25
    7000:	87 95       	ror	r24
    7002:	77 95       	ror	r23
    7004:	67 95       	ror	r22
    7006:	ba 95       	dec	r27
    7008:	c9 f7       	brne	.-14     	; 0x6ffc <__ultoa_invert+0x86>
    700a:	00 97       	sbiw	r24, 0x00	; 0
    700c:	61 05       	cpc	r22, r1
    700e:	71 05       	cpc	r23, r1
    7010:	08 95       	ret
    7012:	9b 01       	movw	r18, r22
    7014:	ac 01       	movw	r20, r24
    7016:	0a 2e       	mov	r0, r26
    7018:	06 94       	lsr	r0
    701a:	57 95       	ror	r21
    701c:	47 95       	ror	r20
    701e:	37 95       	ror	r19
    7020:	27 95       	ror	r18
    7022:	ba 95       	dec	r27
    7024:	c9 f7       	brne	.-14     	; 0x7018 <__ultoa_invert+0xa2>
    7026:	62 0f       	add	r22, r18
    7028:	73 1f       	adc	r23, r19
    702a:	84 1f       	adc	r24, r20
    702c:	95 1f       	adc	r25, r21
    702e:	a0 1d       	adc	r26, r0
    7030:	08 95       	ret

00007032 <eeprom_read_block>:
    7032:	dc 01       	movw	r26, r24
    7034:	cb 01       	movw	r24, r22

00007036 <eeprom_read_blraw>:
    7036:	fc 01       	movw	r30, r24
    7038:	f9 99       	sbic	0x1f, 1	; 31
    703a:	fe cf       	rjmp	.-4      	; 0x7038 <eeprom_read_blraw+0x2>
    703c:	06 c0       	rjmp	.+12     	; 0x704a <eeprom_read_blraw+0x14>
    703e:	f2 bd       	out	0x22, r31	; 34
    7040:	e1 bd       	out	0x21, r30	; 33
    7042:	f8 9a       	sbi	0x1f, 0	; 31
    7044:	31 96       	adiw	r30, 0x01	; 1
    7046:	00 b4       	in	r0, 0x20	; 32
    7048:	0d 92       	st	X+, r0
    704a:	41 50       	subi	r20, 0x01	; 1
    704c:	50 40       	sbci	r21, 0x00	; 0
    704e:	b8 f7       	brcc	.-18     	; 0x703e <eeprom_read_blraw+0x8>
    7050:	08 95       	ret

00007052 <eeprom_update_block>:
    7052:	dc 01       	movw	r26, r24
    7054:	a4 0f       	add	r26, r20
    7056:	b5 1f       	adc	r27, r21
    7058:	41 50       	subi	r20, 0x01	; 1
    705a:	50 40       	sbci	r21, 0x00	; 0
    705c:	48 f0       	brcs	.+18     	; 0x7070 <eeprom_update_block+0x1e>
    705e:	cb 01       	movw	r24, r22
    7060:	84 0f       	add	r24, r20
    7062:	95 1f       	adc	r25, r21
    7064:	2e 91       	ld	r18, -X
    7066:	0e 94 3a 38 	call	0x7074	; 0x7074 <eeprom_update_r18>
    706a:	41 50       	subi	r20, 0x01	; 1
    706c:	50 40       	sbci	r21, 0x00	; 0
    706e:	d0 f7       	brcc	.-12     	; 0x7064 <eeprom_update_block+0x12>
    7070:	08 95       	ret

00007072 <eeprom_update_byte>:
    7072:	26 2f       	mov	r18, r22

00007074 <eeprom_update_r18>:
    7074:	f9 99       	sbic	0x1f, 1	; 31
    7076:	fe cf       	rjmp	.-4      	; 0x7074 <eeprom_update_r18>
    7078:	92 bd       	out	0x22, r25	; 34
    707a:	81 bd       	out	0x21, r24	; 33
    707c:	f8 9a       	sbi	0x1f, 0	; 31
    707e:	01 97       	sbiw	r24, 0x01	; 1
    7080:	00 b4       	in	r0, 0x20	; 32
    7082:	02 16       	cp	r0, r18
    7084:	39 f0       	breq	.+14     	; 0x7094 <eeprom_update_r18+0x20>
    7086:	1f ba       	out	0x1f, r1	; 31
    7088:	20 bd       	out	0x20, r18	; 32
    708a:	0f b6       	in	r0, 0x3f	; 63
    708c:	f8 94       	cli
    708e:	fa 9a       	sbi	0x1f, 2	; 31
    7090:	f9 9a       	sbi	0x1f, 1	; 31
    7092:	0f be       	out	0x3f, r0	; 63
    7094:	08 95       	ret

00007096 <eeprom_write_block>:
    7096:	dc 01       	movw	r26, r24
    7098:	cb 01       	movw	r24, r22
    709a:	03 c0       	rjmp	.+6      	; 0x70a2 <eeprom_write_block+0xc>
    709c:	2d 91       	ld	r18, X+
    709e:	0e 94 56 38 	call	0x70ac	; 0x70ac <eeprom_write_r18>
    70a2:	41 50       	subi	r20, 0x01	; 1
    70a4:	50 40       	sbci	r21, 0x00	; 0
    70a6:	d0 f7       	brcc	.-12     	; 0x709c <eeprom_write_block+0x6>
    70a8:	08 95       	ret

000070aa <eeprom_write_byte>:
    70aa:	26 2f       	mov	r18, r22

000070ac <eeprom_write_r18>:
    70ac:	f9 99       	sbic	0x1f, 1	; 31
    70ae:	fe cf       	rjmp	.-4      	; 0x70ac <eeprom_write_r18>
    70b0:	1f ba       	out	0x1f, r1	; 31
    70b2:	92 bd       	out	0x22, r25	; 34
    70b4:	81 bd       	out	0x21, r24	; 33
    70b6:	20 bd       	out	0x20, r18	; 32
    70b8:	0f b6       	in	r0, 0x3f	; 63
    70ba:	f8 94       	cli
    70bc:	fa 9a       	sbi	0x1f, 2	; 31
    70be:	f9 9a       	sbi	0x1f, 1	; 31
    70c0:	0f be       	out	0x3f, r0	; 63
    70c2:	01 96       	adiw	r24, 0x01	; 1
    70c4:	08 95       	ret

000070c6 <__prologue_saves__>:
    70c6:	2f 92       	push	r2
    70c8:	3f 92       	push	r3
    70ca:	4f 92       	push	r4
    70cc:	5f 92       	push	r5
    70ce:	6f 92       	push	r6
    70d0:	7f 92       	push	r7
    70d2:	8f 92       	push	r8
    70d4:	9f 92       	push	r9
    70d6:	af 92       	push	r10
    70d8:	bf 92       	push	r11
    70da:	cf 92       	push	r12
    70dc:	df 92       	push	r13
    70de:	ef 92       	push	r14
    70e0:	ff 92       	push	r15
    70e2:	0f 93       	push	r16
    70e4:	1f 93       	push	r17
    70e6:	cf 93       	push	r28
    70e8:	df 93       	push	r29
    70ea:	cd b7       	in	r28, 0x3d	; 61
    70ec:	de b7       	in	r29, 0x3e	; 62
    70ee:	ca 1b       	sub	r28, r26
    70f0:	db 0b       	sbc	r29, r27
    70f2:	0f b6       	in	r0, 0x3f	; 63
    70f4:	f8 94       	cli
    70f6:	de bf       	out	0x3e, r29	; 62
    70f8:	0f be       	out	0x3f, r0	; 63
    70fa:	cd bf       	out	0x3d, r28	; 61
    70fc:	09 94       	ijmp

000070fe <__epilogue_restores__>:
    70fe:	2a 88       	ldd	r2, Y+18	; 0x12
    7100:	39 88       	ldd	r3, Y+17	; 0x11
    7102:	48 88       	ldd	r4, Y+16	; 0x10
    7104:	5f 84       	ldd	r5, Y+15	; 0x0f
    7106:	6e 84       	ldd	r6, Y+14	; 0x0e
    7108:	7d 84       	ldd	r7, Y+13	; 0x0d
    710a:	8c 84       	ldd	r8, Y+12	; 0x0c
    710c:	9b 84       	ldd	r9, Y+11	; 0x0b
    710e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7110:	b9 84       	ldd	r11, Y+9	; 0x09
    7112:	c8 84       	ldd	r12, Y+8	; 0x08
    7114:	df 80       	ldd	r13, Y+7	; 0x07
    7116:	ee 80       	ldd	r14, Y+6	; 0x06
    7118:	fd 80       	ldd	r15, Y+5	; 0x05
    711a:	0c 81       	ldd	r16, Y+4	; 0x04
    711c:	1b 81       	ldd	r17, Y+3	; 0x03
    711e:	aa 81       	ldd	r26, Y+2	; 0x02
    7120:	b9 81       	ldd	r27, Y+1	; 0x01
    7122:	ce 0f       	add	r28, r30
    7124:	d1 1d       	adc	r29, r1
    7126:	0f b6       	in	r0, 0x3f	; 63
    7128:	f8 94       	cli
    712a:	de bf       	out	0x3e, r29	; 62
    712c:	0f be       	out	0x3f, r0	; 63
    712e:	cd bf       	out	0x3d, r28	; 61
    7130:	ed 01       	movw	r28, r26
    7132:	08 95       	ret

00007134 <_exit>:
    7134:	f8 94       	cli

00007136 <__stop_program>:
    7136:	ff cf       	rjmp	.-2      	; 0x7136 <__stop_program>
    7138:	28 13       	cpse	r18, r24
    713a:	2a 13       	cpse	r18, r26
    713c:	2c 13       	cpse	r18, r28
    713e:	2e 13       	cpse	r18, r30
    7140:	30 13       	cpse	r19, r16
    7142:	32 13       	cpse	r19, r18
    7144:	36 13       	cpse	r19, r22
    7146:	34 13       	cpse	r19, r20
    7148:	80 13       	cpse	r24, r16
    714a:	83 13       	cpse	r24, r19
    714c:	8e 13       	cpse	r24, r30
    714e:	99 13       	cpse	r25, r25
    7150:	ad 13       	cpse	r26, r29
    7152:	bc 13       	cpse	r27, r28
    7154:	bc 13       	cpse	r27, r28
    7156:	bc 13       	cpse	r27, r28
    7158:	c0 1a       	sub	r12, r16
    715a:	c3 1a       	sub	r12, r19
    715c:	ce 1a       	sub	r12, r30
    715e:	d9 1a       	sub	r13, r25
    7160:	f6 1a       	sub	r15, r22
    7162:	02 1b       	sub	r16, r18
    7164:	02 1b       	sub	r16, r18
    7166:	02 1b       	sub	r16, r18
